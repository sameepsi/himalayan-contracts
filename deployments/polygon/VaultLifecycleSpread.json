{
  "address": "0x71F73bAA1b5B33272e4FE6E51a99B866783F409c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "keeper",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "performanceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "managementFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "tokenName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenSymbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isPut",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "isSpread",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "decimals",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "uint56",
              "name": "minimumSupply",
              "type": "uint56"
            },
            {
              "internalType": "uint104",
              "name": "cap",
              "type": "uint104"
            }
          ],
          "internalType": "struct Vault.VaultParams",
          "name": "_vaultParams",
          "type": "tuple"
        }
      ],
      "name": "verifyInitializerParams",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x67fcc3738f9e5c0b7e1f7f5df84f08f2ef465e59f9442312dd8e16194b49a009",
  "receipt": {
    "to": null,
    "from": "0x1F6cB55c5A2B7753d6605ceF8e4999B90Fbb011A",
    "contractAddress": "0x71F73bAA1b5B33272e4FE6E51a99B866783F409c",
    "transactionIndex": 1,
    "gasUsed": "3393113",
    "logsBloom": "0x
    "blockHash": "0x323b82b82c2f0fdbbd38299925b0dfa33a38ac0c5326e9e732d39b7ca317d653",
    "transactionHash": "0x67fcc3738f9e5c0b7e1f7f5df84f08f2ef465e59f9442312dd8e16194b49a009",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 39616383,
        "transactionHash": "0x67fcc3738f9e5c0b7e1f7f5df84f08f2ef465e59f9442312dd8e16194b49a009",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001f6cb55c5a2b7753d6605cef8e4999b90fbb011a",
          "0x000000000000000000000000127685d6dd6683085da4b6a041efcef1681e5c9c"
        ],
        "data": "0x000000000000000000000000000000000000000000000000073b3357cdb4e1b3000000000000000000000000000000000000000000000000776f00c402ed3bf20000000000000000000000000000000000000000000012cd000e050ef116e2960000000000000000000000000000000000000000000000007033cd6c35385a3f0000000000000000000000000000000000000000000012cd07493866becbc449",
        "logIndex": 6,
        "blockHash": "0x323b82b82c2f0fdbbd38299925b0dfa33a38ac0c5326e9e732d39b7ca317d653"
      }
    ],
    "blockNumber": 39616383,
    "cumulativeGasUsed": "3632545",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "6af5012b821624158e268746ba6ca5b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"managementFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSpread\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"uint56\",\"name\":\"minimumSupply\",\"type\":\"uint56\"},{\"internalType\":\"uint104\",\"name\":\"cap\",\"type\":\"uint104\"}],\"internalType\":\"struct Vault.VaultParams\",\"name\":\"_vaultParams\",\"type\":\"tuple\"}],\"name\":\"verifyInitializerParams\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"commitAndClose(VaultLifecycleSpread.CloseParams,Vault.VaultParams storage,Vault.VaultState storage)\":{\"params\":{\"closeParams\":\"is the struct with details on previous spread and strike selection details\",\"vaultParams\":\"is the struct with vault general data\",\"vaultState\":\"is the struct with vault accounting state\"},\"returns\":{\"deltas\":\"is the deltas of the new options in the spread\",\"spread\":\"addresses of the new short and long options\",\"strikePrices\":\"is the strike prices of the options in spread\"}},\"createSpread(address,address,address[],uint256,address,bool)\":{\"params\":{\"depositAmount\":\"is the amount of collateral to deposit\",\"gammaController\":\"is the address of the opyn controller contract\",\"marginPool\":\"is the address of the opyn margin contract which holds the collateral\",\"newVault\":\"whether to create new vault or not\",\"spread\":\"Spread oTokens\",\"spreadToken\":\"Spread Token\"},\"returns\":{\"collateralUsed\":\"collateral amount used to create spread\",\"mintAmount\":\"spreadToken mint amount\"}},\"rollover(Vault.VaultState storage,VaultLifecycleSpread.RolloverParams)\":{\"params\":{\"params\":\"is the rollover parameters passed to compute the next state\",\"vaultState\":\"is the storage variable vaultState passed from RibbonVault\"},\"returns\":{\"mintShares\":\"is the amount of shares to mint from deposits\",\"newLockedAmount\":\"is the amount of funds to allocate for the new round\",\"newPricePerShare\":\"is the price per share of the new round\",\"performanceFeeInAsset\":\"is the performance fee charged by vault\",\"queuedWithdrawAmount\":\"is the amount of funds set aside for withdrawal\",\"totalVaultFee\":\"is the total amount of fee charged by vault\"}},\"settleSpread(address,address)\":{\"params\":{\"gammaController\":\"is the address of the opyn controller contract\",\"spreadToken\":\"Token which holds other vault of the strategy\"},\"returns\":{\"_0\":\"amount of collateral redeemed from the vault\"}},\"startAuction(GnosisAuction.AuctionDetails)\":{\"params\":{\"auctionDetails\":\"is the struct with all the custom parameters of the auction\"},\"returns\":{\"_0\":\"the auction id of the newly created auction\"}},\"verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams)\":{\"params\":{\"_vaultParams\":\"is the struct with vault general data\",\"feeRecipient\":\"is the address to recieve vault performance and management fees\",\"owner\":\"is the owner of the vault with critical permissions\",\"performanceFee\":\"is the perfomance fee pct.\",\"tokenName\":\"is the name of the token\",\"tokenSymbol\":\"is the symbol of the token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"commitAndClose(VaultLifecycleSpread.CloseParams,Vault.VaultParams storage,Vault.VaultState storage)\":{\"notice\":\"Sets the next spread for the vault, and calculates its premium for the auction\"},\"createSpread(address,address,address[],uint256,address,bool)\":{\"notice\":\"Creates the actual Opyn short position by depositing collateral and minting otokens\"},\"rollover(Vault.VaultState storage,VaultLifecycleSpread.RolloverParams)\":{\"notice\":\"Calculate the shares to mint, new price per share, and amount of funds to re-allocate as collateral for the new round\"},\"settleSpread(address,address)\":{\"notice\":\"Close the existing short otoken position. Currently this implementation is simple. It closes the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by calling SettleVault action, this assumption should hold.\"},\"startAuction(GnosisAuction.AuctionDetails)\":{\"notice\":\"Starts the gnosis auction\"},\"verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams)\":{\"notice\":\"Verify the constructor params satisfy requirements\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/VaultLifecycleSpread.sol\":\"VaultLifecycleSpread\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/interfaces/GammaInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nlibrary GammaTypes {\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct Vault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\\n        // in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n\\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\\n    struct MarginVault {\\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\\n        address[] shortOtokens;\\n        // addresses of oTokens a user has bought and deposited in this vault\\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\\n        address[] longOtokens;\\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\\n        address[] collateralAssets;\\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\\n        uint256[] shortAmounts;\\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\\n        uint256[] longAmounts;\\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\\n        uint256[] collateralAmounts;\\n    }\\n}\\n\\ninterface IMarginCalculator {\\n    /**\\n     * @notice returns the amount of collateral that can be removed from an actual or a theoretical vault\\n     * @dev return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault\\n     * @param _vault theoretical vault that needs to be checked\\n     * @param _vaultType vault type (0 for spread/max loss, 1 for naked margin)\\n     * @return excessCollateral the amount by which the margin is above or below the required amount\\n     * @return isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault\\n     * if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault\\n     */\\n    function getExcessCollateral(GammaTypes.MarginVault memory _vault, uint256 _vaultType)\\n        external\\n        view\\n        returns (uint256, bool);\\n}\\n\\ninterface IOtoken {\\n    function underlyingAsset() external view returns (address);\\n\\n    function strikeAsset() external view returns (address);\\n\\n    function collateralAsset() external view returns (address);\\n\\n    function strikePrice() external view returns (uint256);\\n\\n    function expiryTimestamp() external view returns (uint256);\\n\\n    function isPut() external view returns (bool);\\n}\\n\\ninterface IOtokenFactory {\\n    function getOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    function createOtoken(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external returns (address);\\n\\n    function getTargetOtokenAddress(\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n    ) external view returns (address);\\n\\n    event OtokenCreated(\\n        address tokenAddress,\\n        address creator,\\n        address indexed underlying,\\n        address indexed strike,\\n        address indexed collateral,\\n        uint256 strikePrice,\\n        uint256 expiry,\\n        bool isPut\\n    );\\n}\\n\\ninterface IController {\\n    // possible actions that can be performed\\n    enum ActionType {\\n        OpenVault,\\n        MintShortOption,\\n        BurnShortOption,\\n        DepositLongOption,\\n        WithdrawLongOption,\\n        DepositCollateral,\\n        WithdrawCollateral,\\n        SettleVault,\\n        Redeem,\\n        Call,\\n        Liquidate\\n    }\\n\\n    struct ActionArgs {\\n        // type of action that is being performed on the system\\n        ActionType actionType;\\n        // address of the account owner\\n        address owner;\\n        // address which we move assets from or to (depending on the action type)\\n        address secondAddress;\\n        // asset that is to be transfered\\n        address asset;\\n        // index of the vault that is to be modified (if any)\\n        uint256 vaultId;\\n        // amount of asset that is to be transfered\\n        uint256 amount;\\n        // each vault can hold multiple short / long / collateral assets\\n        // but we are restricting the scope to only 1 of each in this version\\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\\n        uint256 index;\\n        // any other data that needs to be passed in for arbitrary function calls\\n        bytes data;\\n    }\\n\\n    struct RedeemArgs {\\n        // address to which we pay out the oToken proceeds\\n        address receiver;\\n        // oToken that is to be redeemed\\n        address otoken;\\n        // amount of oTokens that is to be redeemed\\n        uint256 amount;\\n    }\\n\\n    function getPayout(address _otoken, uint256 _amount)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function operate(ActionArgs[] calldata _actions) external;\\n\\n    function getAccountVaultCounter(address owner)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function oracle() external view returns (address);\\n\\n    function calculator() external view returns(address);\\n\\n    function getVault(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (GammaTypes.Vault memory);\\n\\n    function getProceed(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function isSettlementAllowed(\\n        address _underlying,\\n        address _strike,\\n        address _collateral,\\n        uint256 _expiry\\n    ) external view returns (bool);\\n\\n    function getVaultWithDetails(address _owner, uint256 _vaultId)\\n        external\\n        view\\n        returns (\\n            GammaTypes.MarginVault memory,\\n            uint256,\\n            uint256\\n        );\\n\\n    function setOperator(address _operator, bool _isOperator) external;\\n}\\n\\ninterface IOracle {\\n    function setAssetPricer(address _asset, address _pricer) external;\\n\\n    function updateAssetPricer(address _asset, address _pricer) external;\\n\\n    function getPrice(address _asset) external view returns (uint256);\\n\\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\\n\\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\\n    \\n    function setExpiryPrice(\\n        address _asset,\\n        uint256 _expiryTimestamp,\\n        uint256 _price\\n    ) external;\\n}\\n\",\"keccak256\":\"0x487af472b5a23cbc30ded295efbc325f496c89977967504d7dcbbbf3499f4818\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20Detailed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Detailed is IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string calldata);\\n\\n    function name() external view returns (string calldata);\\n}\\n\",\"keccak256\":\"0xa208ac711022752353233b80fac28ca1c314d64687d481f64c934b8cb6383fe1\",\"license\":\"MIT\"},\"contracts/interfaces/IGnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary AuctionType {\\n    struct AuctionData {\\n        IERC20 auctioningToken;\\n        IERC20 biddingToken;\\n        uint256 orderCancellationEndDate;\\n        uint256 auctionEndDate;\\n        bytes32 initialAuctionOrder;\\n        uint256 minimumBiddingAmountPerOrder;\\n        uint256 interimSumBidAmount;\\n        bytes32 interimOrder;\\n        bytes32 clearingPriceOrder;\\n        uint96 volumeClearingPriceOrder;\\n        bool minFundingThresholdNotReached;\\n        bool isAtomicClosureAllowed;\\n        uint256 feeNumerator;\\n        uint256 minFundingThreshold;\\n    }\\n}\\n\\ninterface IGnosisAuction {\\n    function initiateAuction(\\n        address _auctioningToken,\\n        address _biddingToken,\\n        uint256 orderCancellationEndDate,\\n        uint256 auctionEndDate,\\n        uint96 _auctionedSellAmount,\\n        uint96 _minBuyAmount,\\n        uint256 minimumBiddingAmountPerOrder,\\n        uint256 minFundingThreshold,\\n        bool isAtomicClosureAllowed,\\n        address accessManagerContract,\\n        bytes memory accessManagerContractData\\n    ) external returns (uint256);\\n\\n    function auctionCounter() external view returns (uint256);\\n\\n    function auctionData(uint256 auctionId)\\n        external\\n        view\\n        returns (AuctionType.AuctionData memory);\\n\\n    function auctionAccessManager(uint256 auctionId)\\n        external\\n        view\\n        returns (address);\\n\\n    function auctionAccessData(uint256 auctionId)\\n        external\\n        view\\n        returns (bytes memory);\\n\\n    function FEE_DENOMINATOR() external view returns (uint256);\\n\\n    function feeNumerator() external view returns (uint256);\\n\\n    function settleAuction(uint256 auctionId) external returns (bytes32);\\n\\n    function placeSellOrders(\\n        uint256 auctionId,\\n        uint96[] memory _minBuyAmounts,\\n        uint96[] memory _sellAmounts,\\n        bytes32[] memory _prevSellOrders,\\n        bytes calldata allowListCallData\\n    ) external returns (uint64);\\n\\n    function claimFromParticipantOrder(\\n        uint256 auctionId,\\n        bytes32[] memory orders\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xa4711fa0762652c5a5dea98c2d5345db4ba6e5154c0a78dd299214b2ba26d5f5\",\"license\":\"MIT\"},\"contracts/interfaces/IHimalayan.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IHimalayan {\\n    function deposit(uint256 amount) external;\\n\\n    function depositETH() external payable;\\n\\n    function cap() external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n}\\n\\ninterface IStrikeSelectionSpread {\\n    function getStrikePrices(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function optionId() external view returns (bytes32);\\n}\\n\\ninterface ISpreadToken {\\n\\n    function init(\\n        string calldata name,\\n        string calldata symbol,\\n        address _asset,\\n        address _underlying,\\n        uint256 _expiry,\\n        bool _isPut\\n    )\\n        external;\\n\\n    function mint(uint256 amount) external;\\n\\n    function settleVault() external;\\n\\n    function burnAndClaim() external;\\n}\\n\",\"keccak256\":\"0x896f4f7b6d67edad4d4c6ce977314ffdb11446a4561dc75a3b0de08573fe1fe4\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonVault {\\n    function deposit(uint256 amount) external;\\n\\n    function depositETH() external payable;\\n\\n    function cap() external view returns (uint256);\\n\\n    function depositFor(uint256 amount, address creditor) external;\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n}\\n\\ninterface IStrikeSelection {\\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\\n        external\\n        view\\n        returns (uint256, uint256);\\n\\n    function delta() external view returns (uint256);\\n}\\n\\ninterface IOptionsPremiumPricer {\\n    function getPremium(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getPremiumInStables(\\n        uint256 strikePrice,\\n        uint256 timeToExpiry,\\n        bool isPut\\n    ) external view returns (uint256);\\n\\n    function getOptionDelta(\\n        uint256 spotPrice,\\n        uint256 strikePrice,\\n        uint256 volatility,\\n        uint256 expiryTimestamp\\n    ) external view returns (uint256 delta);\\n\\n    function getUnderlyingPrice() external view returns (uint256);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function volatilityOracle() external view returns (address);\\n\\n    function optionId() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcd2771e05807134f682ae5e56dd4964f9235a1fe992a66064713a0fa924427fb\",\"license\":\"MIT\"},\"contracts/interfaces/IRibbonThetaVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport {Vault} from \\\"../libraries/Vault.sol\\\";\\n\\ninterface IRibbonThetaVault {\\n    function currentOption() external view returns (address);\\n\\n    function nextOption() external view returns (address);\\n\\n    function vaultParams() external view returns (Vault.VaultParams memory);\\n\\n    function vaultState() external view returns (Vault.VaultState memory);\\n\\n    function optionState() external view returns (Vault.OptionState memory);\\n\\n    function optionAuctionID() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function roundPricePerShare(uint256) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6d793613cb0654a21b449ac36e2590c470656053c1139ba7d638f007302b7cc9\",\"license\":\"MIT\"},\"contracts/libraries/GnosisAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {DSMath} from \\\"../vendor/DSMath.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {IOtoken} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IRibbon.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {IRibbonThetaVault} from \\\"../interfaces/IRibbonThetaVault.sol\\\";\\n\\nlibrary GnosisAuction {\\n    using SafeERC20 for IERC20;\\n\\n    event InitiateGnosisAuction(\\n        address indexed auctioningToken,\\n        address indexed biddingToken,\\n        uint256 auctionCounter,\\n        address indexed manager\\n    );\\n\\n    event PlaceAuctionBid(\\n        uint256 auctionId,\\n        address indexed auctioningToken,\\n        uint256 sellAmount,\\n        uint256 buyAmount,\\n        address indexed bidder\\n    );\\n\\n    struct AuctionDetails {\\n        address tokenAddress;// Token to sell\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 premium;\\n        uint256 duration;\\n    }\\n\\n    struct BidDetails {\\n        address tokenAddress;// Token to sell\\n        address gnosisEasyAuction;\\n        address asset;\\n        uint256 assetDecimals;\\n        uint256 auctionId;\\n        uint256 lockedBalance;\\n        uint256 optionAllocation;\\n        uint256 optionPremium;\\n        address bidder;\\n    }\\n\\n    function startAuction(AuctionDetails calldata auctionDetails)\\n        internal\\n        returns (uint256 auctionID)\\n    {\\n        uint256 oTokenSellAmount =\\n            getOTokenSellAmount(auctionDetails.tokenAddress);\\n        require(oTokenSellAmount > 0, \\\"No otokens to sell\\\");\\n\\n        IERC20(auctionDetails.tokenAddress).safeApprove(\\n            auctionDetails.gnosisEasyAuction,\\n            IERC20(auctionDetails.tokenAddress).balanceOf(address(this))\\n        );\\n\\n        // minBidAmount is total oTokens to sell * premium per oToken\\n        // shift decimals to correspond to decimals of USDC for puts\\n        // and underlying for calls\\n        uint256 minBidAmount =\\n            DSMath.wmul(\\n                oTokenSellAmount * (10**10),\\n                auctionDetails.premium\\n            );\\n\\n        minBidAmount = auctionDetails.assetDecimals > 18\\n            ? minBidAmount * (10**(auctionDetails.assetDecimals - (18)))\\n            : minBidAmount / (\\n                10**(uint256(18) - (auctionDetails.assetDecimals))\\n            );\\n\\n        require(\\n            minBidAmount <= type(uint96).max,\\n            \\\"optionPremium * oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        uint256 auctionEnd = block.timestamp + (auctionDetails.duration);\\n\\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\\n            .initiateAuction(\\n            // address of token we minted and are selling\\n            auctionDetails.tokenAddress,\\n            // address of asset we want in exchange for sell token. Should match vault `asset`\\n            auctionDetails.asset,\\n            // orders can be cancelled at any time during the auction\\n            auctionEnd,\\n            // order will last for `duration`\\n            auctionEnd,\\n            // we are selling all of the otokens minus a fee taken by gnosis\\n            uint96(oTokenSellAmount),\\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\\n            uint96(minBidAmount),\\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\\n            1,\\n            // the min funding threshold\\n            0,\\n            // no atomic closure\\n            false,\\n            // access manager contract\\n            address(0),\\n            // bytes for storing info like a whitelist for who can bid\\n            bytes(\\\"\\\")\\n        );\\n\\n        emit InitiateGnosisAuction(\\n            auctionDetails.tokenAddress,\\n            auctionDetails.asset,\\n            auctionID,\\n            msg.sender\\n        );\\n    }\\n\\n    function placeBid(BidDetails calldata bidDetails)\\n        internal\\n        returns (\\n            uint256 sellAmount,\\n            uint256 buyAmount,\\n            uint64 userId\\n        )\\n    {\\n        // calculate how much to allocate\\n        sellAmount = bidDetails\\n            .lockedBalance\\n            * (bidDetails.optionAllocation)\\n            / (100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\\n\\n        // divide the `asset` sellAmount by the target premium per oToken to\\n        // get the number of oTokens to buy (8 decimals)\\n        buyAmount = sellAmount\\n            * (10**(bidDetails.assetDecimals + (Vault.OTOKEN_DECIMALS)))\\n            / (bidDetails.optionPremium)\\n            / (10**bidDetails.assetDecimals);\\n\\n        require(\\n            sellAmount <= type(uint96).max,\\n            \\\"sellAmount > type(uint96) max value!\\\"\\n        );\\n        require(\\n            buyAmount <= type(uint96).max,\\n            \\\"buyAmount > type(uint96) max value!\\\"\\n        );\\n\\n        // approve that amount\\n        IERC20(bidDetails.asset).safeApprove(\\n            bidDetails.gnosisEasyAuction,\\n            sellAmount\\n        );\\n\\n        uint96[] memory _minBuyAmounts = new uint96[](1);\\n        uint96[] memory _sellAmounts = new uint96[](1);\\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\\n        _minBuyAmounts[0] = uint96(buyAmount);\\n        _sellAmounts[0] = uint96(sellAmount);\\n        _prevSellOrders[\\n            0\\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n        // place sell order with that amount\\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\\n            bidDetails.auctionId,\\n            _minBuyAmounts,\\n            _sellAmounts,\\n            _prevSellOrders,\\n            \\\"0x\\\"\\n        );\\n\\n        emit PlaceAuctionBid(\\n            bidDetails.auctionId,\\n            bidDetails.tokenAddress,\\n            sellAmount,\\n            buyAmount,\\n            bidDetails.bidder\\n        );\\n\\n        return (sellAmount, buyAmount, userId);\\n    }\\n\\n    function claimAuctionOtokens(\\n        Vault.AuctionSellOrder calldata auctionSellOrder,\\n        address gnosisEasyAuction,\\n        address counterpartyThetaVault\\n    ) internal {\\n        bytes32 order =\\n            encodeOrder(\\n                auctionSellOrder.userId,\\n                auctionSellOrder.buyAmount,\\n                auctionSellOrder.sellAmount\\n            );\\n        bytes32[] memory orders = new bytes32[](1);\\n        orders[0] = order;\\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\\n            orders\\n        );\\n    }\\n\\n    function getOTokenSellAmount(address tokenAddress)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // We take our current oToken balance. That will be our sell amount\\n        // but otokens will be transferred to gnosis.\\n        uint256 oTokenSellAmount =\\n            IERC20(tokenAddress).balanceOf(address(this));\\n\\n        require(\\n            oTokenSellAmount <= type(uint96).max,\\n            \\\"oTokenSellAmount > type(uint96) max value!\\\"\\n        );\\n\\n        return oTokenSellAmount;\\n    }\\n\\n    function getOTokenPremiumInStables(\\n        address tokenAddress,\\n        address optionsPremiumPricer,\\n        uint256 premiumDiscount\\n    ) internal view returns (uint256) {\\n        IOtoken newOToken = IOtoken(tokenAddress);\\n        IOptionsPremiumPricer premiumPricer =\\n            IOptionsPremiumPricer(optionsPremiumPricer);\\n\\n        // Apply black-scholes formula (from rvol library) to option given its features\\n        // and get price for 100 contracts denominated USDC for both call and put options\\n        uint256 optionPremium =\\n            premiumPricer.getPremiumInStables(\\n                newOToken.strikePrice(),\\n                newOToken.expiryTimestamp(),\\n                newOToken.isPut()\\n            );\\n\\n        // Apply a discount to incentivize arbitraguers\\n        optionPremium = optionPremium / (premiumDiscount) / (\\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\\n        );\\n\\n        require(\\n            optionPremium <= type(uint96).max,\\n            \\\"optionPremium > type(uint96) max value!\\\"\\n        );\\n\\n        return optionPremium;\\n    }\\n\\n    function encodeOrder(\\n        uint64 userId,\\n        uint96 buyAmount,\\n        uint96 sellAmount\\n    ) internal pure returns (bytes32) {\\n        return\\n            bytes32(\\n                (uint256(userId) << 192) +\\n                    (uint256(buyAmount) << 96) +\\n                    uint256(sellAmount)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xf22847c9002d7459051bb7deade07d948fe9b43fa5a9c5a7971ea23dc17f7378\",\"license\":\"MIT\"},\"contracts/libraries/ShareMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport {SafeMath} from \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\n\\nlibrary ShareMath {\\n    using SafeMath for uint256;\\n\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    function assetToShares(\\n        uint256 assetAmount,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return assetAmount.mul(10**decimals).div(assetPerShare);\\n    }\\n\\n    function sharesToAsset(\\n        uint256 shares,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\\n        // which should never happen.\\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\\n        require(assetPerShare > PLACEHOLDER_UINT, \\\"Invalid assetPerShare\\\");\\n\\n        return shares.mul(assetPerShare).div(10**decimals);\\n    }\\n\\n    /**\\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\\n     * @param depositReceipt is the user's deposit receipt\\n     * @param currentRound is the `round` stored on the vault\\n     * @param assetPerShare is the price in asset per share\\n     * @param decimals is the number of decimals the asset/shares use\\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\\n     */\\n    function getSharesFromReceipt(\\n        Vault.DepositReceipt memory depositReceipt,\\n        uint256 currentRound,\\n        uint256 assetPerShare,\\n        uint256 decimals\\n    ) internal pure returns (uint256 unredeemedShares) {\\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\\n            uint256 sharesFromRound =\\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\\n\\n            return\\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\\n        }\\n        return depositReceipt.unredeemedShares;\\n    }\\n\\n    function pricePerShare(\\n        uint256 totalSupply,\\n        uint256 totalBalance,\\n        uint256 pendingAmount,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        uint256 singleShare = 10**decimals;\\n        return\\n            totalSupply > 0\\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\\n                    totalSupply\\n                )\\n                : singleShare;\\n    }\\n\\n    /************************************************\\n     *  HELPERS\\n     ***********************************************/\\n\\n    function assertUint104(uint256 num) internal pure {\\n        require(num <= type(uint104).max, \\\"Overflow uint104\\\");\\n    }\\n\\n    function assertUint128(uint256 num) internal pure {\\n        require(num <= type(uint128).max, \\\"Overflow uint128\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x1f5d84b792cddd1f1be3d4d721799bd38d52f5eabb95ace60e46a07cebf2df45\",\"license\":\"MIT\"},\"contracts/libraries/SupportsNonCompliantERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * This library supports ERC20s that have quirks in their behavior.\\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\\n */\\nlibrary SupportsNonCompliantERC20 {\\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n\\n    function safeApproveNonCompliant(\\n        IERC20 token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        if (address(token) == USDT) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n        SafeERC20.safeApprove(token, spender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x2bd1229e3a5514c2138c7504b9c58d066adf9f37c4971e47ac79c89a3782ee79\",\"license\":\"MIT\"},\"contracts/libraries/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nlibrary Vault {\\n    /************************************************\\n     *  IMMUTABLES & CONSTANTS\\n     ***********************************************/\\n\\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\\n\\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\\n\\n    // Otokens have 8 decimal places.\\n    uint256 internal constant OTOKEN_DECIMALS = 8;\\n\\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\\n\\n    // Placeholder uint value to prevent cold writes\\n    uint256 internal constant PLACEHOLDER_UINT = 1;\\n\\n    struct VaultParams {\\n        // Option type the vault is selling\\n        bool isPut;\\n        // Vault type\\n        bool isSpread;\\n        // Token decimals for vault shares\\n        uint8 decimals;\\n        // Asset used in Theta / Delta Vault\\n        address asset;\\n        // Underlying asset of the options sold by vault\\n        address underlying;\\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\\n        uint56 minimumSupply;\\n        // Vault cap\\n        uint104 cap;\\n    }\\n\\n    struct OptionState {\\n        // Option that the vault is shorting / longing in the next cycle\\n        address nextOption;\\n        // Option that the vault is currently shorting / longing\\n        address currentOption;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n    }\\n\\n    struct SpreadState {\\n        // Options that are part of the vault's next strategy, if spread\\n        // Both options should have same params apart from the strike price\\n        address[] nextSpread;\\n        // Options that are the part of vault's current strategy\\n        address[] currentSpread;\\n        // The timestamp when the `nextOption` can be used by the vault\\n        uint32 nextOptionReadyAt;\\n        //Used in spread vaults\\n        address currentSpreadToken;\\n        //Used in spread vaults\\n        address nextSpreadToken;\\n    }\\n\\n    struct VaultState {\\n        // 32 byte slot 1\\n        //  Current round number. `round` represents the number of `period`s elapsed.\\n        uint16 round;\\n        // Amount that is currently locked for selling options\\n        uint104 lockedAmount;\\n        // Amount that was locked for selling options in the previous round\\n        // used for calculating performance fee deduction\\n        uint104 lastLockedAmount;\\n        // Locked amount which is used so far\\n        uint104 lockedAmountUsed;\\n        // 32 byte slot 2\\n        // Stores the total tally of how much of `asset` there is\\n        // to be used to mint rTHETA tokens\\n        uint128 totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint128 queuedWithdrawShares;\\n    }\\n\\n    struct DepositReceipt {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\\n        uint104 amount;\\n        // Unredeemed shares balance\\n        uint128 unredeemedShares;\\n    }\\n\\n    struct Withdrawal {\\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\\n        uint16 round;\\n        // Number of shares withdrawn\\n        uint128 shares;\\n    }\\n\\n    struct AuctionSellOrder {\\n        // Amount of `asset` token offered in auction\\n        uint96 sellAmount;\\n        // Amount of oToken requested in auction\\n        uint96 buyAmount;\\n        // User Id of delta vault in latest gnosis auction\\n        uint64 userId;\\n    }\\n}\\n\",\"keccak256\":\"0x7355d37aa711986cc3123390aabe6c4e6a70edc2aca23f9fd954f202f204e7c3\",\"license\":\"MIT\"},\"contracts/libraries/VaultLifecycleSpread.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {Vault} from \\\"./Vault.sol\\\";\\nimport {ShareMath} from \\\"./ShareMath.sol\\\";\\nimport {IStrikeSelectionSpread, ISpreadToken} from \\\"../interfaces/IHimalayan.sol\\\";\\nimport {GnosisAuction} from \\\"./GnosisAuction.sol\\\";\\nimport {\\n    IOtokenFactory,\\n    IOtoken,\\n    IController,\\n    IMarginCalculator,\\n    GammaTypes\\n} from \\\"../interfaces/GammaInterface.sol\\\";\\nimport {IERC20Detailed} from \\\"../interfaces/IERC20Detailed.sol\\\";\\nimport {IGnosisAuction} from \\\"../interfaces/IGnosisAuction.sol\\\";\\nimport {SupportsNonCompliantERC20} from \\\"./SupportsNonCompliantERC20.sol\\\";\\nimport {IOptionsPremiumPricer} from \\\"../interfaces/IHimalayan.sol\\\";\\n\\nlibrary VaultLifecycleSpread {\\n    using SupportsNonCompliantERC20 for IERC20;\\n    using Address for address;\\n    using Clones for address;\\n\\n    struct CloseParams {\\n        address OTOKEN_FACTORY;\\n        address USDC;\\n        address[] currentSpread;\\n        uint256 delay;\\n        address strikeSelection;\\n        uint256 premiumDiscount;\\n        address SPREAD_TOKEN_IMPL;\\n    }\\n\\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\\n    // Dividing by weeks per year requires doing (num * FEE_MULTIPLIER) / WEEKS_PER_YEAR\\n    uint256 internal constant WEEKS_PER_YEAR = 52142857;\\n\\n    /**\\n     * @notice Sets the next spread for the vault, and calculates its premium for the auction\\n     * @param closeParams is the struct with details on previous spread and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param vaultState is the struct with vault accounting state\\n     * @return spread addresses of the new short and long options\\n     * @return strikePrices is the strike prices of the options in spread\\n     * @return deltas is the deltas of the new options in the spread\\n     */\\n    function commitAndClose(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        Vault.VaultState storage vaultState\\n    )\\n        external\\n        returns (\\n            address[] memory spread,\\n            uint256[] memory strikePrices,\\n            uint256[] memory deltas,\\n            address spreadToken\\n        )\\n    {\\n        uint256 expiry = getNextExpiry(closeParams.currentSpread.length > 0 ? closeParams.currentSpread[0]:address(0));\\n\\n        IStrikeSelectionSpread selection =\\n            IStrikeSelectionSpread(closeParams.strikeSelection);\\n\\n        bool isPut = vaultParams.isPut;\\n        address underlying = vaultParams.underlying;\\n        address asset = vaultParams.asset;\\n\\n        (strikePrices, deltas) = selection.getStrikePrices(expiry, isPut);\\n\\n        require(strikePrices.length == deltas.length, \\\"Invalid Data\\\");\\n        for (uint256 i = 0; i < strikePrices.length; i++) {\\n            require(strikePrices[i] != 0, \\\"!strikePrice\\\");\\n        }\\n        \\n\\n        // retrieve address if option already exists, or deploy it\\n        spread = getOrDeployOtokens(\\n            closeParams,\\n            vaultParams,\\n            underlying,\\n            asset,\\n            strikePrices,\\n            expiry,\\n            isPut\\n        );\\n\\n        spreadToken = deploySpreadToken(\\n            closeParams.SPREAD_TOKEN_IMPL,\\n            \\\"Call Spread Token\\\",\\n            \\\"hCST\\\",\\n            asset,\\n            underlying,\\n            expiry,\\n            isPut\\n        );\\n\\n        return (spread, strikePrices, deltas, spreadToken);\\n    }\\n\\n    function deploySpreadToken(\\n        address impl,\\n        string memory name,\\n        string memory symbol,\\n        address asset,\\n        address underlying,\\n        uint256 expiry,\\n        bool isPut\\n    )\\n        private\\n        returns(address)\\n    {\\n\\n        address instance = impl.clone();\\n        ISpreadToken(instance).init(\\n            name,\\n            symbol,\\n            asset,\\n            underlying,\\n            expiry,\\n            isPut\\n        );\\n\\n        return instance;\\n    }\\n\\n    /**\\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\\n     * @param otokenAddress is the address of the otoken\\n     * @param vaultParams is the struct with vault general data\\n     * @param collateralAsset is the address of the collateral asset\\n     * @param USDC is the address of usdc\\n     * @param delay is the delay between commitAndClose and rollToNextOption\\n     */\\n    function verifyOtoken(\\n        address otokenAddress,\\n        Vault.VaultParams storage vaultParams,\\n        address collateralAsset,\\n        address USDC,\\n        uint256 delay\\n    ) private view {\\n        require(otokenAddress != address(0), \\\"!otokenAddress\\\");\\n\\n        IOtoken otoken = IOtoken(otokenAddress);\\n        require(otoken.isPut() == vaultParams.isPut, \\\"Type mismatch\\\");\\n        require(\\n            otoken.underlyingAsset() == vaultParams.underlying,\\n            \\\"Wrong underlyingAsset\\\"\\n        );\\n        require(\\n            otoken.collateralAsset() == collateralAsset,\\n            \\\"Wrong collateralAsset\\\"\\n        );\\n\\n        // we just assume all options use USDC as the strike\\n        require(otoken.strikeAsset() == USDC, \\\"strikeAsset != USDC\\\");\\n\\n        uint256 readyAt = block.timestamp  + delay;\\n        require(otoken.expiryTimestamp() >= readyAt, \\\"Expiry before delay\\\");\\n    }\\n\\n    /**\\n     * @param decimals is the decimals of the asset\\n     * @param totalBalance is the vaults total balance of the asset\\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\\n     * @param lastQueuedWithdrawAmount is the total amount queued for withdrawals\\n     * @param performanceFee is the perf fee percent to charge on premiums\\n     * @param managementFee is the management fee percent to charge on the AUM\\n     * @param currentQueuedWithdrawShares is amount of queued withdrawals from the current round\\n     */\\n    struct RolloverParams {\\n        uint256 decimals;\\n        uint256 totalBalance;\\n        uint256 currentShareSupply;\\n        uint256 lastQueuedWithdrawAmount;\\n        uint256 performanceFee;\\n        uint256 managementFee;\\n        uint256 currentQueuedWithdrawShares;\\n    }\\n\\n    /**\\n     * @notice Calculate the shares to mint, new price per share, and\\n      amount of funds to re-allocate as collateral for the new round\\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\\n     * @param params is the rollover parameters passed to compute the next state\\n     * @return newLockedAmount is the amount of funds to allocate for the new round\\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\\n     * @return newPricePerShare is the price per share of the new round\\n     * @return mintShares is the amount of shares to mint from deposits\\n     * @return performanceFeeInAsset is the performance fee charged by vault\\n     * @return totalVaultFee is the total amount of fee charged by vault\\n     */\\n    function rollover(\\n        Vault.VaultState storage vaultState,\\n        RolloverParams calldata params\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 newLockedAmount,\\n            uint256 queuedWithdrawAmount,\\n            uint256 newPricePerShare,\\n            uint256 mintShares,\\n            uint256 performanceFeeInAsset,\\n            uint256 totalVaultFee\\n        )\\n    {\\n        uint256 currentBalance = params.totalBalance;\\n        uint256 pendingAmount = vaultState.totalPending;\\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\\n\\n        // Deduct older queued withdraws so we don't charge fees on them\\n        uint256 balanceForVaultFees =\\n            currentBalance - params.lastQueuedWithdrawAmount;\\n\\n        {\\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycleSpread\\n                .getVaultFees(\\n                balanceForVaultFees,\\n                vaultState.lastLockedAmount,\\n                vaultState.totalPending,\\n                params.performanceFee,\\n                params.managementFee\\n            );\\n        }\\n\\n        // Take into account the fee\\n        // so we can calculate the newPricePerShare\\n        currentBalance = currentBalance - totalVaultFee;\\n\\n        {\\n            newPricePerShare = ShareMath.pricePerShare(\\n                params.currentShareSupply - lastQueuedWithdrawShares,\\n                currentBalance - params.lastQueuedWithdrawAmount,\\n                pendingAmount,\\n                params.decimals\\n            );\\n\\n            queuedWithdrawAmount = params.lastQueuedWithdrawAmount +\\n                ShareMath.sharesToAsset(\\n                    params.currentQueuedWithdrawShares,\\n                    newPricePerShare,\\n                    params.decimals\\n                );\\n\\n            // After closing the short, if the options expire in-the-money\\n            // vault pricePerShare would go down because vault's asset balance decreased.\\n            // This ensures that the newly-minted shares do not take on the loss.\\n            mintShares = ShareMath.assetToShares(\\n                pendingAmount,\\n                newPricePerShare,\\n                params.decimals\\n            );\\n        }\\n\\n        return (\\n            currentBalance - queuedWithdrawAmount, // new locked balance subtracts the queued withdrawals\\n            queuedWithdrawAmount,\\n            newPricePerShare,\\n            mintShares,\\n            performanceFeeInAsset,\\n            totalVaultFee\\n        );\\n    }\\n\\n    /**\\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\\n     * @param spread Spread oTokens\\n     * @param depositAmount is the amount of collateral to deposit\\n     * @param newVault whether to create new vault or not\\n     * @param spreadToken Spread Token\\n     * @return mintAmount spreadToken mint amount\\n     * @return collateralUsed collateral amount used to create spread\\n     */\\n    function createSpread(\\n        address gammaController,\\n        address marginPool,\\n        address[] calldata spread,\\n        uint256 depositAmount,\\n        address spreadToken,\\n        bool newVault\\n    ) public returns (uint256 mintAmount, uint256 collateralUsed) {\\n        \\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        // Assuming both oTokens in the spread has same collateral\\n        IOtoken oToken = IOtoken(spread[0]);\\n        address collateralAsset = oToken.collateralAsset();\\n        {\\n            uint256 collateralDecimals =\\n            uint256(IERC20Detailed(collateralAsset).decimals());\\n\\n            if (oToken.isPut()) {\\n                // For minting puts, there will be instances where the full depositAmount will not be used for minting.\\n                // This is because of an issue with precision.\\n                //\\n                // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\\n                // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\\n                // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\\n                //\\n                // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\\n                // We retain the dust in the vault so the calling contract can withdraw the\\n                // actual locked amount + dust at settlement.\\n                //\\n                // To test this behavior, we can console.log\\n                // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\\n                // to see how much dust (or excess collateral) is left behind.\\n                mintAmount = (\\n                    depositAmount\\n                    * (10**Vault.OTOKEN_DECIMALS)\\n                    * (10**18) // we use 10**18 to give extra precision\\n                ) / (oToken.strikePrice() * (10**(10 + collateralDecimals)));\\n            } else {\\n                mintAmount = depositAmount;\\n\\n                if (collateralDecimals > 8) {\\n                    uint256 scaleBy = 10**(collateralDecimals - 8); // oTokens have 8 decimals\\n                    if (mintAmount > scaleBy) {\\n                        mintAmount = depositAmount / (scaleBy); // scale down from 10**18 to 10**8\\n                    }\\n                }\\n            }\\n        }\\n\\n        {\\n            // double approve to fix non-compliant ERC20s\\n            IERC20 collateralToken = IERC20(collateralAsset);\\n            collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\\n\\n            if (newVault) {\\n                IController controller = IController(gammaController);\\n                uint256 vaultId =\\n                    (controller.getAccountVaultCounter(address(this)));\\n                vaultId = vaultId + 1;\\n\\n                IController.ActionArgs[] memory actions =\\n                    new IController.ActionArgs[](3);\\n\\n                actions[0] = IController.ActionArgs(\\n                    IController.ActionType.OpenVault,\\n                    address(this), // owner\\n                    address(this), // receiver\\n                    address(0), // asset, otoken\\n                    vaultId, // vaultId\\n                    0, // amount\\n                    0, //index\\n                    \\\"\\\" //data\\n                );\\n\\n                actions[1] = IController.ActionArgs(\\n                    IController.ActionType.DepositCollateral,\\n                    address(this), // owner\\n                    address(this), // address to transfer from\\n                    collateralAsset, // deposited asset\\n                    vaultId, // vaultId\\n                    depositAmount, // amount\\n                    0, //index\\n                    \\\"\\\" //data\\n                );\\n\\n                actions[2] = IController.ActionArgs(\\n                    IController.ActionType.MintShortOption,\\n                    address(this), // owner\\n                    address(this), // address to transfer to\\n                    spread[0], // short option address\\n                    vaultId, // vaultId\\n                    mintAmount, // amount\\n                    0, //index\\n                    \\\"\\\" //data\\n                );\\n\\n                controller.operate(actions);\\n            }\\n\\n            else {\\n                IController controller = IController(gammaController);\\n                uint256 vaultId =\\n                    (controller.getAccountVaultCounter(address(this)));\\n                IController.ActionArgs[] memory actions =\\n                    new IController.ActionArgs[](2);\\n\\n                actions[0] = IController.ActionArgs(\\n                    IController.ActionType.DepositCollateral,\\n                    address(this), // owner\\n                    address(this), // address to transfer from\\n                    collateralAsset, // deposited asset\\n                    vaultId, // vaultId\\n                    depositAmount, // amount\\n                    0, //index\\n                    \\\"\\\" //data\\n                );\\n\\n                actions[1] = IController.ActionArgs(\\n                    IController.ActionType.MintShortOption,\\n                    address(this), // owner\\n                    address(this), // address to transfer to\\n                    spread[0], // short option address\\n                    vaultId, // vaultId\\n                    mintAmount, // amount\\n                    0, //index\\n                    \\\"\\\" //data\\n                );\\n\\n                controller.operate(actions);\\n            }\\n            \\n        \\n        }\\n        \\n        _mintSpread(\\n            gammaController,\\n            marginPool,\\n            spread,\\n            mintAmount,\\n            spreadToken\\n        );\\n\\n        collateralUsed = _depositAndWithdrawCollateral(\\n            gammaController,\\n            marginPool,\\n            collateralAsset,\\n            depositAmount,\\n            spread,\\n            mintAmount\\n        );\\n\\n        return (mintAmount, collateralUsed);\\n    }\\n\\n    function _mintSpread(\\n        address gammaController,\\n        address marginPool,\\n        address[] memory spread,\\n        uint256 mintAmount,\\n        address spreadToken\\n    )\\n        private\\n    {\\n        IController controller = IController(gammaController);\\n        IERC20 shortOption= IERC20(spread[0]);\\n        shortOption.safeApproveNonCompliant(marginPool, mintAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](2);\\n        \\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.DepositLongOption,\\n            spreadToken, // vault owner\\n            address(this), // deposit from this address\\n            spread[0], // collateral otoken\\n            1, // vaultId\\n            mintAmount, // amount\\n            0, // index\\n            \\\"\\\" // data\\n        );\\n\\n        actions[1] = IController.ActionArgs(\\n          IController.ActionType.MintShortOption,\\n          spreadToken, // vault owner\\n          address(this), // mint to this address\\n          spread[1], // otoken\\n          1, // vaultId\\n          mintAmount, // amount\\n          0, // index\\n          \\\"\\\" // data\\n        );\\n\\n        controller.operate(actions);\\n    }\\n\\n    function _depositAndWithdrawCollateral(\\n        address gammaController,\\n        address marginPool,\\n        address collateralAsset,\\n        uint256 collateralDeposited,\\n        address[] memory spread,\\n        uint256 mintAmount\\n    )\\n        private\\n        returns(uint256 collateralUsed)\\n    {\\n        IController controller = IController(gammaController);\\n        uint256 vaultId =\\n            (controller.getAccountVaultCounter(address(this)));\\n            \\n        IMarginCalculator calculator = IMarginCalculator(controller.calculator());\\n\\n        IERC20 longOption = IERC20(spread[1]);\\n        longOption.safeApproveNonCompliant(marginPool, mintAmount);\\n\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n        \\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.DepositLongOption,\\n            address(this), // vault owner\\n            address(this), // deposit from this address\\n            spread[1], // LONG otoken\\n            vaultId, // vaultId\\n            mintAmount, // amount\\n            0, // index\\n            \\\"\\\" // data\\n        );\\n\\n        controller.operate(actions);\\n\\n        (GammaTypes.MarginVault memory vault, uint256 typeVault, ) = controller.getVaultWithDetails(address(this), vaultId);\\n        (uint256 excessCollateral, bool isValidVault) = calculator.getExcessCollateral(vault, typeVault);\\n\\n        actions[0] = IController.ActionArgs(\\n          IController.ActionType.WithdrawCollateral,\\n          address(this), // vault owner\\n          address(this), // mint to this address\\n          collateralAsset, // otoken\\n          vaultId, // vaultId\\n          excessCollateral, // amount\\n          0, // index\\n          \\\"\\\" // data\\n        );\\n\\n        controller.operate(actions);\\n\\n        return (collateralDeposited - excessCollateral);\\n    }\\n\\n    /**\\n     * @notice Calculates the performance and management fee for this week's round\\n     * @param currentBalance is the balance of funds held on the vault after closing short\\n     * @param lastLockedAmount is the amount of funds locked from the previous round\\n     * @param pendingAmount is the pending deposit amount\\n     * @param performanceFeePercent is the performance fee pct.\\n     * @param managementFeePercent is the management fee pct.\\n     * @return performanceFeeInAsset is the performance fee\\n     * @return managementFeeInAsset is the management fee\\n     * @return vaultFee is the total fees\\n     */\\n    function getVaultFees(\\n        uint256 currentBalance,\\n        uint256 lastLockedAmount,\\n        uint256 pendingAmount,\\n        uint256 performanceFeePercent,\\n        uint256 managementFeePercent\\n    )\\n        internal\\n        pure\\n        returns (\\n            uint256 performanceFeeInAsset,\\n            uint256 managementFeeInAsset,\\n            uint256 vaultFee\\n        )\\n    {\\n        // At the first round, currentBalance=0, pendingAmount>0\\n        // so we just do not charge anything on the first round\\n        uint256 lockedBalanceSansPending =\\n            currentBalance > pendingAmount\\n                ? currentBalance - pendingAmount\\n                : 0;\\n\\n        uint256 _performanceFeeInAsset;\\n        uint256 _managementFeeInAsset;\\n        uint256 _vaultFee;\\n\\n        // Take performance fee and management fee ONLY if difference between\\n        // last week and this week's vault deposits, taking into account pending\\n        // deposits and withdrawals, is positive. If it is negative, last week's\\n        // option expired ITM past breakeven, and the vault took a loss so we\\n        // do not collect performance fee for last week\\n        if (lockedBalanceSansPending > lastLockedAmount) {\\n            _performanceFeeInAsset = performanceFeePercent > 0\\n                ? ((lockedBalanceSansPending - lastLockedAmount) * performanceFeePercent)/ (100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n            _managementFeeInAsset = managementFeePercent > 0\\n                ? (lockedBalanceSansPending * managementFeePercent) / (100 * Vault.FEE_MULTIPLIER)\\n                : 0;\\n\\n            _vaultFee = _performanceFeeInAsset + _managementFeeInAsset;\\n        }\\n\\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\\n    }\\n\\n    /**\\n     * @notice Either retrieves the option tokens if they already exists, or deploys them\\n     * @param closeParams is the struct with details on previous option and strike selection details\\n     * @param vaultParams is the struct with vault general data\\n     * @param underlying is the address of the underlying asset of the option\\n     * @param collateralAsset is the address of the collateral asset of the option\\n     * @param strikePrices strike prices of the options to be minted\\n     * @param expiry is the expiry timestamp of the option\\n     * @param isPut is whether the option is a put\\n     * @return spread address of the option\\n     */\\n    function getOrDeployOtokens(\\n        CloseParams calldata closeParams,\\n        Vault.VaultParams storage vaultParams,\\n        address underlying,\\n        address collateralAsset,\\n        uint256[] memory strikePrices,\\n        uint256 expiry,\\n        bool isPut\\n    ) internal returns (address[] memory) {\\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\\n        address[] memory spread = new address[](strikePrices.length);\\n\\n        for (uint8 i = 0; i < strikePrices.length; i++) {\\n            spread[i] = getOrDeployOToken(\\n                closeParams.OTOKEN_FACTORY,\\n                underlying,\\n                closeParams.USDC,\\n                collateralAsset,\\n                strikePrices[i],\\n                expiry,\\n                isPut\\n            );\\n            verifyOtoken(\\n                spread[i],\\n                vaultParams,\\n                collateralAsset,\\n                closeParams.USDC,\\n                closeParams.delay\\n            );\\n\\n        }\\n        return spread;\\n    }\\n\\n\\n    /**\\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\\n     calling SettleVault action, this assumption should hold.\\n     * @param gammaController is the address of the opyn controller contract\\n     * @param spreadToken Token which holds other vault of the strategy\\n     * @return amount of collateral redeemed from the vault\\n     */\\n    function settleSpread(address gammaController, address spreadToken) external returns (uint256) {\\n        IController controller = IController(gammaController);\\n\\n        // gets the currently active vault ID\\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\\n\\n        GammaTypes.Vault memory vault =\\n            controller.getVault(address(this), vaultID);\\n\\n        require(vault.shortOtokens.length > 0, \\\"No short\\\");\\n\\n        // An otoken's collateralAsset is the vault's `asset`\\n        // So in the context of performing Opyn short operations we call them collateralAsset\\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\\n\\n        // The short position has been previously closed, or all the otokens have been burned.\\n        // So we return early.\\n        if (address(collateralToken) == address(0)) {\\n            return 0;\\n        }\\n\\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\\n        uint256 startCollateralBalance =\\n            collateralToken.balanceOf(address(this));\\n\\n        // If it is after expiry, we need to settle the short position using the normal way\\n        // Delete the vault and withdraw all remaining collateral from the vault\\n        IController.ActionArgs[] memory actions =\\n            new IController.ActionArgs[](1);\\n\\n        actions[0] = IController.ActionArgs(\\n            IController.ActionType.SettleVault,\\n            address(this), // owner\\n            address(this), // address to transfer to\\n            address(0), // not used\\n            vaultID, // vaultId\\n            0, // not used\\n            0, // not used\\n            \\\"\\\" // not used\\n        );\\n\\n        controller.operate(actions);\\n\\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\\n\\n        ISpreadToken(spreadToken).settleVault();\\n        ISpreadToken(spreadToken).burnAndClaim();\\n\\n        return endCollateralBalance - startCollateralBalance;\\n    }\\n\\n    function getOrDeployOToken(\\n        address _factory,\\n        address _underlyingAsset,\\n        address _strikeAsset,\\n        address _collateralAsset,\\n        uint256 _strikePrice,\\n        uint256 _expiry,\\n        bool _isPut\\n\\n    ) private returns (address) {\\n        IOtokenFactory factory = IOtokenFactory(_factory);\\n\\n        address otokenFromFactory =\\n            factory.getOtoken(\\n                _underlyingAsset,\\n                _strikeAsset,\\n                _collateralAsset,\\n                _strikePrice,\\n                _expiry,\\n                _isPut\\n            );\\n\\n        if (otokenFromFactory != address(0)) {\\n            return otokenFromFactory;\\n        }\\n\\n        address otoken =\\n            factory.createOtoken(\\n                _underlyingAsset,\\n                _strikeAsset,\\n                _collateralAsset,\\n                _strikePrice,\\n                _expiry,\\n                _isPut\\n            );\\n\\n        return otoken;\\n    }\\n\\n    /**\\n     * @notice Starts the gnosis auction\\n     * @param auctionDetails is the struct with all the custom parameters of the auction\\n     * @return the auction id of the newly created auction\\n     */\\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\\n        external\\n        returns (uint256)\\n    {\\n        return GnosisAuction.startAuction(auctionDetails);\\n    }\\n\\n    /**\\n     * @notice Verify the constructor params satisfy requirements\\n     * @param owner is the owner of the vault with critical permissions\\n     * @param feeRecipient is the address to recieve vault performance and management fees\\n     * @param performanceFee is the perfomance fee pct.\\n     * @param tokenName is the name of the token\\n     * @param tokenSymbol is the symbol of the token\\n     * @param _vaultParams is the struct with vault general data\\n     */\\n    function verifyInitializerParams(\\n        address owner,\\n        address keeper,\\n        address feeRecipient,\\n        uint256 performanceFee,\\n        uint256 managementFee,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        Vault.VaultParams calldata _vaultParams\\n    ) external pure {\\n        require(owner != address(0), \\\"!owner\\\");\\n        require(keeper != address(0), \\\"!keeper\\\");\\n        require(feeRecipient != address(0), \\\"!feeRecipient\\\");\\n        require(\\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"performanceFee >= 100%\\\"\\n        );\\n        require(\\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\\n            \\\"managementFee >= 100%\\\"\\n        );\\n        require(bytes(tokenName).length > 0, \\\"!tokenName\\\");\\n        require(bytes(tokenSymbol).length > 0, \\\"!tokenSymbol\\\");\\n\\n        require(_vaultParams.asset != address(0), \\\"!asset\\\");\\n        require(_vaultParams.underlying != address(0), \\\"!underlying\\\");\\n        require(_vaultParams.minimumSupply > 0, \\\"!minimumSupply\\\");\\n        require(_vaultParams.cap > 0, \\\"!cap\\\");\\n        require(\\n            _vaultParams.cap > _vaultParams.minimumSupply,\\n            \\\"cap has to be higher than minimumSupply\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Gets the next option expiry timestamp\\n     * @param currentSpread is the otoken address that the vault is currently writing\\n     */\\n    function getNextExpiry(address currentSpread)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (currentSpread == address(0)) {\\n            return getNextDay(block.timestamp);\\n        }\\n        uint256 currentExpiry = IOtoken(currentSpread).expiryTimestamp();\\n\\n        // After options expiry if no options are written for >1 week\\n        // We need to give the ability continue writing options\\n        if (block.timestamp > currentExpiry + 1 days) {\\n            return getNextDay(block.timestamp);\\n        }\\n        return getNextDay(currentExpiry);\\n\\n\\n        //TODO UNCOMMENT THIS\\n        // uninitialized state\\n        /**if (currentOption == address(0)) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\\n        // After options expiry if no options are written for >1 week\\n        // We need to give the ability continue writing options\\n        if (block.timestamp > currentExpiry + 7 days) {\\n            return getNextFriday(block.timestamp);\\n        }\\n        return getNextFriday(currentExpiry);\\n        */\\n    }\\n\\n    /**\\n     * @notice Gets the next options expiry timestamp\\n     * @param timestamp is the expiry timestamp of the current option\\n     * Reference: https://codereview.stackexchange.com/a/33532\\n     * Examples:\\n     * getNextFriday(week 1 thursday) -> week 1 friday\\n     * getNextFriday(week 1 friday) -> week 2 friday\\n     * getNextFriday(week 1 saturday) -> week 2 friday\\n     */\\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\\n\\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (timestamp >= friday8am) {\\n            friday8am += 7 days;\\n        }\\n        return friday8am;\\n    }\\n\\n    //TODO: REMOVE THIS\\n    function getNextDay(uint256 timestamp) internal pure returns (uint256) {\\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\\n        uint256 nextDay = timestamp + 1 days;\\n        uint256 nextDay8am = nextDay - (nextDay % (24 hours)) + (8 hours);\\n\\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\\n        if (timestamp >= nextDay8am) {\\n            nextDay8am += 1 days;\\n        }\\n        return nextDay8am;\\n    }\\n}\\n\",\"keccak256\":\"0x5ff1671409a4a7573c00f8b558d30d2b9825da937212f269f1d3f74ea0ad437d\",\"license\":\"MIT\"},\"contracts/vendor/DSMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// math.sol -- mixin for inline numerical wizardry\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >0.4.13;\\n\\nlibrary DSMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x, \\\"ds-math-add-overflow\\\");\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x, \\\"ds-math-sub-underflow\\\");\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(y == 0 || (z = x * y) / y == x, \\\"ds-math-mul-overflow\\\");\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x <= y ? x : y;\\n    }\\n\\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\\n        return x >= y ? x : y;\\n    }\\n\\n    uint256 constant WAD = 10**18;\\n    uint256 constant RAY = 10**27;\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), WAD / 2) / WAD;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, y), RAY / 2) / RAY;\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, WAD), y / 2) / y;\\n    }\\n\\n    //rounds to zero if x*y < RAY / 2\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = add(mul(x, RAY), y / 2) / y;\\n    }\\n\\n    // This famous algorithm is called \\\"exponentiation by squaring\\\"\\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\\n    //\\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\\n    //\\n    // These facts are why it works:\\n    //\\n    //  If n is even, then x^n = (x^2)^(n/2).\\n    //  If n is odd,  then x^n = x * x^(n-1),\\n    //   and applying the equation for even x gives\\n    //    x^n = x * (x^2)^((n-1) / 2).\\n    //\\n    //  Also, EVM division is flooring and\\n    //    floor[(n-1) / 2] = floor[n / 2].\\n    //\\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n        z = n % 2 != 0 ? x : RAY;\\n\\n        for (n /= 2; n != 0; n /= 2) {\\n            x = rmul(x, x);\\n\\n            if (n % 2 != 0) {\\n                z = rmul(z, x);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1c6bb5cff7c83c85792349f61b3f4faf6e22bb02fa95d7af7b269e59a3902b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c80630aa045e81461007157806368bb4030146100ab578063c72733f7146100db578063c8128b65146100f0578063ccddf57a14610130578063eebc5ff41461015e575b600080fd5b81801561007d57600080fd5b5061009161008c366004612e71565b61017e565b604080519283526020830191909152015b60405180910390f35b8180156100b757600080fd5b506100cb6100c6366004612f4e565b61097c565b6040516100a29493929190612fe3565b6100ee6100e93660046130b0565b610bc5565b005b6101036100fe36600461317c565b610f95565b604080519687526020870195909552938501929092526060840152608083015260a082015260c0016100a2565b81801561013c57600080fd5b5061015061014b3660046131aa565b6110b1565b6040519081526020016100a2565b81801561016a57600080fd5b506101506101793660046131e3565b6114e5565b600080600087876000818110610196576101966131f5565b90506020020160208101906101ab919061320b565b90506000816001600160a01b031663aabaecd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102119190613228565b90506000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610253573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102779190613245565b60ff169050826001600160a01b031663f3c274a66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102de9190613268565b1561039e576102ee81600a61329b565b6102f990600a613392565b836001600160a01b031663c52987cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610337573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035b919061339e565b61036591906133b7565b6103716008600a613392565b61037b908a6133b7565b61038d90670de0b6b3a76400006133b7565b61039791906133e4565b94506103db565b87945060088111156103db5760006103b76008836133f8565b6103c290600a613392565b9050808611156103d9576103d6818a6133e4565b95505b505b50806103f16001600160a01b0382168c8a6114f0565b85156106bb57604051636553690d60e11b81528c906000906001600160a01b0383169063caa6d21a9061042890309060040161340b565b602060405180830381865afa158015610445573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610469919061339e565b905061047681600161329b565b6040805160038082526080820190925291925060009190816020015b61049a612dd4565b815260200190600190039081610492579050506040805161010081019091529091508060008152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b031681526020018381526020016000815260200160008152602001604051806020016040528060008152508152508160008151811061052c5761052c6131f5565b60209081029190910101526040805161010081019091528060058152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018381526020018c81526020016000815260200160405180602001604052806000815250815250816001815181106105b1576105b16131f5565b60209081029190910101526040805161010081019091528060018152306020820181905260408201526060018e8e6000816105ee576105ee6131f5565b9050602002016020810190610603919061320b565b6001600160a01b0316815260200183815260200189815260200160008152602001604051806020016040528060008152508152508160028151811061064a5761064a6131f5565b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0384169063b617f0c690610681908490600401613485565b600060405180830381600087803b15801561069b57600080fd5b505af11580156106af573d6000803e3d6000fd5b505050505050506108e7565b604051636553690d60e11b81528c906000906001600160a01b0383169063caa6d21a906106ec90309060040161340b565b602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d919061339e565b6040805160028082526060820190925291925060009190816020015b610751612dd4565b815260200190600190039081610749579050506040805161010081019091529091508060058152602001306001600160a01b03168152602001306001600160a01b03168152602001866001600160a01b031681526020018381526020018c81526020016000815260200160405180602001604052806000815250815250816000815181106107e1576107e16131f5565b60209081029190910101526040805161010081019091528060018152306020820181905260408201526060018e8e60008161081e5761081e6131f5565b9050602002016020810190610833919061320b565b6001600160a01b0316815260200183815260200189815260200160008152602001604051806020016040528060008152508152508160018151811061087a5761087a6131f5565b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0384169063b617f0c6906108b1908490600401613485565b600060405180830381600087803b1580156108cb57600080fd5b505af11580156108df573d6000803e3d6000fd5b505050505050505b5061092a8b8b8b8b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508a92508c91506115319050565b61096c8b8b838a8d8d808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152508c9250611751915050565b9250505097509795505050505050565b606080806000806109da8161099460408b018b613572565b9050116109a2576000611b91565b6109af60408a018a613572565b60008181106109c0576109c06131f5565b90506020020160208101906109d5919061320b565b611b91565b905060006109ee60a08a0160808b0161320b565b885460018a01546040516301893c2160e51b81526004810186905260ff831680151560248301529394506001600160a01b039182169263010000009004821691851690633127842090604401600060405180830381865afa158015610a57573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7f91908101906136a1565b80518251929a5090985014610aca5760405162461bcd60e51b815260206004820152600c60248201526b496e76616c6964204461746160a01b60448201526064015b60405180910390fd5b60005b8851811015610b4057888181518110610ae857610ae86131f5565b6020026020010151600003610b2e5760405162461bcd60e51b815260206004820152600c60248201526b21737472696b65507269636560a01b6044820152606401610ac1565b80610b3881613704565b915050610acd565b50610b508c8c84848c8a89611c3d565b9850610bb5610b6560e08e0160c08f0161320b565b6040518060400160405280601181526020017021b0b6361029b83932b0b2102a37b5b2b760791b815250604051806040016040528060048152602001631a10d4d560e21b81525084868a89611d85565b9550505050505093509350935093565b6001600160a01b038a16610c045760405162461bcd60e51b815260206004820152600660248201526510b7bbb732b960d11b6044820152606401610ac1565b6001600160a01b038916610c445760405162461bcd60e51b815260206004820152600760248201526610b5b2b2b832b960c91b6044820152606401610ac1565b6001600160a01b038816610c8a5760405162461bcd60e51b815260206004820152600d60248201526c08599959549958da5c1a595b9d609a1b6044820152606401610ac1565b610c98620f424060646133b7565b8710610cdf5760405162461bcd60e51b8152602060048201526016602482015275706572666f726d616e6365466565203e3d203130302560501b6044820152606401610ac1565b610ced620f424060646133b7565b8610610d335760405162461bcd60e51b81526020600482015260156024820152746d616e6167656d656e74466565203e3d203130302560581b6044820152606401610ac1565b83610d6d5760405162461bcd60e51b815260206004820152600a60248201526921746f6b656e4e616d6560b01b6044820152606401610ac1565b81610da95760405162461bcd60e51b815260206004820152600c60248201526b085d1bdad95b94de5b589bdb60a21b6044820152606401610ac1565b6000610dbb608083016060840161320b565b6001600160a01b031603610dfa5760405162461bcd60e51b815260206004820152600660248201526508585cdcd95d60d21b6044820152606401610ac1565b6000610e0c60a083016080840161320b565b6001600160a01b031603610e505760405162461bcd60e51b815260206004820152600b60248201526a21756e6465726c79696e6760a81b6044820152606401610ac1565b6000610e6260c0830160a0840161371d565b66ffffffffffffff1611610ea95760405162461bcd60e51b815260206004820152600e60248201526d216d696e696d756d537570706c7960901b6044820152606401610ac1565b6000610ebb60e0830160c08401613746565b6001600160681b031611610efa5760405162461bcd60e51b8152600401610ac1906020808252600490820152630216361760e41b604082015260600190565b610f0a60c0820160a0830161371d565b66ffffffffffffff16610f2360e0830160c08401613746565b6001600160681b031611610f895760405162461bcd60e51b815260206004820152602760248201527f6361702068617320746f20626520686967686572207468616e206d696e696d756044820152666d537570706c7960c81b6064820152608401610ac1565b50505050505050505050565b60018201546002830154600091829182918291829182916020890135916001600160801b03600160681b9091048116911683610fd560608c0135856133f8565b905061102c818d600001600f9054906101000a90046001600160681b03166001600160681b03168e600101600d9054906101000a90046001600160801b03166001600160801b03168e608001358f60a00135611e11565b91975090955061103e905085856133f8565b93506110676110518360408e01356133f8565b61105f60608e0135876133f8565b858e35611ece565b975061107960c08c0135898d35611f16565b6110879060608d013561329b565b985061109583898d35611f50565b96506110a189856133f8565b9950505050509295509295509295565b604051636553690d60e11b8152600090839082906001600160a01b0383169063caa6d21a906110e490309060040161340b565b602060405180830381865afa158015611101573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611125919061339e565b90506000826001600160a01b031663d99d13f530846040518363ffffffff1660e01b815260040161115792919061376f565b600060405180830381865afa158015611174573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261119c91908101906138ef565b8051519091506111d95760405162461bcd60e51b8152602060048201526008602482015267139bc81cda1bdc9d60c21b6044820152606401610ac1565b600081604001516000815181106111f2576111f26131f5565b6020026020010151905060006001600160a01b0316816001600160a01b0316036112235760009450505050506114df565b6040516370a0823160e01b81526000906001600160a01b038316906370a082319061125290309060040161340b565b602060405180830381865afa15801561126f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611293919061339e565b60408051600180825281830190925291925060009190816020015b6112b6612dd4565b8152602001906001900390816112ae579050506040805161010081019091529091508060078152602001306001600160a01b03168152602001306001600160a01b0316815260200160006001600160a01b0316815260200186815260200160008152602001600081526020016040518060200160405280600081525081525081600081518110611348576113486131f5565b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0387169063b617f0c69061137f908490600401613485565b600060405180830381600087803b15801561139957600080fd5b505af11580156113ad573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b03861691506370a08231906113e090309060040161340b565b602060405180830381865afa1580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611421919061339e565b9050886001600160a01b0316631513e9b96040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561145e57600080fd5b505af1158015611472573d6000803e3d6000fd5b50505050886001600160a01b03166372661f256040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156114b157600080fd5b505af11580156114c5573d6000803e3d6000fd5b5050505082816114d591906133f8565b9750505050505050505b92915050565b60006114df82611f8b565b73dac17f958d2ee523a2206206994597c13d831ec6196001600160a01b0384160161152157611521838360006122ca565b61152c8383836122ca565b505050565b600085905060008460008151811061154b5761154b6131f5565b602002602001015190506115738685836001600160a01b03166114f09092919063ffffffff16565b60408051600280825260608201909252600091816020015b611593612dd4565b81526020019060019003908161158b579050506040805161010081019091529091508060038152602001856001600160a01b03168152602001306001600160a01b03168152602001876000815181106115ee576115ee6131f5565b60200260200101516001600160a01b031681526020016001815260200186815260200160008152602001604051806020016040528060008152508152508160008151811061163e5761163e6131f5565b60209081029190910101526040805161010081019091528060018152602001856001600160a01b03168152602001306001600160a01b031681526020018760018151811061168e5761168e6131f5565b60200260200101516001600160a01b03168152602001600181526020018681526020016000815260200160405180602001604052806000815250815250816001815181106116de576116de6131f5565b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0384169063b617f0c690611715908490600401613485565b600060405180830381600087803b15801561172f57600080fd5b505af1158015611743573d6000803e3d6000fd5b505050505050505050505050565b604051636553690d60e11b8152600090879082906001600160a01b0383169063caa6d21a9061178490309060040161340b565b602060405180830381865afa1580156117a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c5919061339e565b90506000826001600160a01b031663ce3e39c06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061182b9190613228565b9050600086600181518110611842576118426131f5565b6020026020010151905061186a8a87836001600160a01b03166114f09092919063ffffffff16565b604080516001808252818301909252600091816020015b611889612dd4565b815260200190600190039081611881579050506040805161010081019091529091508060038152602001306001600160a01b03168152602001306001600160a01b03168152602001896001815181106118e4576118e46131f5565b60200260200101516001600160a01b03168152602001858152602001888152602001600081526020016040518060200160405280600081525081525081600081518110611933576119336131f5565b6020908102919091010152604051635b0bf86360e11b81526001600160a01b0386169063b617f0c69061196a908490600401613485565b600060405180830381600087803b15801561198457600080fd5b505af1158015611998573d6000803e3d6000fd5b50505050600080866001600160a01b0316639daafbe830886040518363ffffffff1660e01b81526004016119cd92919061376f565b600060405180830381865afa1580156119ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a129190810190613923565b5091509150600080866001600160a01b031663cd43fbfb85856040518363ffffffff1660e01b8152600401611a489291906139ab565b6040805180830381865afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a889190613a6c565b60408051610100810190915291935091508060068152602001306001600160a01b03168152602001306001600160a01b031681526020018f6001600160a01b03168152602001898152602001838152602001600081526020016040518060200160405280600081525081525085600081518110611b0757611b076131f5565b6020908102919091010152604051635b0bf86360e11b81526001600160a01b038a169063b617f0c690611b3e908890600401613485565b600060405180830381600087803b158015611b5857600080fd5b505af1158015611b6c573d6000803e3d6000fd5b50505050818d611b7c91906133f8565b99505050505050505050509695505050505050565b60006001600160a01b038216611baa576114df42612405565b6000826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0e919061339e565b9050611c1d816201518061329b565b421115611c3457611c2d42612405565b9392505050565b611c2d81612405565b60606000611c4e60208a018a61320b565b9050600085516001600160401b03811115611c6b57611c6b61341f565b604051908082528060200260200182016040528015611c94578160200160208202803683370190505b50905060005b86518160ff161015611d7557611cef611cb660208d018d61320b565b8a8d6020016020810190611cca919061320b565b8b8b8660ff1681518110611ce057611ce06131f5565b60200260200101518b8b612452565b828260ff1681518110611d0457611d046131f5565b60200260200101906001600160a01b031690816001600160a01b031681525050611d63828260ff1681518110611d3c57611d3c6131f5565b60200260200101518b8a8e6020016020810190611d59919061320b565b8f60600135612575565b80611d6d81613a91565b915050611c9a565b509150505b979650505050505050565b600080611d9a896001600160a01b031661295f565b604051620ff26f60e81b81529091506001600160a01b03821690630ff26f0090611dd2908b908b908b908b908b908b90600401613ab0565b600060405180830381600087803b158015611dec57600080fd5b505af1158015611e00573d6000803e3d6000fd5b50929b9a5050505050505050505050565b600080600080868911611e25576000611e2f565b611e2f878a6133f8565b905060008060008a841115611ebc5760008911611e4d576000611e7a565b611e5b620f424060646133b7565b89611e668d876133f8565b611e7091906133b7565b611e7a91906133e4565b925060008811611e8b576000611ead565b611e99620f424060646133b7565b611ea389866133b7565b611ead91906133e4565b9150611eb9828461329b565b90505b919b909a509098509650505050505050565b600080611edc83600a613392565b905060008611611eec5780611f0a565b611f0a86611f04611efd88886129f9565b8490612a05565b90612a11565b9150505b949350505050565b600060018311611f385760405162461bcd60e51b8152600401610ac190613b06565b611f0e611f4683600a613392565b611f048686612a05565b600060018311611f725760405162461bcd60e51b8152600401610ac190613b06565b611f0e83611f04611f8485600a613392565b8790612a05565b600080611fa3611f9e602085018561320b565b612a1d565b905060008111611fea5760405162461bcd60e51b8152602060048201526012602482015271139bc81bdd1bdad95b9cc81d1bc81cd95b1b60721b6044820152606401610ac1565b612093611ffd604085016020860161320b565b61200a602086018661320b565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612035919061340b565b602060405180830381865afa158015612052573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612076919061339e565b612083602087018761320b565b6001600160a01b031691906122ca565b60006120b16120a7836402540be4006133b7565b8560800135612af9565b905060128460600135116120e8576120ce606085013560126133f8565b6120d990600a613392565b6120e390826133e4565b61210c565b6120f7601260608601356133f8565b61210290600a613392565b61210c90826133b7565b90506001600160601b038111156121885760405162461bcd60e51b815260206004820152603a60248201527f6f7074696f6e5072656d69756d202a206f546f6b656e53656c6c416d6f756e74604482015279203e20747970652875696e74393629206d61782076616c75652160301b6064820152608401610ac1565b600061219860a08601354261329b565b90506121aa604086016020870161320b565b6001600160a01b0316630a4cd6c96121c5602088018861320b565b6121d56060890160408a0161320b565b60408051602081018252600080825291516001600160e01b031960e087901b168152612214949392889283928c928c9260019282918291600401613b35565b6020604051808303816000875af1158015612233573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612257919061339e565b93503361226a606087016040880161320b565b6001600160a01b0316612280602088018861320b565b6001600160a01b03167f95ad3b10488285d6307fda297f633faaf2a0d713c08ebe5f49c1b9255b01d29e876040516122ba91815260200190565b60405180910390a4505050919050565b8015806123445750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561231e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612342919061339e565b155b6123af5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608401610ac1565b61152c8363095ea7b360e01b84846040516024016123ce92919061376f565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612b33565b600080612415836201518061329b565b905060006124266201518083613bba565b61243090836133f8565b61243c9061708061329b565b9050808410611c2d57611f0e620151808261329b565b6040516304551c1560e21b8152600090889082906001600160a01b0383169063115470549061248f908c908c908c908c908c908c90600401613bce565b602060405180830381865afa1580156124ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d09190613228565b90506001600160a01b038116156124ea579150611d7a9050565b604051630c09746360e41b81526000906001600160a01b0384169063c097463090612523908d908d908d908d908d908d90600401613bce565b6020604051808303816000875af1158015612542573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125669190613228565b9b9a5050505050505050505050565b6001600160a01b0385166125bc5760405162461bcd60e51b815260206004820152600e60248201526d216f746f6b656e4164647265737360901b6044820152606401610ac1565b8354604080516379e13a5360e11b81529051879260ff161515916001600160a01b0384169163f3c274a6916004808201926020929091908290030181865afa15801561260c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126309190613268565b15151461266f5760405162461bcd60e51b815260206004820152600d60248201526c0a8f2e0ca40dad2e6dac2e8c6d609b1b6044820152606401610ac1565b600185015460408051631c56369f60e21b815290516001600160a01b0392831692841691637158da7c9160048083019260209291908290030181865afa1580156126bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e19190613228565b6001600160a01b03161461272f5760405162461bcd60e51b815260206004820152601560248201527415dc9bdb99c81d5b99195c9b1e5a5b99d05cdcd95d605a1b6044820152606401610ac1565b836001600160a01b0316816001600160a01b031663aabaecd66040518163ffffffff1660e01b8152600401602060405180830381865afa158015612777573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061279b9190613228565b6001600160a01b0316146127e95760405162461bcd60e51b815260206004820152601560248201527415dc9bdb99c818dbdb1b185d195c985b105cdcd95d605a1b6044820152606401610ac1565b826001600160a01b0316816001600160a01b03166317d69bc86040518163ffffffff1660e01b8152600401602060405180830381865afa158015612831573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128559190613228565b6001600160a01b0316146128a15760405162461bcd60e51b8152602060048201526013602482015272737472696b65417373657420213d205553444360681b6044820152606401610ac1565b60006128ad834261329b565b905080826001600160a01b031663ade6e2aa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612912919061339e565b10156129565760405162461bcd60e51b8152602060048201526013602482015272457870697279206265666f72652064656c617960681b6044820152606401610ac1565b50505050505050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166129f45760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b6044820152606401610ac1565b919050565b6000611c2d82846133f8565b6000611c2d82846133b7565b6000611c2d82846133e4565b600080826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612a4c919061340b565b602060405180830381865afa158015612a69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a8d919061339e565b90506001600160601b038111156114df5760405162461bcd60e51b815260206004820152602a60248201527f6f546f6b656e53656c6c416d6f756e74203e20747970652875696e74393629206044820152696d61782076616c75652160b01b6064820152608401610ac1565b6000670de0b6b3a7640000612b29612b118585612c05565b612b246002670de0b6b3a76400006133e4565b612c6c565b611c2d91906133e4565b6000612b88826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612cc19092919063ffffffff16565b80519091501561152c5780806020019051810190612ba69190613268565b61152c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610ac1565b6000811580612c2957508282612c1b81836133b7565b9250612c2790836133e4565b145b6114df5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610ac1565b600082612c79838261329b565b91508110156114df5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b6044820152606401610ac1565b6060611f0e848460008585600080866001600160a01b03168587604051612ce89190613c07565b60006040518083038185875af1925050503d8060008114612d25576040519150601f19603f3d011682016040523d82523d6000602084013e612d2a565b606091505b5091509150611d7a8783838760608315612da5578251600003612d9e576001600160a01b0385163b612d9e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610ac1565b5081611f0e565b611f0e8383815115612dba5781518083602001fd5b8060405162461bcd60e51b8152600401610ac19190613c23565b604080516101008101909152806000815260200160006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001606081525090565b6001600160a01b0381168114612e4a57600080fd5b50565b80356129f481612e35565b8015158114612e4a57600080fd5b80356129f481612e58565b600080600080600080600060c0888a031215612e8c57600080fd5b8735612e9781612e35565b96506020880135612ea781612e35565b955060408801356001600160401b0380821115612ec357600080fd5b818a0191508a601f830112612ed757600080fd5b813581811115612ee657600080fd5b8b60208260051b8501011115612efb57600080fd5b60208301975080965050505060608801359250612f1a60808901612e4d565b9150612f2860a08901612e66565b905092959891949750929550565b600060e08284031215612f4857600080fd5b50919050565b600080600060608486031215612f6357600080fd5b83356001600160401b03811115612f7957600080fd5b612f8586828701612f36565b9660208601359650604090950135949350505050565b6001600160a01b03169052565b600081518084526020808501945080840160005b83811015612fd857815187529582019590820190600101612fbc565b509495945050505050565b6080808252855190820181905260009060209060a0840190828901845b828110156130255781516001600160a01b031684529284019290840190600101613000565b505050838103828501526130398188612fa8565b915050828103604084015261304e8186612fa8565b91505060018060a01b038316606083015295945050505050565b60008083601f84011261307a57600080fd5b5081356001600160401b0381111561309157600080fd5b6020830191508360208285010111156130a957600080fd5b9250929050565b6000806000806000806000806000806101c08b8d0312156130d057600080fd5b8a356130db81612e35565b995060208b01356130eb81612e35565b985060408b01356130fb81612e35565b975060608b0135965060808b0135955060a08b01356001600160401b038082111561312557600080fd5b6131318e838f01613068565b909750955060c08d013591508082111561314a57600080fd5b506131578d828e01613068565b909450925061316b90508c60e08d01612f36565b90509295989b9194979a5092959850565b600080610100838503121561319057600080fd5b823591506131a18460208501612f36565b90509250929050565b600080604083850312156131bd57600080fd5b82356131c881612e35565b915060208301356131d881612e35565b809150509250929050565b600060c08284031215612f4857600080fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561321d57600080fd5b8135611c2d81612e35565b60006020828403121561323a57600080fd5b8151611c2d81612e35565b60006020828403121561325757600080fd5b815160ff81168114611c2d57600080fd5b60006020828403121561327a57600080fd5b8151611c2d81612e58565b634e487b7160e01b600052601160045260246000fd5b808201808211156114df576114df613285565b600181815b808511156132e95781600019048211156132cf576132cf613285565b808516156132dc57918102915b93841c93908002906132b3565b509250929050565b600082613300575060016114df565b8161330d575060006114df565b8160018114613323576002811461332d57613349565b60019150506114df565b60ff84111561333e5761333e613285565b50506001821b6114df565b5060208310610133831016604e8410600b841016171561336c575081810a6114df565b61337683836132ae565b806000190482111561338a5761338a613285565b029392505050565b6000611c2d83836132f1565b6000602082840312156133b057600080fd5b5051919050565b80820281158282048414176114df576114df613285565b634e487b7160e01b600052601260045260246000fd5b6000826133f3576133f36133ce565b500490565b818103818111156114df576114df613285565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60005b83811015613450578181015183820152602001613438565b50506000910152565b60008151808452613471816020860160208601613435565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b8701018488016000805b8481101561356357603f198a850301865282516101008151600b81106134e157634e487b7160e01b85526021600452602485fd5b8652818a01516134f38b880182612f9b565b50888201516135048a880182612f9b565b5060608083015161351782890182612f9b565b50506080828101519087015260a0808301519087015260c0808301519087015260e09182015191860181905261354f81870183613459565b978a019795505050918701916001016134ad565b50919998505050505050505050565b6000808335601e1984360301811261358957600080fd5b8301803591506001600160401b038211156135a357600080fd5b6020019150600581901b36038213156130a957600080fd5b60405160c081016001600160401b03811182821017156135dd576135dd61341f565b60405290565b604051601f8201601f191681016001600160401b038111828210171561360b5761360b61341f565b604052919050565b60006001600160401b0382111561362c5761362c61341f565b5060051b60200190565b600082601f83011261364757600080fd5b8151602061365c61365783613613565b6135e3565b82815260059290921b8401810191818101908684111561367b57600080fd5b8286015b84811015613696578051835291830191830161367f565b509695505050505050565b600080604083850312156136b457600080fd5b82516001600160401b03808211156136cb57600080fd5b6136d786838701613636565b935060208501519150808211156136ed57600080fd5b506136fa85828601613636565b9150509250929050565b60006001820161371657613716613285565b5060010190565b60006020828403121561372f57600080fd5b813566ffffffffffffff81168114611c2d57600080fd5b60006020828403121561375857600080fd5b81356001600160681b0381168114611c2d57600080fd5b6001600160a01b03929092168252602082015260400190565b600082601f83011261379957600080fd5b815160206137a961365783613613565b82815260059290921b840181019181810190868411156137c857600080fd5b8286015b848110156136965780516137df81612e35565b83529183019183016137cc565b600060c082840312156137fe57600080fd5b6138066135bb565b82519091506001600160401b038082111561382057600080fd5b61382c85838601613788565b8352602084015191508082111561384257600080fd5b61384e85838601613788565b6020840152604084015191508082111561386757600080fd5b61387385838601613788565b6040840152606084015191508082111561388c57600080fd5b61389885838601613636565b606084015260808401519150808211156138b157600080fd5b6138bd85838601613636565b608084015260a08401519150808211156138d657600080fd5b506138e384828501613636565b60a08301525092915050565b60006020828403121561390157600080fd5b81516001600160401b0381111561391757600080fd5b611f0e848285016137ec565b60008060006060848603121561393857600080fd5b83516001600160401b0381111561394e57600080fd5b61395a868287016137ec565b93505060208401519150604084015190509250925092565b600081518084526020808501945080840160005b83811015612fd85781516001600160a01b031687529582019590820190600101613986565b604081526000835160c060408401526139c8610100840182613972565b90506020850151603f19808584030160608601526139e68383613972565b92506040870151915080858403016080860152613a038383613972565b925060608701519150808584030160a0860152613a208383612fa8565b925060808701519150808584030160c0860152613a3d8383612fa8565b925060a08701519150808584030160e086015250613a5b8282612fa8565b925050508260208301529392505050565b60008060408385031215613a7f57600080fd5b8251915060208301516131d881612e58565b600060ff821660ff8103613aa757613aa7613285565b60010192915050565b60c081526000613ac360c0830189613459565b8281036020840152613ad58189613459565b6001600160a01b039788166040850152959096166060830152506080810192909252151560a0909101529392505050565b602080825260159082015274496e76616c6964206173736574506572536861726560581b604082015260600190565b6001600160a01b038c811682528b81166020830152604082018b9052606082018a90526001600160601b038981166080840152881660a083015260c0820187905260e0820186905284151561010083015283166101208201526101606101408201819052600090613ba883820185613459565b9e9d5050505050505050505050505050565b600082613bc957613bc96133ce565b500690565b6001600160a01b03968716815294861660208601529290941660408401526060830152608082019290925290151560a082015260c00190565b60008251613c19818460208701613435565b9190910192915050565b602081526000611c2d602083018461345956fea2646970667358221220b7867350d5cbd3b7ea86ac2c70fa75a8a5b654ba419afa54a2f51ae3a1f5f1a964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "commitAndClose(VaultLifecycleSpread.CloseParams,Vault.VaultParams storage,Vault.VaultState storage)": {
        "params": {
          "closeParams": "is the struct with details on previous spread and strike selection details",
          "vaultParams": "is the struct with vault general data",
          "vaultState": "is the struct with vault accounting state"
        },
        "returns": {
          "deltas": "is the deltas of the new options in the spread",
          "spread": "addresses of the new short and long options",
          "strikePrices": "is the strike prices of the options in spread"
        }
      },
      "createSpread(address,address,address[],uint256,address,bool)": {
        "params": {
          "depositAmount": "is the amount of collateral to deposit",
          "gammaController": "is the address of the opyn controller contract",
          "marginPool": "is the address of the opyn margin contract which holds the collateral",
          "newVault": "whether to create new vault or not",
          "spread": "Spread oTokens",
          "spreadToken": "Spread Token"
        },
        "returns": {
          "collateralUsed": "collateral amount used to create spread",
          "mintAmount": "spreadToken mint amount"
        }
      },
      "rollover(Vault.VaultState storage,VaultLifecycleSpread.RolloverParams)": {
        "params": {
          "params": "is the rollover parameters passed to compute the next state",
          "vaultState": "is the storage variable vaultState passed from RibbonVault"
        },
        "returns": {
          "mintShares": "is the amount of shares to mint from deposits",
          "newLockedAmount": "is the amount of funds to allocate for the new round",
          "newPricePerShare": "is the price per share of the new round",
          "performanceFeeInAsset": "is the performance fee charged by vault",
          "queuedWithdrawAmount": "is the amount of funds set aside for withdrawal",
          "totalVaultFee": "is the total amount of fee charged by vault"
        }
      },
      "settleSpread(address,address)": {
        "params": {
          "gammaController": "is the address of the opyn controller contract",
          "spreadToken": "Token which holds other vault of the strategy"
        },
        "returns": {
          "_0": "amount of collateral redeemed from the vault"
        }
      },
      "startAuction(GnosisAuction.AuctionDetails)": {
        "params": {
          "auctionDetails": "is the struct with all the custom parameters of the auction"
        },
        "returns": {
          "_0": "the auction id of the newly created auction"
        }
      },
      "verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams)": {
        "params": {
          "_vaultParams": "is the struct with vault general data",
          "feeRecipient": "is the address to recieve vault performance and management fees",
          "owner": "is the owner of the vault with critical permissions",
          "performanceFee": "is the perfomance fee pct.",
          "tokenName": "is the name of the token",
          "tokenSymbol": "is the symbol of the token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "commitAndClose(VaultLifecycleSpread.CloseParams,Vault.VaultParams storage,Vault.VaultState storage)": {
        "notice": "Sets the next spread for the vault, and calculates its premium for the auction"
      },
      "createSpread(address,address,address[],uint256,address,bool)": {
        "notice": "Creates the actual Opyn short position by depositing collateral and minting otokens"
      },
      "rollover(Vault.VaultState storage,VaultLifecycleSpread.RolloverParams)": {
        "notice": "Calculate the shares to mint, new price per share, and amount of funds to re-allocate as collateral for the new round"
      },
      "settleSpread(address,address)": {
        "notice": "Close the existing short otoken position. Currently this implementation is simple. It closes the most recent vault opened by the contract. This assumes that the contract will only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by calling SettleVault action, this assumption should hold."
      },
      "startAuction(GnosisAuction.AuctionDetails)": {
        "notice": "Starts the gnosis auction"
      },
      "verifyInitializerParams(address,address,address,uint256,uint256,string,string,Vault.VaultParams)": {
        "notice": "Verify the constructor params satisfy requirements"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}