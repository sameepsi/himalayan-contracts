{
  "address": "0xFc74D505Ab51FC1338F90A720d997e451987CDc5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "optionId",
          "type": "bytes32"
        }
      ],
      "name": "annualizedVol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "annualStdev",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        }
      ],
      "name": "annualizedVol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "annualStdev",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "delta",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isPut",
          "type": "bool"
        }
      ],
      "name": "getOptionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "optionIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "newAnnualizedVols",
          "type": "uint256[]"
        }
      ],
      "name": "setAnnualizedVol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "vol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "standardDeviation",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x6f2f307397df81356827ef4f8c57161a6a8b97c41f042f8c6fb073e0126a4e4e",
  "receipt": {
    "to": null,
    "from": "0x1F6cB55c5A2B7753d6605ceF8e4999B90Fbb011A",
    "contractAddress": "0xFc74D505Ab51FC1338F90A720d997e451987CDc5",
    "transactionIndex": 5,
    "gasUsed": "742238",
    "logsBloom": "0x00000004000000000000000400000000000000000000000000000000000000200000000000000000000000000000000000008000008000000000000040000000004000000000000000000000000000800000000000000000000100000000000000000000020000000002008000000808000000000400000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000100000000000000000000000001000000000004000000000000000000001000000000000000000000000000100100000000020100000000002000000000000000000000000000000000000000000000000100000",
    "blockHash": "0x514679a1a3363f126026eb916b2a27ed05b72b071b0dde99d2c4463524ce535e",
    "transactionHash": "0x6f2f307397df81356827ef4f8c57161a6a8b97c41f042f8c6fb073e0126a4e4e",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 39616367,
        "transactionHash": "0x6f2f307397df81356827ef4f8c57161a6a8b97c41f042f8c6fb073e0126a4e4e",
        "address": "0xFc74D505Ab51FC1338F90A720d997e451987CDc5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42",
          "0x0000000000000000000000001f6cb55c5a2b7753d6605cef8e4999b90fbb011a",
          "0x0000000000000000000000001f6cb55c5a2b7753d6605cef8e4999b90fbb011a"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x514679a1a3363f126026eb916b2a27ed05b72b071b0dde99d2c4463524ce535e"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 39616367,
        "transactionHash": "0x6f2f307397df81356827ef4f8c57161a6a8b97c41f042f8c6fb073e0126a4e4e",
        "address": "0xFc74D505Ab51FC1338F90A720d997e451987CDc5",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001f6cb55c5a2b7753d6605cef8e4999b90fbb011a",
          "0x0000000000000000000000001f6cb55c5a2b7753d6605cef8e4999b90fbb011a"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x514679a1a3363f126026eb916b2a27ed05b72b071b0dde99d2c4463524ce535e"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 39616367,
        "transactionHash": "0x6f2f307397df81356827ef4f8c57161a6a8b97c41f042f8c6fb073e0126a4e4e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001f6cb55c5a2b7753d6605cef8e4999b90fbb011a",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x000000000000000000000000000000000000000000000000014f3feeeb68a80600000000000000000000000000000000000000000000000081558a55becbeff20000000000000000000000000000000000000000000000cd6ebefa95d3e3ab0700000000000000000000000000000000000000000000000080064a66d36347ec0000000000000000000000000000000000000000000000cd700e3a84bf4c530d",
        "logIndex": 24,
        "blockHash": "0x514679a1a3363f126026eb916b2a27ed05b72b071b0dde99d2c4463524ce535e"
      }
    ],
    "blockNumber": 39616367,
    "cumulativeGasUsed": "1881506",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1F6cB55c5A2B7753d6605ceF8e4999B90Fbb011A"
  ],
  "solcInputHash": "6af5012b821624158e268746ba6ca5b7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"optionId\",\"type\":\"bytes32\"}],\"name\":\"annualizedVol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"annualStdev\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"}],\"name\":\"annualizedVol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"annualStdev\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"delta\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPut\",\"type\":\"bool\"}],\"name\":\"getOptionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"optionIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newAnnualizedVols\",\"type\":\"uint256[]\"}],\"name\":\"setAnnualizedVol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"vol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"standardDeviation\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"annualizedVol(bytes32)\":{\"params\":{\"optionId\":\"is the encoded id for the option struct\"},\"returns\":{\"annualStdev\":\"is the annualized standard deviation of the asset\"}},\"annualizedVol(uint256,address,address,bool)\":{\"params\":{\"collateralAsset\":\"is the collateral used to collateralize the option\",\"delta\":\"is the option's delta, in units of 10**8. E.g. 105% = 1.05 * 10**8\",\"isPut\":\"is the flag used to determine if an option is a put or call\",\"underlying\":\"is the underlying of the option\"},\"returns\":{\"annualStdev\":\"is the annualized standard deviation of the asset\"}},\"constructor\":{\"params\":{\"_admin\":\"is the admin\"}},\"getOptionId(uint256,address,address,bool)\":{\"params\":{\"collateralAsset\":\"is the collateral used to collateralize the option\",\"delta\":\"is the option's delta, in units of 10**4. E.g. 0.1d = 0.1 * 10**4\",\"isPut\":\"is the flag used to determine if an option is a put or call\",\"underlying\":\"is the underlying of the option\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setAnnualizedVol(bytes32[],uint256[])\":{\"params\":{\"newAnnualizedVols\":\"is an array of the annualized volatility with 10**8 decimals i.e. 1*10**8 = 100%\",\"optionIds\":\"is an array of Option IDs encoded and hashed with optionId\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"vol(bytes32)\":{\"returns\":{\"standardDeviation\":\"is the standard deviation of the asset\"}}},\"stateVariables\":{\"ADMIN_ROLE\":{\"details\":\"The identifier of the role which maintains other roles.\"},\"annualizedVols\":{\"details\":\"Map of option id to IV\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"annualizedVol(bytes32)\":{\"notice\":\"Returns the annualized standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\"},\"annualizedVol(uint256,address,address,bool)\":{\"notice\":\"Returns the annualized standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\"},\"constructor\":{\"notice\":\"Creates an volatility oracle for a pool\"},\"getOptionId(uint256,address,address,bool)\":{\"notice\":\"Computes the option id for a given Option struct\"},\"setAnnualizedVol(bytes32[],uint256[])\":{\"notice\":\"Sets the annualized standard deviation of the base currency of one or more `pool(s)`\"},\"vol(bytes32)\":{\"notice\":\"Returns the standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracles/ManualVolOracle.sol\":\"ManualVolOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/oracles/ManualVolOracle.sol\":{\"content\":\"//SPDX-License-Identifier: GPL-3.0\\npragma solidity =0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract ManualVolOracle is AccessControl {\\n    /// @dev The identifier of the role which maintains other roles.\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN\\\");\\n\\n    /// @dev Map of option id to IV\\n    mapping(bytes32 => uint256) private annualizedVols;\\n\\n    /**\\n     * Instrument describe an option with a specific delta, asset and its option type.\\n     */\\n    struct Option {\\n        // option delta\\n        uint256 delta;\\n        // Underlying token, eg an stETH-collateralized option's underlying is WETH\\n        address underlying;\\n        // Asset used to collateralize an option, eg an stETH-collateralized option's collateral is wstETH\\n        address collateralAsset;\\n        // If an otoken is a put or not\\n        bool isPut;\\n    }\\n\\n    /**\\n     * @notice Creates an volatility oracle for a pool\\n     * @param _admin is the admin\\n     */\\n    constructor(address _admin) {\\n        require(_admin != address(0), \\\"!_admin\\\");\\n\\n        // Add _admin as admin\\n        _setupRole(ADMIN_ROLE, _admin);\\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\\n    }\\n\\n    /// @dev A modifier which checks that the caller has the admin role.\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ROLE, msg.sender), \\\"!admin\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Returns the standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\\n     * @return standardDeviation is the standard deviation of the asset\\n     */\\n    function vol(bytes32) public pure returns (uint256 standardDeviation) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @notice Returns the annualized standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\\n     * @param optionId is the encoded id for the option struct\\n     * @return annualStdev is the annualized standard deviation of the asset\\n     */\\n    function annualizedVol(bytes32 optionId)\\n        public\\n        view\\n        returns (uint256 annualStdev)\\n    {\\n        return annualizedVols[optionId];\\n    }\\n\\n    /**\\n     * @notice Returns the annualized standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\\n     * @param delta is the option's delta, in units of 10**8. E.g. 105% = 1.05 * 10**8\\n     * @param underlying is the underlying of the option\\n     * @param collateralAsset is the collateral used to collateralize the option\\n     * @param isPut is the flag used to determine if an option is a put or call\\n     * @return annualStdev is the annualized standard deviation of the asset\\n     */\\n    function annualizedVol(\\n        uint256 delta,\\n        address underlying,\\n        address collateralAsset,\\n        bool isPut\\n    ) public view returns (uint256 annualStdev) {\\n        return\\n            annualizedVols[\\n                getOptionId(delta, underlying, collateralAsset, isPut)\\n            ];\\n    }\\n\\n    /**\\n     * @notice Computes the option id for a given Option struct\\n     * @param delta is the option's delta, in units of 10**4. E.g. 0.1d = 0.1 * 10**4\\n     * @param underlying is the underlying of the option\\n     * @param collateralAsset is the collateral used to collateralize the option\\n     * @param isPut is the flag used to determine if an option is a put or call\\n     */\\n    function getOptionId(\\n        uint256 delta,\\n        address underlying,\\n        address collateralAsset,\\n        bool isPut\\n    ) public pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(delta, underlying, collateralAsset, isPut)\\n            );\\n    }\\n\\n    /**\\n     * @notice Sets the annualized standard deviation of the base currency of one or more `pool(s)`\\n     * @param optionIds is an array of Option IDs encoded and hashed with optionId\\n     * @param newAnnualizedVols is an array of the annualized volatility with 10**8 decimals i.e. 1*10**8 = 100%\\n     */\\n    function setAnnualizedVol(\\n        bytes32[] calldata optionIds,\\n        uint256[] calldata newAnnualizedVols\\n    ) external onlyAdmin {\\n        require(\\n            optionIds.length == newAnnualizedVols.length,\\n            \\\"Input lengths mismatched\\\"\\n        );\\n\\n        for (uint256 i = 0; i < optionIds.length; i++) {\\n            bytes32 optionId = optionIds[i];\\n            uint256 newAnnualizedVol = newAnnualizedVols[i];\\n\\n            require(newAnnualizedVol > 50 * 10**6, \\\"Cannot be less than 50%\\\");\\n            require(newAnnualizedVol < 400 * 10**6, \\\"Cannot be more than 400%\\\");\\n\\n            annualizedVols[optionId] = newAnnualizedVol;\\n        }\\n    }\\n}\",\"keccak256\":\"0xc43875bf022c9b3bb9d4ebd46cfe51f5e6abfcbe82258d09a16d64ec3e5a77d0\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610d0e380380610d0e83398101604081905261002f9161015a565b6001600160a01b0381166100735760405162461bcd60e51b815260206004820152600760248201526610afb0b236b4b760c91b604482015260640160405180910390fd5b61009d7fdf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42826100ae565b6100a86000826100ae565b5061018a565b6100b882826100bc565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166100b8576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556101163390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006020828403121561016c57600080fd5b81516001600160a01b038116811461018357600080fd5b9392505050565b610b75806101996000396000f3fe608060405234801561001057600080fd5b50600436106100af5760003560e01c806301ffc9a7146100b4578063248a9ca3146100dc57806327e8de0c146100fd5780632f2ff15d1461011157806336568abe146101265780635ecfdf1e1461013957806363acb03e1461015957806375b238fc1461016c5780638b7a6e3a1461018157806391d1485414610194578063a217fddf146101a7578063d547741f146101af578063fa4511a8146101c2575b600080fd5b6100c76100c2366004610828565b6101d5565b60405190151581526020015b60405180910390f35b6100ef6100ea366004610852565b61020c565b6040519081526020016100d3565b6100ef61010b366004610852565b50600090565b61012461011f366004610887565b610221565b005b610124610134366004610887565b610242565b6100ef610147366004610852565b60009081526001602052604090205490565b6100ef6101673660046108b3565b6102c5565b6100ef600080516020610b2083398151915281565b6100ef61018f3660046108b3565b6102f0565b6100c76101a2366004610887565b610340565b6100ef600081565b6101246101bd366004610887565b610369565b6101246101d0366004610952565b610385565b60006001600160e01b03198216637965db0b60e01b148061020657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526020819052604090206001015490565b61022a8261020c565b61023381610525565b61023d8383610532565b505050565b6001600160a01b03811633146102b75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102c182826105b6565b5050565b6000600160006102d7878787876102f0565b8152602001908152602001600020549050949350505050565b604080516020808201969096526001600160601b0319606095861b8116828401529390941b9092166054840152151560f81b60688301528051808303604901815260699092019052805191012090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6103728261020c565b61037b81610525565b61023d83836105b6565b61039d600080516020610b2083398151915233610340565b6103d25760405162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b60448201526064016102ae565b82811461041c5760405162461bcd60e51b8152602060048201526018602482015277125b9c1d5d081b195b99dd1a1cc81b5a5cdb585d18da195960421b60448201526064016102ae565b60005b8381101561051e57600085858381811061043b5761043b6109bd565b9050602002013590506000848484818110610458576104586109bd565b9050602002013590506302faf08081116104ae5760405162461bcd60e51b815260206004820152601760248201527643616e6e6f74206265206c657373207468616e2035302560481b60448201526064016102ae565b6317d7840081106104fc5760405162461bcd60e51b815260206004820152601860248201527743616e6e6f74206265206d6f7265207468616e203430302560401b60448201526064016102ae565b6000918252600160205260409091205580610516816109e9565b91505061041f565b5050505050565b61052f813361061b565b50565b61053c8282610340565b6102c1576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556105723390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6105c08282610340565b156102c1576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6106258282610340565b6102c15761063281610674565b61063d836020610686565b60405160200161064e929190610a26565b60408051601f198184030181529082905262461bcd60e51b82526102ae91600401610a95565b60606102066001600160a01b03831660145b60606000610695836002610ac8565b6106a0906002610adf565b6001600160401b038111156106b7576106b7610af2565b6040519080825280601f01601f1916602001820160405280156106e1576020820181803683370190505b509050600360fc1b816000815181106106fc576106fc6109bd565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061072b5761072b6109bd565b60200101906001600160f81b031916908160001a905350600061074f846002610ac8565b61075a906001610adf565b90505b60018111156107d2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061078e5761078e6109bd565b1a60f81b8282815181106107a4576107a46109bd565b60200101906001600160f81b031916908160001a90535060049490941c936107cb81610b08565b905061075d565b5083156108215760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102ae565b9392505050565b60006020828403121561083a57600080fd5b81356001600160e01b03198116811461082157600080fd5b60006020828403121561086457600080fd5b5035919050565b80356001600160a01b038116811461088257600080fd5b919050565b6000806040838503121561089a57600080fd5b823591506108aa6020840161086b565b90509250929050565b600080600080608085870312156108c957600080fd5b843593506108d96020860161086b565b92506108e76040860161086b565b9150606085013580151581146108fc57600080fd5b939692955090935050565b60008083601f84011261091957600080fd5b5081356001600160401b0381111561093057600080fd5b6020830191508360208260051b850101111561094b57600080fd5b9250929050565b6000806000806040858703121561096857600080fd5b84356001600160401b038082111561097f57600080fd5b61098b88838901610907565b909650945060208701359150808211156109a457600080fd5b506109b187828801610907565b95989497509550505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016109fb576109fb6109d3565b5060010190565b60005b83811015610a1d578181015183820152602001610a05565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351610a58816017850160208801610a02565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610a89816028840160208801610a02565b01602801949350505050565b6020815260008251806020840152610ab4816040850160208701610a02565b601f01601f19169190910160400192915050565b8082028115828204841417610206576102066109d3565b80820180821115610206576102066109d3565b634e487b7160e01b600052604160045260246000fd5b600081610b1757610b176109d3565b50600019019056fedf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42a264697066735822122098dbb1bedaec9284168397e18d47df29e936ac9de9d58c6164d16d834d3ed7b764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100af5760003560e01c806301ffc9a7146100b4578063248a9ca3146100dc57806327e8de0c146100fd5780632f2ff15d1461011157806336568abe146101265780635ecfdf1e1461013957806363acb03e1461015957806375b238fc1461016c5780638b7a6e3a1461018157806391d1485414610194578063a217fddf146101a7578063d547741f146101af578063fa4511a8146101c2575b600080fd5b6100c76100c2366004610828565b6101d5565b60405190151581526020015b60405180910390f35b6100ef6100ea366004610852565b61020c565b6040519081526020016100d3565b6100ef61010b366004610852565b50600090565b61012461011f366004610887565b610221565b005b610124610134366004610887565b610242565b6100ef610147366004610852565b60009081526001602052604090205490565b6100ef6101673660046108b3565b6102c5565b6100ef600080516020610b2083398151915281565b6100ef61018f3660046108b3565b6102f0565b6100c76101a2366004610887565b610340565b6100ef600081565b6101246101bd366004610887565b610369565b6101246101d0366004610952565b610385565b60006001600160e01b03198216637965db0b60e01b148061020657506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526020819052604090206001015490565b61022a8261020c565b61023381610525565b61023d8383610532565b505050565b6001600160a01b03811633146102b75760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6102c182826105b6565b5050565b6000600160006102d7878787876102f0565b8152602001908152602001600020549050949350505050565b604080516020808201969096526001600160601b0319606095861b8116828401529390941b9092166054840152151560f81b60688301528051808303604901815260699092019052805191012090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6103728261020c565b61037b81610525565b61023d83836105b6565b61039d600080516020610b2083398151915233610340565b6103d25760405162461bcd60e51b815260206004820152600660248201526510b0b236b4b760d11b60448201526064016102ae565b82811461041c5760405162461bcd60e51b8152602060048201526018602482015277125b9c1d5d081b195b99dd1a1cc81b5a5cdb585d18da195960421b60448201526064016102ae565b60005b8381101561051e57600085858381811061043b5761043b6109bd565b9050602002013590506000848484818110610458576104586109bd565b9050602002013590506302faf08081116104ae5760405162461bcd60e51b815260206004820152601760248201527643616e6e6f74206265206c657373207468616e2035302560481b60448201526064016102ae565b6317d7840081106104fc5760405162461bcd60e51b815260206004820152601860248201527743616e6e6f74206265206d6f7265207468616e203430302560401b60448201526064016102ae565b6000918252600160205260409091205580610516816109e9565b91505061041f565b5050505050565b61052f813361061b565b50565b61053c8282610340565b6102c1576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556105723390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6105c08282610340565b156102c1576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6106258282610340565b6102c15761063281610674565b61063d836020610686565b60405160200161064e929190610a26565b60408051601f198184030181529082905262461bcd60e51b82526102ae91600401610a95565b60606102066001600160a01b03831660145b60606000610695836002610ac8565b6106a0906002610adf565b6001600160401b038111156106b7576106b7610af2565b6040519080825280601f01601f1916602001820160405280156106e1576020820181803683370190505b509050600360fc1b816000815181106106fc576106fc6109bd565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061072b5761072b6109bd565b60200101906001600160f81b031916908160001a905350600061074f846002610ac8565b61075a906001610adf565b90505b60018111156107d2576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061078e5761078e6109bd565b1a60f81b8282815181106107a4576107a46109bd565b60200101906001600160f81b031916908160001a90535060049490941c936107cb81610b08565b905061075d565b5083156108215760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102ae565b9392505050565b60006020828403121561083a57600080fd5b81356001600160e01b03198116811461082157600080fd5b60006020828403121561086457600080fd5b5035919050565b80356001600160a01b038116811461088257600080fd5b919050565b6000806040838503121561089a57600080fd5b823591506108aa6020840161086b565b90509250929050565b600080600080608085870312156108c957600080fd5b843593506108d96020860161086b565b92506108e76040860161086b565b9150606085013580151581146108fc57600080fd5b939692955090935050565b60008083601f84011261091957600080fd5b5081356001600160401b0381111561093057600080fd5b6020830191508360208260051b850101111561094b57600080fd5b9250929050565b6000806000806040858703121561096857600080fd5b84356001600160401b038082111561097f57600080fd5b61098b88838901610907565b909650945060208701359150808211156109a457600080fd5b506109b187828801610907565b95989497509550505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016109fb576109fb6109d3565b5060010190565b60005b83811015610a1d578181015183820152602001610a05565b50506000910152565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351610a58816017850160208801610a02565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351610a89816028840160208801610a02565b01602801949350505050565b6020815260008251806020840152610ab4816040850160208701610a02565b601f01601f19169190910160400192915050565b8082028115828204841417610206576102066109d3565b80820180821115610206576102066109d3565b634e487b7160e01b600052604160045260246000fd5b600081610b1757610b176109d3565b50600019019056fedf8b4c520ffe197c5343c6f5aec59570151ef9a492f2c624fd45ddde6135ec42a264697066735822122098dbb1bedaec9284168397e18d47df29e936ac9de9d58c6164d16d834d3ed7b764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "annualizedVol(bytes32)": {
        "params": {
          "optionId": "is the encoded id for the option struct"
        },
        "returns": {
          "annualStdev": "is the annualized standard deviation of the asset"
        }
      },
      "annualizedVol(uint256,address,address,bool)": {
        "params": {
          "collateralAsset": "is the collateral used to collateralize the option",
          "delta": "is the option's delta, in units of 10**8. E.g. 105% = 1.05 * 10**8",
          "isPut": "is the flag used to determine if an option is a put or call",
          "underlying": "is the underlying of the option"
        },
        "returns": {
          "annualStdev": "is the annualized standard deviation of the asset"
        }
      },
      "constructor": {
        "params": {
          "_admin": "is the admin"
        }
      },
      "getOptionId(uint256,address,address,bool)": {
        "params": {
          "collateralAsset": "is the collateral used to collateralize the option",
          "delta": "is the option's delta, in units of 10**4. E.g. 0.1d = 0.1 * 10**4",
          "isPut": "is the flag used to determine if an option is a put or call",
          "underlying": "is the underlying of the option"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setAnnualizedVol(bytes32[],uint256[])": {
        "params": {
          "newAnnualizedVols": "is an array of the annualized volatility with 10**8 decimals i.e. 1*10**8 = 100%",
          "optionIds": "is an array of Option IDs encoded and hashed with optionId"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "vol(bytes32)": {
        "returns": {
          "standardDeviation": "is the standard deviation of the asset"
        }
      }
    },
    "stateVariables": {
      "ADMIN_ROLE": {
        "details": "The identifier of the role which maintains other roles."
      },
      "annualizedVols": {
        "details": "Map of option id to IV"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "annualizedVol(bytes32)": {
        "notice": "Returns the annualized standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%"
      },
      "annualizedVol(uint256,address,address,bool)": {
        "notice": "Returns the annualized standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%"
      },
      "constructor": {
        "notice": "Creates an volatility oracle for a pool"
      },
      "getOptionId(uint256,address,address,bool)": {
        "notice": "Computes the option id for a given Option struct"
      },
      "setAnnualizedVol(bytes32[],uint256[])": {
        "notice": "Sets the annualized standard deviation of the base currency of one or more `pool(s)`"
      },
      "vol(bytes32)": {
        "notice": "Returns the standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1019,
        "contract": "contracts/oracles/ManualVolOracle.sol:ManualVolOracle",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)1014_storage)"
      },
      {
        "astId": 14801,
        "contract": "contracts/oracles/ManualVolOracle.sol:ManualVolOracle",
        "label": "annualizedVols",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)1014_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)1014_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RoleData)1014_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 1011,
            "contract": "contracts/oracles/ManualVolOracle.sol:ManualVolOracle",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 1013,
            "contract": "contracts/oracles/ManualVolOracle.sol:ManualVolOracle",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}