{
  "address": "0x94AE3Eb4DA3c3D5F577aA1F31D762F1D75Bd6468",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "deltas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "getStrikePrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_strikePrices",
          "type": "uint256[]"
        }
      ],
      "name": "setStrikePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strikePrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x34139d957db21678285767568768a567a769e3fb6df43c3f86f6fd27aadee96f",
  "receipt": {
    "to": null,
    "from": "0x1F6cB55c5A2B7753d6605ceF8e4999B90Fbb011A",
    "contractAddress": "0x94AE3Eb4DA3c3D5F577aA1F31D762F1D75Bd6468",
    "transactionIndex": 15,
    "gasUsed": "443534",
    "logsBloom": "0x
    "blockHash": "0x5be7d31a2790a637b07501f054e49f41630acc84c5c989cad37a6ee8f0e0282b",
    "transactionHash": "0x34139d957db21678285767568768a567a769e3fb6df43c3f86f6fd27aadee96f",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 39616436,
        "transactionHash": "0x34139d957db21678285767568768a567a769e3fb6df43c3f86f6fd27aadee96f",
        "address": "0x94AE3Eb4DA3c3D5F577aA1F31D762F1D75Bd6468",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001f6cb55c5a2b7753d6605cef8e4999b90fbb011a"
        ],
        "data": "0x",
        "logIndex": 43,
        "blockHash": "0x5be7d31a2790a637b07501f054e49f41630acc84c5c989cad37a6ee8f0e0282b"
      },
      {
        "transactionIndex": 15,
        "blockNumber": 39616436,
        "transactionHash": "0x34139d957db21678285767568768a567a769e3fb6df43c3f86f6fd27aadee96f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001f6cb55c5a2b7753d6605cef8e4999b90fbb011a",
          "0x000000000000000000000000ec20607aa654d823dd01beb8780a44863c57ed07"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000857b6e0ca7aaf80000000000000000000000000000000000000000000000003a6c5ea2c07247f20000000000000000000000000000000000000000000000cde3e1bbccd0af5e5800000000000000000000000000000000000000000000000039e6e334b3ca9cfa0000000000000000000000000000000000000000000000cde467373add570950",
        "logIndex": 44,
        "blockHash": "0x5be7d31a2790a637b07501f054e49f41630acc84c5c989cad37a6ee8f0e0282b"
      }
    ],
    "blockNumber": 39616436,
    "cumulativeGasUsed": "2288581",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7a9a7fde5daea9d518e47d571827a975",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"deltas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"getStrikePrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_strikePrices\",\"type\":\"uint256[]\"}],\"name\":\"setStrikePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strikePrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getStrikePrices(uint256,bool)\":{\"returns\":{\"_0\":\"newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\",\"_1\":\"newDelta is the delta of the option given its parameters\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setStrikePrice(uint256[])\":{\"params\":{\"_strikePrices\":\"are the strike prices of the options in the spread\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"deltas\":{\"details\":\"Delta for options strike price selection. 1 is 10000 (10**4)\"},\"strikePrices\":{\"details\":\"Selected strike price\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getStrikePrices(uint256,bool)\":{\"notice\":\"Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put\"},\"setStrikePrice(uint256[])\":{\"notice\":\"Sets the strike price, only callable by the owner\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/utils/ManualStrikeSelectionCallSpread.sol\":\"ManualStrikeSelectionCallSpread\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/utils/ManualStrikeSelectionCallSpread.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.17;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ManualStrikeSelectionCallSpread is Ownable {\\n    /// @dev Selected strike price\\n    uint256[] public strikePrices;\\n\\n    /// @dev Delta for options strike price selection. 1 is 10000 (10**4)\\n    uint256[] public deltas = [1000, 1000];\\n\\n    /**\\n     * @notice Sets the strike price, only callable by the owner\\n     * @param _strikePrices are the strike prices of the options in the spread\\n     */\\n    function setStrikePrice(uint256[] calldata _strikePrices) external onlyOwner {\\n        strikePrices = _strikePrices;\\n    }\\n\\n    /**\\n     * @notice Gets the strike price satisfying the delta value\\n     * given the expiry timestamp and whether option is call or put\\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\\n     * @return newDelta is the delta of the option given its parameters\\n     */\\n    function getStrikePrices(uint256, bool)\\n        external\\n        view\\n        returns (uint256[] memory, uint256[] memory)\\n    {\\n        return (strikePrices, deltas);\\n    }\\n}\\n\",\"keccak256\":\"0xd74ec694d042162b7416afa9999dc2671e46cc3a6801b0475978bf040447214c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526103e8608081815260a09190915261001f906002908161008b565b5034801561002c57600080fd5b506100363361003b565b6100f1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156100cc579160200282015b828111156100cc578251829061ffff169055916020019190600101906100ab565b506100d89291506100dc565b5090565b5b808211156100d857600081556001016100dd565b61055d806101006000396000f3fe608060405234801561001057600080fd5b506004361061006d5760003560e01c80632f4ad3f6146100725780633127842014610098578063715018a6146100b95780638da5cb5b146100c3578063990f6059146100e3578063d934d2f7146100f6578063f2fde38b14610109575b600080fd5b6100856100803660046103cc565b61011c565b6040519081526020015b60405180910390f35b6100ab6100a63660046103e5565b61013d565b60405161008f929190610455565b6100c16101f3565b005b6100cb610207565b6040516001600160a01b03909116815260200161008f565b6100c16100f1366004610483565b610216565b6100856101043660046103cc565b61022f565b6100c16101173660046104f7565b61023f565b6001818154811061012c57600080fd5b600091825260209091200154905081565b606080600160028180548060200260200160405190810160405280929190818152602001828054801561018f57602002820191906000526020600020905b81548152602001906001019080831161017b575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156101e157602002820191906000526020600020905b8154815260200190600101908083116101cd575b50505050509050915091509250929050565b6101fb6102bd565b610205600061031c565b565b6000546001600160a01b031690565b61021e6102bd565b61022a6001838361036c565b505050565b6002818154811061012c57600080fd5b6102476102bd565b6001600160a01b0381166102b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102ba8161031c565b50565b336102c6610207565b6001600160a01b0316146102055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156103a7579160200282015b828111156103a757823582559160200191906001019061038c565b506103b39291506103b7565b5090565b5b808211156103b357600081556001016103b8565b6000602082840312156103de57600080fd5b5035919050565b600080604083850312156103f857600080fd5b823591506020830135801515811461040f57600080fd5b809150509250929050565b600081518084526020808501945080840160005b8381101561044a5781518752958201959082019060010161042e565b509495945050505050565b604081526000610468604083018561041a565b828103602084015261047a818561041a565b95945050505050565b6000806020838503121561049657600080fd5b82356001600160401b03808211156104ad57600080fd5b818501915085601f8301126104c157600080fd5b8135818111156104d057600080fd5b8660208260051b85010111156104e557600080fd5b60209290920196919550909350505050565b60006020828403121561050957600080fd5b81356001600160a01b038116811461052057600080fd5b939250505056fea2646970667358221220eaafc37e8c18be26e61a8980add57e60a6f2244415e1fd41e2b0fe7df4252b0a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061006d5760003560e01c80632f4ad3f6146100725780633127842014610098578063715018a6146100b95780638da5cb5b146100c3578063990f6059146100e3578063d934d2f7146100f6578063f2fde38b14610109575b600080fd5b6100856100803660046103cc565b61011c565b6040519081526020015b60405180910390f35b6100ab6100a63660046103e5565b61013d565b60405161008f929190610455565b6100c16101f3565b005b6100cb610207565b6040516001600160a01b03909116815260200161008f565b6100c16100f1366004610483565b610216565b6100856101043660046103cc565b61022f565b6100c16101173660046104f7565b61023f565b6001818154811061012c57600080fd5b600091825260209091200154905081565b606080600160028180548060200260200160405190810160405280929190818152602001828054801561018f57602002820191906000526020600020905b81548152602001906001019080831161017b575b50505050509150808054806020026020016040519081016040528092919081815260200182805480156101e157602002820191906000526020600020905b8154815260200190600101908083116101cd575b50505050509050915091509250929050565b6101fb6102bd565b610205600061031c565b565b6000546001600160a01b031690565b61021e6102bd565b61022a6001838361036c565b505050565b6002818154811061012c57600080fd5b6102476102bd565b6001600160a01b0381166102b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b6102ba8161031c565b50565b336102c6610207565b6001600160a01b0316146102055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102a8565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156103a7579160200282015b828111156103a757823582559160200191906001019061038c565b506103b39291506103b7565b5090565b5b808211156103b357600081556001016103b8565b6000602082840312156103de57600080fd5b5035919050565b600080604083850312156103f857600080fd5b823591506020830135801515811461040f57600080fd5b809150509250929050565b600081518084526020808501945080840160005b8381101561044a5781518752958201959082019060010161042e565b509495945050505050565b604081526000610468604083018561041a565b828103602084015261047a818561041a565b95945050505050565b6000806020838503121561049657600080fd5b82356001600160401b03808211156104ad57600080fd5b818501915085601f8301126104c157600080fd5b8135818111156104d057600080fd5b8660208260051b85010111156104e557600080fd5b60209290920196919550909350505050565b60006020828403121561050957600080fd5b81356001600160a01b038116811461052057600080fd5b939250505056fea2646970667358221220eaafc37e8c18be26e61a8980add57e60a6f2244415e1fd41e2b0fe7df4252b0a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getStrikePrices(uint256,bool)": {
        "returns": {
          "_0": "newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)",
          "_1": "newDelta is the delta of the option given its parameters"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setStrikePrice(uint256[])": {
        "params": {
          "_strikePrices": "are the strike prices of the options in the spread"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "deltas": {
        "details": "Delta for options strike price selection. 1 is 10000 (10**4)"
      },
      "strikePrices": {
        "details": "Selected strike price"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getStrikePrices(uint256,bool)": {
        "notice": "Gets the strike price satisfying the delta value given the expiry timestamp and whether option is call or put"
      },
      "setStrikePrice(uint256[])": {
        "notice": "Sets the strike price, only callable by the owner"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1391,
        "contract": "contracts/utils/ManualStrikeSelectionCallSpread.sol:ManualStrikeSelectionCallSpread",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16415,
        "contract": "contracts/utils/ManualStrikeSelectionCallSpread.sol:ManualStrikeSelectionCallSpread",
        "label": "strikePrices",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 16422,
        "contract": "contracts/utils/ManualStrikeSelectionCallSpread.sol:ManualStrikeSelectionCallSpread",
        "label": "deltas",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}