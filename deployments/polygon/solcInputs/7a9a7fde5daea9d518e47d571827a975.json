{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Clones.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(address implementation, bytes32 salt)\n        internal\n        view\n        returns (address predicted)\n    {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/interfaces/GammaInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nlibrary GammaTypes {\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\n    struct Vault {\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\n        address[] shortOtokens;\n        // addresses of oTokens a user has bought and deposited in this vault\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral\n        // in order to write oTokens against (i.e. in spreads)\n        address[] longOtokens;\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\n        address[] collateralAssets;\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\n        uint256[] shortAmounts;\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\n        uint256[] longAmounts;\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\n        uint256[] collateralAmounts;\n    }\n\n    // vault is a struct of 6 arrays that describe a position a user has, a user can have multiple vaults.\n    struct MarginVault {\n        // addresses of oTokens a user has shorted (i.e. written) against this vault\n        address[] shortOtokens;\n        // addresses of oTokens a user has bought and deposited in this vault\n        // user can be long oTokens without opening a vault (e.g. by buying on a DEX)\n        // generally, long oTokens will be 'deposited' in vaults to act as collateral in order to write oTokens against (i.e. in spreads)\n        address[] longOtokens;\n        // addresses of other ERC-20s a user has deposited as collateral in this vault\n        address[] collateralAssets;\n        // quantity of oTokens minted/written for each oToken address in shortOtokens\n        uint256[] shortAmounts;\n        // quantity of oTokens owned and held in the vault for each oToken address in longOtokens\n        uint256[] longAmounts;\n        // quantity of ERC-20 deposited as collateral in the vault for each ERC-20 address in collateralAssets\n        uint256[] collateralAmounts;\n    }\n}\n\ninterface IMarginCalculator {\n    /**\n     * @notice returns the amount of collateral that can be removed from an actual or a theoretical vault\n     * @dev return amount is denominated in the collateral asset for the oToken in the vault, or the collateral asset in the vault\n     * @param _vault theoretical vault that needs to be checked\n     * @param _vaultType vault type (0 for spread/max loss, 1 for naked margin)\n     * @return excessCollateral the amount by which the margin is above or below the required amount\n     * @return isExcess True if there is excess margin in the vault, False if there is a deficit of margin in the vault\n     * if True, collateral can be taken out from the vault, if False, additional collateral needs to be added to vault\n     */\n    function getExcessCollateral(GammaTypes.MarginVault memory _vault, uint256 _vaultType)\n        external\n        view\n        returns (uint256, bool);\n}\n\ninterface IOtoken {\n    function underlyingAsset() external view returns (address);\n\n    function strikeAsset() external view returns (address);\n\n    function collateralAsset() external view returns (address);\n\n    function strikePrice() external view returns (uint256);\n\n    function expiryTimestamp() external view returns (uint256);\n\n    function isPut() external view returns (bool);\n}\n\ninterface IOtokenFactory {\n    function getOtoken(\n        address _underlyingAsset,\n        address _strikeAsset,\n        address _collateralAsset,\n        uint256 _strikePrice,\n        uint256 _expiry,\n        bool _isPut\n    ) external view returns (address);\n\n    function createOtoken(\n        address _underlyingAsset,\n        address _strikeAsset,\n        address _collateralAsset,\n        uint256 _strikePrice,\n        uint256 _expiry,\n        bool _isPut\n    ) external returns (address);\n\n    function getTargetOtokenAddress(\n        address _underlyingAsset,\n        address _strikeAsset,\n        address _collateralAsset,\n        uint256 _strikePrice,\n        uint256 _expiry,\n        bool _isPut\n    ) external view returns (address);\n\n    event OtokenCreated(\n        address tokenAddress,\n        address creator,\n        address indexed underlying,\n        address indexed strike,\n        address indexed collateral,\n        uint256 strikePrice,\n        uint256 expiry,\n        bool isPut\n    );\n}\n\ninterface IController {\n    // possible actions that can be performed\n    enum ActionType {\n        OpenVault,\n        MintShortOption,\n        BurnShortOption,\n        DepositLongOption,\n        WithdrawLongOption,\n        DepositCollateral,\n        WithdrawCollateral,\n        SettleVault,\n        Redeem,\n        Call,\n        Liquidate\n    }\n\n    struct ActionArgs {\n        // type of action that is being performed on the system\n        ActionType actionType;\n        // address of the account owner\n        address owner;\n        // address which we move assets from or to (depending on the action type)\n        address secondAddress;\n        // asset that is to be transfered\n        address asset;\n        // index of the vault that is to be modified (if any)\n        uint256 vaultId;\n        // amount of asset that is to be transfered\n        uint256 amount;\n        // each vault can hold multiple short / long / collateral assets\n        // but we are restricting the scope to only 1 of each in this version\n        // in future versions this would be the index of the short / long / collateral asset that needs to be modified\n        uint256 index;\n        // any other data that needs to be passed in for arbitrary function calls\n        bytes data;\n    }\n\n    struct RedeemArgs {\n        // address to which we pay out the oToken proceeds\n        address receiver;\n        // oToken that is to be redeemed\n        address otoken;\n        // amount of oTokens that is to be redeemed\n        uint256 amount;\n    }\n\n    function getPayout(address _otoken, uint256 _amount)\n        external\n        view\n        returns (uint256);\n\n    function operate(ActionArgs[] calldata _actions) external;\n\n    function getAccountVaultCounter(address owner)\n        external\n        view\n        returns (uint256);\n\n    function oracle() external view returns (address);\n\n    function calculator() external view returns(address);\n\n    function getVault(address _owner, uint256 _vaultId)\n        external\n        view\n        returns (GammaTypes.Vault memory);\n\n    function getProceed(address _owner, uint256 _vaultId)\n        external\n        view\n        returns (uint256);\n\n    function isSettlementAllowed(\n        address _underlying,\n        address _strike,\n        address _collateral,\n        uint256 _expiry\n    ) external view returns (bool);\n\n    function getVaultWithDetails(address _owner, uint256 _vaultId)\n        external\n        view\n        returns (\n            GammaTypes.MarginVault memory,\n            uint256,\n            uint256\n        );\n\n    function setOperator(address _operator, bool _isOperator) external;\n}\n\ninterface IOracle {\n    function setAssetPricer(address _asset, address _pricer) external;\n\n    function updateAssetPricer(address _asset, address _pricer) external;\n\n    function getPrice(address _asset) external view returns (uint256);\n\n    function isDisputePeriodOver(address _asset, uint256 _expiryTimestamp) external view returns (bool);\n\n    function getExpiryPrice(address _asset, uint256 _expiryTimestamp) external view returns (uint256, bool);\n    \n    function setExpiryPrice(\n        address _asset,\n        uint256 _expiryTimestamp,\n        uint256 _price\n    ) external;\n}\n"
    },
    "contracts/interfaces/ICRV.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface ICRV {\n    function get_dy(\n        int128 _indexIn,\n        int128 _indexOut,\n        uint256 _amountIn\n    ) external view returns (uint256);\n\n    // https://github.com/curvefi/curve-contract/blob/\n    // b0bbf77f8f93c9c5f4e415bce9cd71f0cdee960e/contracts/pools/steth/StableSwapSTETH.vy#L431\n    function exchange(\n        int128 _indexIn,\n        int128 _indexOut,\n        uint256 _amountIn,\n        uint256 _minAmountOut\n    ) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IERC20Detailed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IERC20Detailed is IERC20 {\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string calldata);\n\n    function name() external view returns (string calldata);\n}\n"
    },
    "contracts/interfaces/IGnosisAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary AuctionType {\n    struct AuctionData {\n        IERC20 auctioningToken;\n        IERC20 biddingToken;\n        uint256 orderCancellationEndDate;\n        uint256 auctionEndDate;\n        bytes32 initialAuctionOrder;\n        uint256 minimumBiddingAmountPerOrder;\n        uint256 interimSumBidAmount;\n        bytes32 interimOrder;\n        bytes32 clearingPriceOrder;\n        uint96 volumeClearingPriceOrder;\n        bool minFundingThresholdNotReached;\n        bool isAtomicClosureAllowed;\n        uint256 feeNumerator;\n        uint256 minFundingThreshold;\n    }\n}\n\ninterface IGnosisAuction {\n    function initiateAuction(\n        address _auctioningToken,\n        address _biddingToken,\n        uint256 orderCancellationEndDate,\n        uint256 auctionEndDate,\n        uint96 _auctionedSellAmount,\n        uint96 _minBuyAmount,\n        uint256 minimumBiddingAmountPerOrder,\n        uint256 minFundingThreshold,\n        bool isAtomicClosureAllowed,\n        address accessManagerContract,\n        bytes memory accessManagerContractData\n    ) external returns (uint256);\n\n    function auctionCounter() external view returns (uint256);\n\n    function auctionData(uint256 auctionId)\n        external\n        view\n        returns (AuctionType.AuctionData memory);\n\n    function auctionAccessManager(uint256 auctionId)\n        external\n        view\n        returns (address);\n\n    function auctionAccessData(uint256 auctionId)\n        external\n        view\n        returns (bytes memory);\n\n    function FEE_DENOMINATOR() external view returns (uint256);\n\n    function feeNumerator() external view returns (uint256);\n\n    function settleAuction(uint256 auctionId) external returns (bytes32);\n\n    function placeSellOrders(\n        uint256 auctionId,\n        uint96[] memory _minBuyAmounts,\n        uint96[] memory _sellAmounts,\n        bytes32[] memory _prevSellOrders,\n        bytes calldata allowListCallData\n    ) external returns (uint64);\n\n    function claimFromParticipantOrder(\n        uint256 auctionId,\n        bytes32[] memory orders\n    ) external returns (uint256, uint256);\n}\n"
    },
    "contracts/interfaces/IHimalayan.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\nimport {Vault} from \"../libraries/Vault.sol\";\n\ninterface IHimalayan {\n    function deposit(uint256 amount) external;\n\n    function depositETH() external payable;\n\n    function cap() external view returns (uint256);\n\n    function depositFor(uint256 amount, address creditor) external;\n\n    function vaultParams() external view returns (Vault.VaultParams memory);\n}\n\ninterface IStrikeSelectionSpread {\n    function getStrikePrices(uint256 expiryTimestamp, bool isPut)\n        external\n        view\n        returns (uint256[] memory, uint256[] memory);\n\n    function delta() external view returns (uint256);\n}\n\ninterface IOptionsPremiumPricer {\n    function getPremium(\n        uint256 strikePrice,\n        uint256 timeToExpiry,\n        bool isPut\n    ) external view returns (uint256);\n\n    function getPremiumInStables(\n        uint256 strikePrice,\n        uint256 timeToExpiry,\n        bool isPut\n    ) external view returns (uint256);\n\n    function getOptionDelta(\n        uint256 spotPrice,\n        uint256 strikePrice,\n        uint256 volatility,\n        uint256 expiryTimestamp\n    ) external view returns (uint256 delta);\n\n    function getUnderlyingPrice() external view returns (uint256);\n\n    function priceOracle() external view returns (address);\n\n    function volatilityOracle() external view returns (address);\n\n    function optionId() external view returns (bytes32);\n}\n\ninterface ISpreadToken {\n\n    function init(\n        string calldata name,\n        string calldata symbol,\n        address _asset,\n        address _underlying,\n        uint256 _expiry,\n        bool _isPut\n    )\n        external;\n\n    function mint(uint256 amount) external;\n\n    function settleVault() external;\n\n    function burnAndClaim() external;\n}\n"
    },
    "contracts/interfaces/ILendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface ILendingPool {\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata modes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n}"
    },
    "contracts/interfaces/ILiquidityGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface ILiquidityGauge {\n    function balanceOf(address) external view returns (uint256);\n\n    function deposit(\n        uint256 _value,\n        address _addr,\n        bool _claim_rewards\n    ) external;\n\n    function withdraw(uint256 _value) external;\n}\n"
    },
    "contracts/interfaces/IOptionsPurchaseQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IOptionsPurchaseQueue {\n    /**\n     * @dev Contains purchase request info\n     * @param optionsAmount Amount of options to purchase\n     * @param premiums Total premiums the buyer is spending to purchase the options (optionsAmount * ceilingPrice)\n     *  We need to track the premiums here since the ceilingPrice could change between the time the purchase was\n     *  requested and when the options are sold\n     * @param buyer The buyer requesting this purchase\n     */\n    struct Purchase {\n        uint128 optionsAmount; // Slot 0\n        uint128 premiums;\n        address buyer; // Slot 1\n    }\n\n    function purchases(address, uint256)\n        external\n        view\n        returns (\n            uint128,\n            uint128,\n            address\n        );\n\n    function totalOptionsAmount(address) external view returns (uint256);\n\n    function vaultAllocatedOptions(address) external view returns (uint256);\n\n    function whitelistedBuyer(address) external view returns (bool);\n\n    function minPurchaseAmount(address) external view returns (uint256);\n\n    function ceilingPrice(address) external view returns (uint256);\n\n    function getPurchases(address vault)\n        external\n        view\n        returns (Purchase[] memory);\n\n    function getPremiums(address vault, uint256 optionsAmount)\n        external\n        view\n        returns (uint256);\n\n    function getOptionsAllocation(address vault, uint256 allocatedOptions)\n        external\n        view\n        returns (uint256);\n\n    function requestPurchase(address vault, uint256 optionsAmount)\n        external\n        returns (uint256);\n\n    function allocateOptions(uint256 allocatedOptions)\n        external\n        returns (uint256);\n\n    function sellToBuyers(uint256 settlementPrice) external returns (uint256);\n\n    function cancelAllPurchases(address vault) external;\n\n    function addWhitelist(address buyer) external;\n\n    function removeWhitelist(address buyer) external;\n\n    function setCeilingPrice(address vault, uint256 price) external;\n\n    function setMinPurchaseAmount(address vault, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/IPriceOracle.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.17;\n\ninterface IPriceOracle {\n    function decimals() external view returns (uint256 _decimals);\n\n    function latestAnswer() external view returns (uint256 price);\n}\n"
    },
    "contracts/interfaces/IRibbon.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\nimport {Vault} from \"../libraries/Vault.sol\";\n\ninterface IRibbonVault {\n    function deposit(uint256 amount) external;\n\n    function depositETH() external payable;\n\n    function cap() external view returns (uint256);\n\n    function depositFor(uint256 amount, address creditor) external;\n\n    function vaultParams() external view returns (Vault.VaultParams memory);\n}\n\ninterface IStrikeSelection {\n    function getStrikePrice(uint256 expiryTimestamp, bool isPut)\n        external\n        view\n        returns (uint256, uint256);\n\n    function delta() external view returns (uint256);\n}\n\ninterface IOptionsPremiumPricer {\n    function getPremium(\n        uint256 strikePrice,\n        uint256 timeToExpiry,\n        bool isPut\n    ) external view returns (uint256);\n\n    function getPremiumInStables(\n        uint256 strikePrice,\n        uint256 timeToExpiry,\n        bool isPut\n    ) external view returns (uint256);\n\n    function getOptionDelta(\n        uint256 spotPrice,\n        uint256 strikePrice,\n        uint256 volatility,\n        uint256 expiryTimestamp\n    ) external view returns (uint256 delta);\n\n    function getUnderlyingPrice() external view returns (uint256);\n\n    function priceOracle() external view returns (address);\n\n    function volatilityOracle() external view returns (address);\n\n    function optionId() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IRibbonThetaVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {Vault} from \"../libraries/Vault.sol\";\n\ninterface IRibbonThetaVault {\n    function currentOption() external view returns (address);\n\n    function nextOption() external view returns (address);\n\n    function vaultParams() external view returns (Vault.VaultParams memory);\n\n    function vaultState() external view returns (Vault.VaultState memory);\n\n    function optionState() external view returns (Vault.OptionState memory);\n\n    function optionAuctionID() external view returns (uint256);\n\n    function pricePerShare() external view returns (uint256);\n\n    function roundPricePerShare(uint256) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISAVAX.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface ISAVAX is IERC20 {\n    function getSharesByPooledAvax(uint256 avaxAmount)\n        external\n        view\n        returns (uint256);\n\n    function getPooledAvaxByShares(uint256 shareAmount)\n        external\n        view\n        returns (uint256);\n\n    function submit() external payable returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISTETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface IWSTETH {\n    function getStETHByWstETH(uint256 _amount) external view returns (uint256);\n\n    function getWstETHByStETH(uint256 _amount) external view returns (uint256);\n\n    function stEthPerToken() external view returns (uint256);\n\n    function tokensPerStEth() external view returns (uint256);\n\n    function stETH() external view returns (address);\n\n    function wrap(uint256 _amount) external returns (uint256);\n\n    function unwrap(uint256 _amount) external returns (uint256);\n\n    function approve(address _recipient, uint256 _amount)\n        external\n        returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function decimals() external view returns (uint256);\n}\n\ninterface ISTETH {\n    function getBufferedEther(uint256 _amount) external view returns (uint256);\n\n    function getPooledEthByShares(uint256 _amount)\n        external\n        view\n        returns (uint256);\n\n    function getSharesByPooledEth(uint256 _amount)\n        external\n        view\n        returns (uint256);\n\n    function submit(address _referralAddress)\n        external\n        payable\n        returns (uint256);\n\n    function withdraw(uint256 _amount, bytes32 _pubkeyHash)\n        external\n        returns (uint256);\n\n    function approve(address _recipient, uint256 _amount)\n        external\n        returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function decimals() external view returns (uint256);\n\n    function getTotalShares() external view returns (uint256);\n\n    function getTotalPooledEther() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ISwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity =0.8.17;\n\ninterface ISwap {\n    struct Offer {\n        // 32 byte slot 1, partial fill\n        // Seller wallet address\n        address seller;\n        // 32 byte slot 2\n        // Addess of oToken\n        address oToken;\n        // Price per oToken denominated in biddingToken\n        uint96 minPrice;\n        // 32 byte slot 3\n        // ERC20 Token to bid for oToken\n        address biddingToken;\n        // Minimum oToken amount acceptable for a single bid\n        uint96 minBidSize;\n        // 32 byte slot 4\n        // Total available oToken amount\n        uint128 totalSize;\n        // Remaining available oToken amount\n        // This figure is updated after each successfull swap\n        uint128 availableSize;\n        // 32 byte slot 5\n        // Amount of biddingToken received\n        // This figure is updated after each successfull swap\n        uint256 totalSales;\n    }\n\n    struct Bid {\n        // ID assigned to offers\n        uint256 swapId;\n        // Number only used once for each wallet\n        uint256 nonce;\n        // Signer wallet address\n        address signerWallet;\n        // Amount of biddingToken offered by signer\n        uint256 sellAmount;\n        // Amount of oToken requested by signer\n        uint256 buyAmount;\n        // Referrer wallet address\n        address referrer;\n        // Signature recovery id\n        uint8 v;\n        // r portion of the ECSDA signature\n        bytes32 r;\n        // s portion of the ECSDA signature\n        bytes32 s;\n    }\n\n    struct OfferDetails {\n        // Seller wallet address\n        address seller;\n        // Addess of oToken\n        address oToken;\n        // Price per oToken denominated in biddingToken\n        uint256 minPrice;\n        // ERC20 Token to bid for oToken\n        address biddingToken;\n        // Minimum oToken amount acceptable for a single bid\n        uint256 minBidSize;\n    }\n\n    event Swap(\n        uint256 indexed swapId,\n        uint256 nonce,\n        address indexed signerWallet,\n        uint256 signerAmount,\n        uint256 sellerAmount,\n        address referrer,\n        uint256 feeAmount\n    );\n\n    event NewOffer(\n        uint256 swapId,\n        address seller,\n        address oToken,\n        address biddingToken,\n        uint256 minPrice,\n        uint256 minBidSize,\n        uint256 totalSize\n    );\n\n    event SetFee(address referrer, uint256 fee);\n\n    event SettleOffer(uint256 swapId);\n\n    event Cancel(uint256 indexed nonce, address indexed signerWallet);\n\n    event Authorize(address indexed signer, address indexed signerWallet);\n\n    event Revoke(address indexed signer, address indexed signerWallet);\n\n    function createOffer(\n        address oToken,\n        address biddingToken,\n        uint96 minPrice,\n        uint96 minBidSize,\n        uint128 totalSize\n    ) external returns (uint256 swapId);\n\n    function settleOffer(uint256 swapId, Bid[] calldata bids) external;\n\n    function cancelNonce(uint256[] calldata nonces) external;\n\n    function check(Bid calldata bid)\n        external\n        view\n        returns (uint256, bytes32[] memory);\n\n    function averagePriceForOffer(uint256 swapId)\n        external\n        view\n        returns (uint256);\n\n    function authorize(address sender) external;\n\n    function revoke() external;\n\n    function nonceUsed(address, uint256) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/ISwapRouter.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity =0.8.17;\npragma abicoder v2;\n\n/// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n\n/// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/ISwapRouter.sol\n\n/// @title Router token swapping functionality\n/// @notice Functions for swapping tokens via Uniswap V3\ninterface ISwapRouter is IUniswapV3SwapCallback {\n    struct ExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInputSingle(ExactInputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactInputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountIn;\n        uint256 amountOutMinimum;\n    }\n\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n    /// @return amountOut The amount of the received token\n    function exactInput(ExactInputParams calldata params)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    struct ExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint24 fee;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutputSingle(ExactOutputSingleParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n\n    struct ExactOutputParams {\n        bytes path;\n        address recipient;\n        uint256 deadline;\n        uint256 amountOut;\n        uint256 amountInMaximum;\n    }\n\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n    /// @return amountIn The amount of the input token\n    function exactOutput(ExactOutputParams calldata params)\n        external\n        payable\n        returns (uint256 amountIn);\n}\n"
    },
    "contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n// Source: https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol\npragma solidity =0.8.17;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n}\n"
    },
    "contracts/interfaces/IVaultPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface IVaultPauser {\n    /// @notice pause vault position of an account with max amount\n    /// @param _account the address of user\n    /// @param _amount amount of shares\n    function pausePosition(address _account, uint256 _amount) external;\n\n    /// @notice resume vault position of an account with max amount\n    /// @param _vaultAddress the address of vault\n    function resumePosition(address _vaultAddress) external;\n}"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n\n}\n"
    },
    "contracts/interfaces/IYearn.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface IYearnVault {\n    function pricePerShare() external view returns (uint256);\n\n    function deposit(uint256 _amount, address _recipient)\n        external\n        returns (uint256);\n\n    function withdraw(\n        uint256 _maxShares,\n        address _recipient,\n        uint256 _maxLoss\n    ) external returns (uint256);\n\n    function approve(address _recipient, uint256 _amount)\n        external\n        returns (bool);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function decimals() external view returns (uint256);\n}\n\ninterface IYearnRegistry {\n    function latestVault(address token) external returns (address);\n}\n\ninterface IYearnPricer {\n    function setExpiryPriceInOracle(uint256 _expiryTimestamp) external;\n\n    function getPrice() external view returns (uint256);\n}\n"
    },
    "contracts/libraries/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Source: https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity =0.8.17;\n\nlibrary BytesLib {\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    ) internal pure returns (bytes memory) {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n                case 0 {\n                    // Get a location of some free memory and store it in tempBytes as\n                    // Solidity does for memory variables.\n                    tempBytes := mload(0x40)\n\n                    // The first word of the slice result is potentially a partial\n                    // word read from the original array. To read it, we calculate\n                    // the length of that partial word and start copying that many\n                    // bytes into the array. The first word we copy will start with\n                    // data we don't care about, but the last `lengthmod` bytes will\n                    // land at the beginning of the contents of the new array. When\n                    // we're done copying, we overwrite the full first word with\n                    // the actual length of the slice.\n                    let lengthmod := and(_length, 31)\n\n                    // The multiplication in the next line is necessary\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n                    // the following copy loop was copying the origin's length\n                    // and then ending prematurely not copying everything it should.\n                    let mc := add(\n                        add(tempBytes, lengthmod),\n                        mul(0x20, iszero(lengthmod))\n                    )\n                    let end := add(mc, _length)\n\n                    for {\n                        // The multiplication in the next line has the same exact purpose\n                        // as the one above.\n                        let cc := add(\n                            add(\n                                add(_bytes, lengthmod),\n                                mul(0x20, iszero(lengthmod))\n                            ),\n                            _start\n                        )\n                    } lt(mc, end) {\n                        mc := add(mc, 0x20)\n                        cc := add(cc, 0x20)\n                    } {\n                        mstore(mc, mload(cc))\n                    }\n\n                    mstore(tempBytes, _length)\n\n                    //update free-memory pointer\n                    //allocating the array padded to 32 bytes like the compiler does now\n                    mstore(0x40, and(add(mc, 31), not(31)))\n                }\n                //if we want a zero-length slice let's just return a zero-length array\n                default {\n                    tempBytes := mload(0x40)\n                    //zero out the 32 bytes slice we are about to return\n                    //we need to do it because Solidity does not garbage collect\n                    mstore(tempBytes, 0)\n\n                    mstore(0x40, add(tempBytes, 0x20))\n                }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (address)\n    {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(\n                mload(add(add(_bytes, 0x20), _start)),\n                0x1000000000000000000000000\n            )\n        }\n\n        return tempAddress;\n    }\n\n    function toUint24(bytes memory _bytes, uint256 _start)\n        internal\n        pure\n        returns (uint24)\n    {\n        require(_bytes.length >= _start + 3, \"toUint24_outOfBounds\");\n        uint24 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x3), _start))\n        }\n\n        return tempUint;\n    }\n}\n"
    },
    "contracts/libraries/DateTime.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Source: https://github.com/bokkypoobah/BokkyPooBahsDateTimeLibrary\n// ----------------------------------------------------------------------------\n// BokkyPooBah's DateTime Library v1.01\n// ----------------------------------------------------------------------------\n\npragma solidity =0.8.17;\n\nlibrary DateTime {\n    uint256 constant SECONDS_PER_DAY = 24 * 60 * 60;\n    uint256 constant SECONDS_PER_HOUR = 60 * 60;\n    uint256 constant SECONDS_PER_MINUTE = 60;\n    int256 constant OFFSET19700101 = 2440588;\n\n    uint256 constant DOW_MON = 1;\n    uint256 constant DOW_TUE = 2;\n    uint256 constant DOW_WED = 3;\n    uint256 constant DOW_THU = 4;\n    uint256 constant DOW_FRI = 5;\n    uint256 constant DOW_SAT = 6;\n    uint256 constant DOW_SUN = 7;\n\n    // ------------------------------------------------------------------------\n    // Calculate the number of days from 1970/01/01 to year/month/day using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and subtracting the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // days = day\n    //      - 32075\n    //      + 1461 * (year + 4800 + (month - 14) / 12) / 4\n    //      + 367 * (month - 2 - (month - 14) / 12 * 12) / 12\n    //      - 3 * ((year + 4900 + (month - 14) / 12) / 100) / 4\n    //      - offset\n    // ------------------------------------------------------------------------\n    function _daysFromDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) internal pure returns (uint256 _days) {\n        require(year >= 1970);\n        int256 _year = int256(year);\n        int256 _month = int256(month);\n        int256 _day = int256(day);\n\n        int256 __days =\n            _day -\n                32075 +\n                (1461 * (_year + 4800 + (_month - 14) / 12)) /\n                4 +\n                (367 * (_month - 2 - ((_month - 14) / 12) * 12)) /\n                12 -\n                (3 * ((_year + 4900 + (_month - 14) / 12) / 100)) /\n                4 -\n                OFFSET19700101;\n\n        _days = uint256(__days);\n    }\n\n    // ------------------------------------------------------------------------\n    // Calculate year/month/day from the number of days since 1970/01/01 using\n    // the date conversion algorithm from\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\n    //\n    // int L = days + 68569 + offset\n    // int N = 4 * L / 146097\n    // L = L - (146097 * N + 3) / 4\n    // year = 4000 * (L + 1) / 1461001\n    // L = L - 1461 * year / 4 + 31\n    // month = 80 * L / 2447\n    // dd = L - 2447 * month / 80\n    // L = month / 11\n    // month = month + 2 - 12 * L\n    // year = 100 * (N - 49) + year + L\n    // ------------------------------------------------------------------------\n    function _daysToDate(uint256 _days)\n        internal\n        pure\n        returns (\n            uint256 year,\n            uint256 month,\n            uint256 day\n        )\n    {\n        int256 __days = int256(_days);\n\n        int256 L = __days + 68569 + OFFSET19700101;\n        int256 N = (4 * L) / 146097;\n        L = L - (146097 * N + 3) / 4;\n        int256 _year = (4000 * (L + 1)) / 1461001;\n        L = L - (1461 * _year) / 4 + 31;\n        int256 _month = (80 * L) / 2447;\n        int256 _day = L - (2447 * _month) / 80;\n        L = _month / 11;\n        _month = _month + 2 - 12 * L;\n        _year = 100 * (N - 49) + _year + L;\n\n        year = uint256(_year);\n        month = uint256(_month);\n        day = uint256(_day);\n    }\n\n    function isLeapYear(uint256 timestamp)\n        internal\n        pure\n        returns (bool leapYear)\n    {\n        (uint256 year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n        leapYear = _isLeapYear(year);\n    }\n\n    function _isLeapYear(uint256 year) internal pure returns (bool leapYear) {\n        leapYear = ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0);\n    }\n\n    function getDaysInMonth(uint256 timestamp)\n        internal\n        pure\n        returns (uint256 daysInMonth)\n    {\n        (uint256 year, uint256 month, ) =\n            _daysToDate(timestamp / SECONDS_PER_DAY);\n        daysInMonth = _getDaysInMonth(year, month);\n    }\n\n    function _getDaysInMonth(uint256 year, uint256 month)\n        internal\n        pure\n        returns (uint256 daysInMonth)\n    {\n        if (\n            month == 1 ||\n            month == 3 ||\n            month == 5 ||\n            month == 7 ||\n            month == 8 ||\n            month == 10 ||\n            month == 12\n        ) {\n            daysInMonth = 31;\n        } else if (month != 2) {\n            daysInMonth = 30;\n        } else {\n            daysInMonth = _isLeapYear(year) ? 29 : 28;\n        }\n    }\n\n    // 1 = Monday, 7 = Sunday\n    function getDayOfWeek(uint256 timestamp)\n        internal\n        pure\n        returns (uint256 dayOfWeek)\n    {\n        uint256 _days = timestamp / SECONDS_PER_DAY;\n        dayOfWeek = ((_days + 3) % 7) + 1;\n    }\n\n    function getYear(uint256 timestamp) internal pure returns (uint256 year) {\n        (year, , ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getMonth(uint256 timestamp) internal pure returns (uint256 month) {\n        (, month, ) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function getDay(uint256 timestamp) internal pure returns (uint256 day) {\n        (, , day) = _daysToDate(timestamp / SECONDS_PER_DAY);\n    }\n\n    function timestampFromDate(\n        uint256 year,\n        uint256 month,\n        uint256 day\n    ) internal pure returns (uint256 timestamp) {\n        timestamp = _daysFromDate(year, month, day) * SECONDS_PER_DAY;\n    }\n\n    /**\n     * @notice Gets the Friday of the same week\n     * @param timestamp is the given date and time\n     * @return the Friday of the same week in unix time\n     */\n    function getThisWeekFriday(uint256 timestamp)\n        internal\n        pure\n        returns (uint256)\n    {\n        return timestamp + 5 days - getDayOfWeek(timestamp) * 1 days;\n    }\n\n    /**\n     * @notice Gets the next friday after the given date and time\n     * @param timestamp is the given date and time\n     * @return the next friday after the given date and time\n     */\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\n        uint256 friday = getThisWeekFriday(timestamp);\n        return friday >= timestamp ? friday : friday + 1 weeks;\n    }\n\n    /**\n     * @notice Gets the last day of the month\n     * @param timestamp is the given date and time\n     * @return the last day of the same month in unix time\n     */\n    function getLastDayOfMonth(uint256 timestamp)\n        internal\n        pure\n        returns (uint256)\n    {\n        return\n            timestampFromDate(getYear(timestamp), getMonth(timestamp) + 1, 1) -\n            1 days;\n    }\n\n    /**\n     * @notice Gets the last Friday of the month\n     * @param timestamp is the given date and time\n     * @return the last Friday of the same month in unix time\n     */\n    function getMonthLastFriday(uint256 timestamp)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 lastDay = getLastDayOfMonth(timestamp);\n        uint256 friday = getThisWeekFriday(lastDay);\n\n        return friday > lastDay ? friday - 1 weeks : friday;\n    }\n\n    /**\n     * @notice Gets the last Friday of the quarter\n     * @param timestamp is the given date and time\n     * @return the last Friday of the quarter in unix time\n     */\n    function getQuarterLastFriday(uint256 timestamp)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 month = getMonth(timestamp);\n        uint256 quarterMonth =\n            (month <= 3) ? 3 : (month <= 6) ? 6 : (month <= 9) ? 9 : 12;\n\n        uint256 quarterDate =\n            timestampFromDate(getYear(timestamp), quarterMonth, 1);\n\n        return getMonthLastFriday(quarterDate);\n    }\n\n    /**\n     * @notice Gets the last Friday of the half-year\n     * @param timestamp is the given date and time\n     * @return the last friday of the half-year\n     */\n    function getBiannualLastFriday(uint256 timestamp)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 month = getMonth(timestamp);\n        uint256 biannualMonth = (month <= 6) ? 6 : 12;\n\n        uint256 biannualDate =\n            timestampFromDate(getYear(timestamp), biannualMonth, 1);\n\n        return getMonthLastFriday(biannualDate);\n    }\n}\n"
    },
    "contracts/libraries/GnosisAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {DSMath} from \"../vendor/DSMath.sol\";\nimport {IGnosisAuction} from \"../interfaces/IGnosisAuction.sol\";\nimport {IOtoken} from \"../interfaces/GammaInterface.sol\";\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\nimport {Vault} from \"./Vault.sol\";\nimport {IRibbonThetaVault} from \"../interfaces/IRibbonThetaVault.sol\";\n\nlibrary GnosisAuction {\n    using SafeERC20 for IERC20;\n\n    event InitiateGnosisAuction(\n        address indexed auctioningToken,\n        address indexed biddingToken,\n        uint256 auctionCounter,\n        address indexed manager\n    );\n\n    event PlaceAuctionBid(\n        uint256 auctionId,\n        address indexed auctioningToken,\n        uint256 sellAmount,\n        uint256 buyAmount,\n        address indexed bidder\n    );\n\n    struct AuctionDetails {\n        address tokenAddress;// Token to sell\n        address gnosisEasyAuction;\n        address asset;\n        uint256 assetDecimals;\n        uint256 premium;\n        uint256 duration;\n    }\n\n    struct BidDetails {\n        address tokenAddress;// Token to sell\n        address gnosisEasyAuction;\n        address asset;\n        uint256 assetDecimals;\n        uint256 auctionId;\n        uint256 lockedBalance;\n        uint256 optionAllocation;\n        uint256 optionPremium;\n        address bidder;\n    }\n\n    function startAuction(AuctionDetails calldata auctionDetails)\n        internal\n        returns (uint256 auctionID)\n    {\n        uint256 oTokenSellAmount =\n            getOTokenSellAmount(auctionDetails.tokenAddress);\n        require(oTokenSellAmount > 0, \"No otokens to sell\");\n\n        IERC20(auctionDetails.tokenAddress).safeApprove(\n            auctionDetails.gnosisEasyAuction,\n            IERC20(auctionDetails.tokenAddress).balanceOf(address(this))\n        );\n\n        // minBidAmount is total oTokens to sell * premium per oToken\n        // shift decimals to correspond to decimals of USDC for puts\n        // and underlying for calls\n        uint256 minBidAmount =\n            DSMath.wmul(\n                oTokenSellAmount * (10**10),\n                auctionDetails.premium\n            );\n\n        minBidAmount = auctionDetails.assetDecimals > 18\n            ? minBidAmount * (10**(auctionDetails.assetDecimals - (18)))\n            : minBidAmount / (\n                10**(uint256(18) - (auctionDetails.assetDecimals))\n            );\n\n        require(\n            minBidAmount <= type(uint96).max,\n            \"optionPremium * oTokenSellAmount > type(uint96) max value!\"\n        );\n\n        uint256 auctionEnd = block.timestamp + (auctionDetails.duration);\n\n        auctionID = IGnosisAuction(auctionDetails.gnosisEasyAuction)\n            .initiateAuction(\n            // address of token we minted and are selling\n            auctionDetails.tokenAddress,\n            // address of asset we want in exchange for sell token. Should match vault `asset`\n            auctionDetails.asset,\n            // orders can be cancelled at any time during the auction\n            auctionEnd,\n            // order will last for `duration`\n            auctionEnd,\n            // we are selling all of the otokens minus a fee taken by gnosis\n            uint96(oTokenSellAmount),\n            // the minimum we are willing to sell all the oTokens for. A discount is applied on black-scholes price\n            uint96(minBidAmount),\n            // the minimum bidding amount must be 1 * 10 ** -assetDecimals\n            1,\n            // the min funding threshold\n            0,\n            // no atomic closure\n            false,\n            // access manager contract\n            address(0),\n            // bytes for storing info like a whitelist for who can bid\n            bytes(\"\")\n        );\n\n        emit InitiateGnosisAuction(\n            auctionDetails.tokenAddress,\n            auctionDetails.asset,\n            auctionID,\n            msg.sender\n        );\n    }\n\n    function placeBid(BidDetails calldata bidDetails)\n        internal\n        returns (\n            uint256 sellAmount,\n            uint256 buyAmount,\n            uint64 userId\n        )\n    {\n        // calculate how much to allocate\n        sellAmount = bidDetails\n            .lockedBalance\n            * (bidDetails.optionAllocation)\n            / (100 * Vault.OPTION_ALLOCATION_MULTIPLIER);\n\n        // divide the `asset` sellAmount by the target premium per oToken to\n        // get the number of oTokens to buy (8 decimals)\n        buyAmount = sellAmount\n            * (10**(bidDetails.assetDecimals + (Vault.OTOKEN_DECIMALS)))\n            / (bidDetails.optionPremium)\n            / (10**bidDetails.assetDecimals);\n\n        require(\n            sellAmount <= type(uint96).max,\n            \"sellAmount > type(uint96) max value!\"\n        );\n        require(\n            buyAmount <= type(uint96).max,\n            \"buyAmount > type(uint96) max value!\"\n        );\n\n        // approve that amount\n        IERC20(bidDetails.asset).safeApprove(\n            bidDetails.gnosisEasyAuction,\n            sellAmount\n        );\n\n        uint96[] memory _minBuyAmounts = new uint96[](1);\n        uint96[] memory _sellAmounts = new uint96[](1);\n        bytes32[] memory _prevSellOrders = new bytes32[](1);\n        _minBuyAmounts[0] = uint96(buyAmount);\n        _sellAmounts[0] = uint96(sellAmount);\n        _prevSellOrders[\n            0\n        ] = 0x0000000000000000000000000000000000000000000000000000000000000001;\n\n        // place sell order with that amount\n        userId = IGnosisAuction(bidDetails.gnosisEasyAuction).placeSellOrders(\n            bidDetails.auctionId,\n            _minBuyAmounts,\n            _sellAmounts,\n            _prevSellOrders,\n            \"0x\"\n        );\n\n        emit PlaceAuctionBid(\n            bidDetails.auctionId,\n            bidDetails.tokenAddress,\n            sellAmount,\n            buyAmount,\n            bidDetails.bidder\n        );\n\n        return (sellAmount, buyAmount, userId);\n    }\n\n    function claimAuctionOtokens(\n        Vault.AuctionSellOrder calldata auctionSellOrder,\n        address gnosisEasyAuction,\n        address counterpartyThetaVault\n    ) internal {\n        bytes32 order =\n            encodeOrder(\n                auctionSellOrder.userId,\n                auctionSellOrder.buyAmount,\n                auctionSellOrder.sellAmount\n            );\n        bytes32[] memory orders = new bytes32[](1);\n        orders[0] = order;\n        IGnosisAuction(gnosisEasyAuction).claimFromParticipantOrder(\n            IRibbonThetaVault(counterpartyThetaVault).optionAuctionID(),\n            orders\n        );\n    }\n\n    function getOTokenSellAmount(address tokenAddress)\n        internal\n        view\n        returns (uint256)\n    {\n        // We take our current oToken balance. That will be our sell amount\n        // but otokens will be transferred to gnosis.\n        uint256 oTokenSellAmount =\n            IERC20(tokenAddress).balanceOf(address(this));\n\n        require(\n            oTokenSellAmount <= type(uint96).max,\n            \"oTokenSellAmount > type(uint96) max value!\"\n        );\n\n        return oTokenSellAmount;\n    }\n\n    function getOTokenPremiumInStables(\n        address tokenAddress,\n        address optionsPremiumPricer,\n        uint256 premiumDiscount\n    ) internal view returns (uint256) {\n        IOtoken newOToken = IOtoken(tokenAddress);\n        IOptionsPremiumPricer premiumPricer =\n            IOptionsPremiumPricer(optionsPremiumPricer);\n\n        // Apply black-scholes formula (from rvol library) to option given its features\n        // and get price for 100 contracts denominated USDC for both call and put options\n        uint256 optionPremium =\n            premiumPricer.getPremiumInStables(\n                newOToken.strikePrice(),\n                newOToken.expiryTimestamp(),\n                newOToken.isPut()\n            );\n\n        // Apply a discount to incentivize arbitraguers\n        optionPremium = optionPremium / (premiumDiscount) / (\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\n        );\n\n        require(\n            optionPremium <= type(uint96).max,\n            \"optionPremium > type(uint96) max value!\"\n        );\n\n        return optionPremium;\n    }\n\n    function encodeOrder(\n        uint64 userId,\n        uint96 buyAmount,\n        uint96 sellAmount\n    ) internal pure returns (bytes32) {\n        return\n            bytes32(\n                (uint256(userId) << 192) +\n                    (uint256(buyAmount) << 96) +\n                    uint256(sellAmount)\n            );\n    }\n}\n"
    },
    "contracts/libraries/Path.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\n// Source: https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/Path.sol\npragma solidity =0.8.17;\n\nimport \"./BytesLib.sol\";\n\n/// @title Functions for manipulating path data for multihop swaps\nlibrary Path {\n    using BytesLib for bytes;\n\n    /// @dev The length of the bytes encoded address\n    uint256 private constant ADDR_SIZE = 20;\n    /// @dev The length of the bytes encoded fee\n    uint256 private constant FEE_SIZE = 3;\n\n    /// @dev The offset of a single token address and pool fee\n    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\n    /// @dev The offset of an encoded pool key\n    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\n    /// @dev The minimum length of an encoding that contains 2 or more pools\n    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH =\n        POP_OFFSET + NEXT_OFFSET;\n\n    /// @notice Returns true iff the path contains two or more pools\n    /// @param path The encoded swap path\n    /// @return True if path contains two or more pools, otherwise false\n    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\n        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\n    }\n\n    /// @notice Returns the number of pools in the path\n    /// @param path The encoded swap path\n    /// @return The number of pools in the path\n    function numPools(bytes memory path) internal pure returns (uint256) {\n        // Ignore the first token address. From then on every fee and token offset indicates a pool.\n        return ((path.length - ADDR_SIZE) / NEXT_OFFSET);\n    }\n\n    /// @notice Decodes the first pool in path\n    /// @param path The bytes encoded swap path\n    /// @return tokenA The first token of the given pool\n    /// @return tokenB The second token of the given pool\n    /// @return fee The fee level of the pool\n    function decodeFirstPool(bytes memory path)\n        internal\n        pure\n        returns (\n            address tokenA,\n            address tokenB,\n            uint24 fee\n        )\n    {\n        tokenA = path.toAddress(0);\n        fee = path.toUint24(ADDR_SIZE);\n        tokenB = path.toAddress(NEXT_OFFSET);\n    }\n\n    /// @notice Gets the segment corresponding to the first pool in the path\n    /// @param path The bytes encoded swap path\n    /// @return The segment containing all data necessary to target the first pool in the path\n    function getFirstPool(bytes memory path)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return path.slice(0, POP_OFFSET);\n    }\n\n    /// @notice Skips a token + fee element from the buffer and returns the remainder\n    /// @param path The swap path\n    /// @return The remaining token + fee elements in the path\n    function skipToken(bytes memory path) internal pure returns (bytes memory) {\n        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\n    }\n}\n"
    },
    "contracts/libraries/ShareMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {Vault} from \"./Vault.sol\";\n\nlibrary ShareMath {\n    using SafeMath for uint256;\n\n    uint256 internal constant PLACEHOLDER_UINT = 1;\n\n    function assetToShares(\n        uint256 assetAmount,\n        uint256 assetPerShare,\n        uint256 decimals\n    ) internal pure returns (uint256) {\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\n        // which should never happen.\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\n        require(assetPerShare > PLACEHOLDER_UINT, \"Invalid assetPerShare\");\n\n        return assetAmount.mul(10**decimals).div(assetPerShare);\n    }\n\n    function sharesToAsset(\n        uint256 shares,\n        uint256 assetPerShare,\n        uint256 decimals\n    ) internal pure returns (uint256) {\n        // If this throws, it means that vault's roundPricePerShare[currentRound] has not been set yet\n        // which should never happen.\n        // Has to be larger than 1 because `1` is used in `initRoundPricePerShares` to prevent cold writes.\n        require(assetPerShare > PLACEHOLDER_UINT, \"Invalid assetPerShare\");\n\n        return shares.mul(assetPerShare).div(10**decimals);\n    }\n\n    /**\n     * @notice Returns the shares unredeemed by the user given their DepositReceipt\n     * @param depositReceipt is the user's deposit receipt\n     * @param currentRound is the `round` stored on the vault\n     * @param assetPerShare is the price in asset per share\n     * @param decimals is the number of decimals the asset/shares use\n     * @return unredeemedShares is the user's virtual balance of shares that are owed\n     */\n    function getSharesFromReceipt(\n        Vault.DepositReceipt memory depositReceipt,\n        uint256 currentRound,\n        uint256 assetPerShare,\n        uint256 decimals\n    ) internal pure returns (uint256 unredeemedShares) {\n        if (depositReceipt.round > 0 && depositReceipt.round < currentRound) {\n            uint256 sharesFromRound =\n                assetToShares(depositReceipt.amount, assetPerShare, decimals);\n\n            return\n                uint256(depositReceipt.unredeemedShares).add(sharesFromRound);\n        }\n        return depositReceipt.unredeemedShares;\n    }\n\n    function pricePerShare(\n        uint256 totalSupply,\n        uint256 totalBalance,\n        uint256 pendingAmount,\n        uint256 decimals\n    ) internal pure returns (uint256) {\n        uint256 singleShare = 10**decimals;\n        return\n            totalSupply > 0\n                ? singleShare.mul(totalBalance.sub(pendingAmount)).div(\n                    totalSupply\n                )\n                : singleShare;\n    }\n\n    /************************************************\n     *  HELPERS\n     ***********************************************/\n\n    function assertUint104(uint256 num) internal pure {\n        require(num <= type(uint104).max, \"Overflow uint104\");\n    }\n\n    function assertUint128(uint256 num) internal pure {\n        require(num <= type(uint128).max, \"Overflow uint128\");\n    }\n}\n"
    },
    "contracts/libraries/SupportsNonCompliantERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * This library supports ERC20s that have quirks in their behavior.\n * One such ERC20 is USDT, which requires allowance to be 0 before calling approve.\n * We plan to update this library with ERC20s that display such idiosyncratic behavior.\n */\nlibrary SupportsNonCompliantERC20 {\n    address private constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n\n    function safeApproveNonCompliant(\n        IERC20 token,\n        address spender,\n        uint256 amount\n    ) internal {\n        if (address(token) == USDT) {\n            SafeERC20.safeApprove(token, spender, 0);\n        }\n        SafeERC20.safeApprove(token, spender, amount);\n    }\n}\n"
    },
    "contracts/libraries/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nlibrary Vault {\n    /************************************************\n     *  IMMUTABLES & CONSTANTS\n     ***********************************************/\n\n    // Fees are 6-decimal places. For example: 20 * 10**6 = 20%\n    uint256 internal constant FEE_MULTIPLIER = 10**6;\n\n    // Premium discount has 1-decimal place. For example: 80 * 10**1 = 80%. Which represents a 20% discount.\n    uint256 internal constant PREMIUM_DISCOUNT_MULTIPLIER = 10;\n\n    // Otokens have 8 decimal places.\n    uint256 internal constant OTOKEN_DECIMALS = 8;\n\n    // Percentage of funds allocated to options is 2 decimal places. 10 * 10**2 = 10%\n    uint256 internal constant OPTION_ALLOCATION_MULTIPLIER = 10**2;\n\n    // Placeholder uint value to prevent cold writes\n    uint256 internal constant PLACEHOLDER_UINT = 1;\n\n    struct VaultParams {\n        // Option type the vault is selling\n        bool isPut;\n        // Vault type\n        bool isSpread;\n        // Token decimals for vault shares\n        uint8 decimals;\n        // Asset used in Theta / Delta Vault\n        address asset;\n        // Underlying asset of the options sold by vault\n        address underlying;\n        // Minimum supply of the vault shares issued, for ETH it's 10**10\n        uint56 minimumSupply;\n        // Vault cap\n        uint104 cap;\n    }\n\n    struct OptionState {\n        // Option that the vault is shorting / longing in the next cycle\n        address nextOption;\n        // Option that the vault is currently shorting / longing\n        address currentOption;\n        // The timestamp when the `nextOption` can be used by the vault\n        uint32 nextOptionReadyAt;\n    }\n\n    struct SpreadState {\n        // Options that are part of the vault's next strategy, if spread\n        // Both options should have same params apart from the strike price\n        address[] nextSpread;\n        // Options that are the part of vault's current strategy\n        address[] currentSpread;\n        // The timestamp when the `nextOption` can be used by the vault\n        uint32 nextOptionReadyAt;\n        //Used in spread vaults\n        address currentSpreadToken;\n        //Used in spread vaults\n        address nextSpreadToken;\n    }\n\n    struct VaultState {\n        // 32 byte slot 1\n        //  Current round number. `round` represents the number of `period`s elapsed.\n        uint16 round;\n        // Amount that is currently locked for selling options\n        uint104 lockedAmount;\n        // Amount that was locked for selling options in the previous round\n        // used for calculating performance fee deduction\n        uint104 lastLockedAmount;\n        // Locked amount which is used so far\n        uint104 lockedAmountUsed;\n        // 32 byte slot 2\n        // Stores the total tally of how much of `asset` there is\n        // to be used to mint rTHETA tokens\n        uint128 totalPending;\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\n        uint128 queuedWithdrawShares;\n    }\n\n    struct DepositReceipt {\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\n        uint16 round;\n        // Deposit amount, max 20,282,409,603,651 or 20 trillion ETH deposit\n        uint104 amount;\n        // Unredeemed shares balance\n        uint128 unredeemedShares;\n    }\n\n    struct Withdrawal {\n        // Maximum of 65535 rounds. Assuming 1 round is 7 days, maximum is 1256 years.\n        uint16 round;\n        // Number of shares withdrawn\n        uint128 shares;\n    }\n\n    struct AuctionSellOrder {\n        // Amount of `asset` token offered in auction\n        uint96 sellAmount;\n        // Amount of oToken requested in auction\n        uint96 buyAmount;\n        // User Id of delta vault in latest gnosis auction\n        uint64 userId;\n    }\n}\n"
    },
    "contracts/libraries/VaultLifecycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Vault} from \"./Vault.sol\";\nimport {ShareMath} from \"./ShareMath.sol\";\nimport {IStrikeSelection} from \"../interfaces/IRibbon.sol\";\nimport {GnosisAuction} from \"./GnosisAuction.sol\";\nimport {\n    IOtokenFactory,\n    IOtoken,\n    IController,\n    GammaTypes\n} from \"../interfaces/GammaInterface.sol\";\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\nimport {IGnosisAuction} from \"../interfaces/IGnosisAuction.sol\";\nimport {IOptionsPurchaseQueue} from \"../interfaces/IOptionsPurchaseQueue.sol\";\nimport {SupportsNonCompliantERC20} from \"./SupportsNonCompliantERC20.sol\";\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\n\nlibrary VaultLifecycle {\n    using SafeMath for uint256;\n    using SupportsNonCompliantERC20 for IERC20;\n\n    struct CloseParams {\n        address OTOKEN_FACTORY;\n        address USDC;\n        address currentOption;\n        uint256 delay;\n        uint16 lastStrikeOverrideRound;\n        uint256 overriddenStrikePrice;\n        address strikeSelection;\n        address optionsPremiumPricer;\n        uint256 premiumDiscount;\n    }\n\n    /// @notice Default maximum option allocation for the queue (50%)\n    uint256 internal constant QUEUE_OPTION_ALLOCATION = 5000;\n\n    /**\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\n     * @param closeParams is the struct with details on previous option and strike selection details\n     * @param vaultParams is the struct with vault general data\n     * @param vaultState is the struct with vault accounting state\n     * @return otokenAddress is the address of the new option\n     * @return strikePrice is the strike price of the new option\n     * @return delta is the delta of the new option\n     */\n    function commitAndClose(\n        CloseParams calldata closeParams,\n        Vault.VaultParams storage vaultParams,\n        Vault.VaultState storage vaultState\n    )\n        external\n        returns (\n            address otokenAddress,\n            uint256 strikePrice,\n            uint256 delta\n        )\n    {\n        uint256 expiry = getNextExpiry(closeParams.currentOption);\n\n        IStrikeSelection selection =\n            IStrikeSelection(closeParams.strikeSelection);\n\n        bool isPut = vaultParams.isPut;\n        address underlying = vaultParams.underlying;\n        address asset = vaultParams.asset;\n\n        (strikePrice, delta) = closeParams.lastStrikeOverrideRound ==\n            vaultState.round\n            ? (closeParams.overriddenStrikePrice, selection.delta())\n            : selection.getStrikePrice(expiry, isPut);\n\n        require(strikePrice != 0, \"!strikePrice\");\n\n        // retrieve address if option already exists, or deploy it\n        otokenAddress = getOrDeployOtoken(\n            closeParams,\n            vaultParams,\n            underlying,\n            asset,\n            strikePrice,\n            expiry,\n            isPut\n        );\n\n        return (otokenAddress, strikePrice, delta);\n    }\n\n    /**\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\n     * @param otokenAddress is the address of the otoken\n     * @param vaultParams is the struct with vault general data\n     * @param collateralAsset is the address of the collateral asset\n     * @param USDC is the address of usdc\n     * @param delay is the delay between commitAndClose and rollToNextOption\n     */\n    function verifyOtoken(\n        address otokenAddress,\n        Vault.VaultParams storage vaultParams,\n        address collateralAsset,\n        address USDC,\n        uint256 delay\n    ) private view {\n        require(otokenAddress != address(0), \"!otokenAddress\");\n\n        IOtoken otoken = IOtoken(otokenAddress);\n        require(otoken.isPut() == vaultParams.isPut, \"Type mismatch\");\n        require(\n            otoken.underlyingAsset() == vaultParams.underlying,\n            \"Wrong underlyingAsset\"\n        );\n        require(\n            otoken.collateralAsset() == collateralAsset,\n            \"Wrong collateralAsset\"\n        );\n\n        // we just assume all options use USDC as the strike\n        require(otoken.strikeAsset() == USDC, \"strikeAsset != USDC\");\n\n        uint256 readyAt = block.timestamp.add(delay);\n        require(otoken.expiryTimestamp() >= readyAt, \"Expiry before delay\");\n    }\n\n    /**\n     * @param decimals is the decimals of the asset\n     * @param totalBalance is the vaults total balance of the asset\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\n     * @param lastQueuedWithdrawAmount is the total amount queued for withdrawals\n     * @param performanceFee is the perf fee percent to charge on premiums\n     * @param managementFee is the management fee percent to charge on the AUM\n     * @param currentQueuedWithdrawShares is amount of queued withdrawals from the current round\n     */\n    struct RolloverParams {\n        uint256 decimals;\n        uint256 totalBalance;\n        uint256 currentShareSupply;\n        uint256 lastQueuedWithdrawAmount;\n        uint256 performanceFee;\n        uint256 managementFee;\n        uint256 currentQueuedWithdrawShares;\n    }\n\n    /**\n     * @notice Calculate the shares to mint, new price per share, and\n      amount of funds to re-allocate as collateral for the new round\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\n     * @param params is the rollover parameters passed to compute the next state\n     * @return newLockedAmount is the amount of funds to allocate for the new round\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\n     * @return newPricePerShare is the price per share of the new round\n     * @return mintShares is the amount of shares to mint from deposits\n     * @return performanceFeeInAsset is the performance fee charged by vault\n     * @return totalVaultFee is the total amount of fee charged by vault\n     */\n    function rollover(\n        Vault.VaultState storage vaultState,\n        RolloverParams calldata params\n    )\n        external\n        view\n        returns (\n            uint256 newLockedAmount,\n            uint256 queuedWithdrawAmount,\n            uint256 newPricePerShare,\n            uint256 mintShares,\n            uint256 performanceFeeInAsset,\n            uint256 totalVaultFee\n        )\n    {\n        uint256 currentBalance = params.totalBalance;\n        uint256 pendingAmount = vaultState.totalPending;\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\n\n        // Deduct older queued withdraws so we don't charge fees on them\n        uint256 balanceForVaultFees =\n            currentBalance.sub(params.lastQueuedWithdrawAmount);\n\n        {\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycle\n                .getVaultFees(\n                balanceForVaultFees,\n                vaultState.lastLockedAmount,\n                vaultState.totalPending,\n                params.performanceFee,\n                params.managementFee\n            );\n        }\n\n        // Take into account the fee\n        // so we can calculate the newPricePerShare\n        currentBalance = currentBalance.sub(totalVaultFee);\n\n        {\n            newPricePerShare = ShareMath.pricePerShare(\n                params.currentShareSupply.sub(lastQueuedWithdrawShares),\n                currentBalance.sub(params.lastQueuedWithdrawAmount),\n                pendingAmount,\n                params.decimals\n            );\n\n            queuedWithdrawAmount = params.lastQueuedWithdrawAmount.add(\n                ShareMath.sharesToAsset(\n                    params.currentQueuedWithdrawShares,\n                    newPricePerShare,\n                    params.decimals\n                )\n            );\n\n            // After closing the short, if the options expire in-the-money\n            // vault pricePerShare would go down because vault's asset balance decreased.\n            // This ensures that the newly-minted shares do not take on the loss.\n            mintShares = ShareMath.assetToShares(\n                pendingAmount,\n                newPricePerShare,\n                params.decimals\n            );\n        }\n\n        return (\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\n            queuedWithdrawAmount,\n            newPricePerShare,\n            mintShares,\n            performanceFeeInAsset,\n            totalVaultFee\n        );\n    }\n\n    /**\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\n     * @param gammaController is the address of the opyn controller contract\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\n     * @param oTokenAddress is the address of the otoken to mint\n     * @param depositAmount is the amount of collateral to deposit\n     * @return the otoken mint amount\n     */\n    function createShort(\n        address gammaController,\n        address marginPool,\n        address oTokenAddress,\n        uint256 depositAmount\n    ) external returns (uint256) {\n        IController controller = IController(gammaController);\n        uint256 newVaultID =\n            (controller.getAccountVaultCounter(address(this))).add(1);\n\n        // An otoken's collateralAsset is the vault's `asset`\n        // So in the context of performing Opyn short operations we call them collateralAsset\n        IOtoken oToken = IOtoken(oTokenAddress);\n        address collateralAsset = oToken.collateralAsset();\n\n        uint256 collateralDecimals =\n            uint256(IERC20Detailed(collateralAsset).decimals());\n        uint256 mintAmount;\n\n        if (oToken.isPut()) {\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\n            // This is because of an issue with precision.\n            //\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\n            //\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\n            // We retain the dust in the vault so the calling contract can withdraw the\n            // actual locked amount + dust at settlement.\n            //\n            // To test this behavior, we can console.log\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\n            // to see how much dust (or excess collateral) is left behind.\n            mintAmount = depositAmount\n                .mul(10**Vault.OTOKEN_DECIMALS)\n                .mul(10**18) // we use 10**18 to give extra precision\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\n        } else {\n            mintAmount = depositAmount;\n\n            if (collateralDecimals > 8) {\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\n                if (mintAmount > scaleBy) {\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\n                }\n            }\n        }\n\n        // double approve to fix non-compliant ERC20s\n        IERC20 collateralToken = IERC20(collateralAsset);\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\n\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](3);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.OpenVault,\n            address(this), // owner\n            address(this), // receiver\n            address(0), // asset, otoken\n            newVaultID, // vaultId\n            0, // amount\n            0, //index\n            \"\" //data\n        );\n\n        actions[1] = IController.ActionArgs(\n            IController.ActionType.DepositCollateral,\n            address(this), // owner\n            address(this), // address to transfer from\n            collateralAsset, // deposited asset\n            newVaultID, // vaultId\n            depositAmount, // amount\n            0, //index\n            \"\" //data\n        );\n\n        actions[2] = IController.ActionArgs(\n            IController.ActionType.MintShortOption,\n            address(this), // owner\n            address(this), // address to transfer to\n            oTokenAddress, // option address\n            newVaultID, // vaultId\n            mintAmount, // amount\n            0, //index\n            \"\" //data\n        );\n\n        controller.operate(actions);\n\n        return mintAmount;\n    }\n\n    /**\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\n     calling SettleVault action, this assumption should hold.\n     * @param gammaController is the address of the opyn controller contract\n     * @return amount of collateral redeemed from the vault\n     */\n    function settleShort(address gammaController) external returns (uint256) {\n        IController controller = IController(gammaController);\n\n        // gets the currently active vault ID\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\n\n        GammaTypes.Vault memory vault =\n            controller.getVault(address(this), vaultID);\n\n        require(vault.shortOtokens.length > 0, \"No short\");\n\n        // An otoken's collateralAsset is the vault's `asset`\n        // So in the context of performing Opyn short operations we call them collateralAsset\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\n\n        // The short position has been previously closed, or all the otokens have been burned.\n        // So we return early.\n        if (address(collateralToken) == address(0)) {\n            return 0;\n        }\n\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\n        uint256 startCollateralBalance =\n            collateralToken.balanceOf(address(this));\n\n        // If it is after expiry, we need to settle the short position using the normal way\n        // Delete the vault and withdraw all remaining collateral from the vault\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](1);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.SettleVault,\n            address(this), // owner\n            address(this), // address to transfer to\n            address(0), // not used\n            vaultID, // vaultId\n            0, // not used\n            0, // not used\n            \"\" // not used\n        );\n\n        controller.operate(actions);\n\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\n\n        return endCollateralBalance.sub(startCollateralBalance);\n    }\n\n    /**\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\n     * It calls the `Redeem` action to claim the payout.\n     * @param gammaController is the address of the opyn controller contract\n     * @param oldOption is the address of the old option\n     * @param asset is the address of the vault's asset\n     * @return amount of asset received by exercising the option\n     */\n    function settleLong(\n        address gammaController,\n        address oldOption,\n        address asset\n    ) external returns (uint256) {\n        IController controller = IController(gammaController);\n\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\n\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\n            return 0;\n        }\n\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\n\n        // If it is after expiry, we need to redeem the profits\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](1);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.Redeem,\n            address(0), // not used\n            address(this), // address to send profits to\n            oldOption, // address of otoken\n            0, // not used\n            oldOptionBalance, // otoken balance\n            0, // not used\n            \"\" // not used\n        );\n\n        controller.operate(actions);\n\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\n\n        return endAssetBalance.sub(startAssetBalance);\n    }\n\n    /**\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\n     * only have a single vault open at any given time.\n     * @param gammaController is the address of the opyn controller contract\n     * @param currentOption is the address of the current option\n     * @return amount of collateral redeemed by burning otokens\n     */\n    function burnOtokens(address gammaController, address currentOption)\n        external\n        returns (uint256)\n    {\n        uint256 numOTokensToBurn =\n            IERC20(currentOption).balanceOf(address(this));\n\n        require(numOTokensToBurn > 0, \"No oTokens to burn\");\n\n        IController controller = IController(gammaController);\n\n        // gets the currently active vault ID\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\n\n        GammaTypes.Vault memory vault =\n            controller.getVault(address(this), vaultID);\n\n        require(vault.shortOtokens.length > 0, \"No short\");\n\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\n\n        uint256 startCollateralBalance =\n            collateralToken.balanceOf(address(this));\n\n        // Burning `amount` of oTokens from the ribbon vault,\n        // then withdrawing the corresponding collateral amount from the vault\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](2);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.BurnShortOption,\n            address(this), // owner\n            address(this), // address to transfer from\n            address(vault.shortOtokens[0]), // otoken address\n            vaultID, // vaultId\n            numOTokensToBurn, // amount\n            0, //index\n            \"\" //data\n        );\n\n        actions[1] = IController.ActionArgs(\n            IController.ActionType.WithdrawCollateral,\n            address(this), // owner\n            address(this), // address to transfer to\n            address(collateralToken), // withdrawn asset\n            vaultID, // vaultId\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\n                vault.shortAmounts[0]\n            ), // amount\n            0, //index\n            \"\" //data\n        );\n\n        controller.operate(actions);\n\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\n\n        return endCollateralBalance.sub(startCollateralBalance);\n    }\n\n    /**\n     * @notice Calculates the performance and management fee for this week's round\n     * @param currentBalance is the balance of funds held on the vault after closing short\n     * @param lastLockedAmount is the amount of funds locked from the previous round\n     * @param pendingAmount is the pending deposit amount\n     * @param performanceFeePercent is the performance fee pct.\n     * @param managementFeePercent is the management fee pct.\n     * @return performanceFeeInAsset is the performance fee\n     * @return managementFeeInAsset is the management fee\n     * @return vaultFee is the total fees\n     */\n    function getVaultFees(\n        uint256 currentBalance,\n        uint256 lastLockedAmount,\n        uint256 pendingAmount,\n        uint256 performanceFeePercent,\n        uint256 managementFeePercent\n    )\n        internal\n        pure\n        returns (\n            uint256 performanceFeeInAsset,\n            uint256 managementFeeInAsset,\n            uint256 vaultFee\n        )\n    {\n        // At the first round, currentBalance=0, pendingAmount>0\n        // so we just do not charge anything on the first round\n        uint256 lockedBalanceSansPending =\n            currentBalance > pendingAmount\n                ? currentBalance.sub(pendingAmount)\n                : 0;\n\n        uint256 _performanceFeeInAsset;\n        uint256 _managementFeeInAsset;\n        uint256 _vaultFee;\n\n        // Take performance fee and management fee ONLY if difference between\n        // last week and this week's vault deposits, taking into account pending\n        // deposits and withdrawals, is positive. If it is negative, last week's\n        // option expired ITM past breakeven, and the vault took a loss so we\n        // do not collect performance fee for last week\n        if (lockedBalanceSansPending > lastLockedAmount) {\n            _performanceFeeInAsset = performanceFeePercent > 0\n                ? lockedBalanceSansPending\n                    .sub(lastLockedAmount)\n                    .mul(performanceFeePercent)\n                    .div(100 * Vault.FEE_MULTIPLIER)\n                : 0;\n            _managementFeeInAsset = managementFeePercent > 0\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\n                    100 * Vault.FEE_MULTIPLIER\n                )\n                : 0;\n\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\n        }\n\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\n    }\n\n    /**\n     * @notice Either retrieves the option token if it already exists, or deploy it\n     * @param closeParams is the struct with details on previous option and strike selection details\n     * @param vaultParams is the struct with vault general data\n     * @param underlying is the address of the underlying asset of the option\n     * @param collateralAsset is the address of the collateral asset of the option\n     * @param strikePrice is the strike price of the option\n     * @param expiry is the expiry timestamp of the option\n     * @param isPut is whether the option is a put\n     * @return the address of the option\n     */\n    function getOrDeployOtoken(\n        CloseParams calldata closeParams,\n        Vault.VaultParams storage vaultParams,\n        address underlying,\n        address collateralAsset,\n        uint256 strikePrice,\n        uint256 expiry,\n        bool isPut\n    ) internal returns (address) {\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\n\n        address otokenFromFactory =\n            factory.getOtoken(\n                underlying,\n                closeParams.USDC,\n                collateralAsset,\n                strikePrice,\n                expiry,\n                isPut\n            );\n\n        if (otokenFromFactory != address(0)) {\n            return otokenFromFactory;\n        }\n\n        address otoken =\n            factory.createOtoken(\n                underlying,\n                closeParams.USDC,\n                collateralAsset,\n                strikePrice,\n                expiry,\n                isPut\n            );\n\n        verifyOtoken(\n            otoken,\n            vaultParams,\n            collateralAsset,\n            closeParams.USDC,\n            closeParams.delay\n        );\n\n        return otoken;\n    }\n\n    function getOTokenPremium(\n        address oTokenAddress,\n        address optionsPremiumPricer,\n        uint256 premiumDiscount\n    ) external view returns (uint256) {\n        return\n            _getOTokenPremium(\n                oTokenAddress,\n                optionsPremiumPricer,\n                premiumDiscount\n            );\n    }\n\n    function _getOTokenPremium(\n        address oTokenAddress,\n        address optionsPremiumPricer,\n        uint256 premiumDiscount\n    ) internal view returns (uint256) {\n        IOtoken newOToken = IOtoken(oTokenAddress);\n        IOptionsPremiumPricer premiumPricer =\n            IOptionsPremiumPricer(optionsPremiumPricer);\n\n        // Apply black-scholes formula (from rvol library) to option given its features\n        // and get price for 100 contracts denominated in the underlying asset for call option\n        // and USDC for put option\n        uint256 optionPremium =\n            premiumPricer.getPremium(\n                newOToken.strikePrice(),\n                newOToken.expiryTimestamp(),\n                newOToken.isPut()\n            );\n\n        // Apply a discount to incentivize arbitraguers\n        optionPremium = optionPremium.mul(premiumDiscount).div(\n            100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER\n        );\n\n        require(\n            optionPremium <= type(uint96).max,\n            \"optionPremium > type(uint96) max value!\"\n        );\n        require(optionPremium > 0, \"!optionPremium\");\n\n        return optionPremium;\n    }\n\n    /**\n     * @notice Starts the gnosis auction\n     * @param auctionDetails is the struct with all the custom parameters of the auction\n     * @return the auction id of the newly created auction\n     */\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\n        external\n        returns (uint256)\n    {\n        return GnosisAuction.startAuction(auctionDetails);\n    }\n\n    /**\n     * @notice Settles the gnosis auction\n     * @param gnosisEasyAuction is the contract address of Gnosis easy auction protocol\n     * @param auctionID is the auction ID of the gnosis easy auction\n     */\n    function settleAuction(address gnosisEasyAuction, uint256 auctionID)\n        internal\n    {\n        IGnosisAuction(gnosisEasyAuction).settleAuction(auctionID);\n    }\n\n    /**\n     * @notice Places a bid in an auction\n     * @param bidDetails is the struct with all the details of the\n      bid including the auction's id and how much to bid\n     */\n    function placeBid(GnosisAuction.BidDetails calldata bidDetails)\n        external\n        returns (\n            uint256 sellAmount,\n            uint256 buyAmount,\n            uint64 userId\n        )\n    {\n        return GnosisAuction.placeBid(bidDetails);\n    }\n\n    /**\n     * @notice Claims the oTokens belonging to the vault\n     * @param auctionSellOrder is the sell order of the bid\n     * @param gnosisEasyAuction is the address of the gnosis auction contract\n     holding custody to the funds\n     * @param counterpartyThetaVault is the address of the counterparty theta\n     vault of this delta vault\n     */\n    function claimAuctionOtokens(\n        Vault.AuctionSellOrder calldata auctionSellOrder,\n        address gnosisEasyAuction,\n        address counterpartyThetaVault\n    ) external {\n        GnosisAuction.claimAuctionOtokens(\n            auctionSellOrder,\n            gnosisEasyAuction,\n            counterpartyThetaVault\n        );\n    }\n\n    /**\n     * @notice Allocates the vault's minted options to the OptionsPurchaseQueue contract\n     * @dev Skipped if the optionsPurchaseQueue doesn't exist\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\n     * @param option is the minted option\n     * @param optionsAmount is the amount of options minted\n     * @param optionAllocation is the maximum % of options to allocate towards the purchase queue (will only allocate\n     *  up to the amount that is on the queue)\n     * @return allocatedOptions is the amount of options that ended up getting allocated to the OptionsPurchaseQueue\n     */\n    function allocateOptions(\n        address optionsPurchaseQueue,\n        address option,\n        uint256 optionsAmount,\n        uint256 optionAllocation\n    ) external returns (uint256 allocatedOptions) {\n        // Skip if optionsPurchaseQueue is address(0)\n        if (optionsPurchaseQueue != address(0)) {\n            allocatedOptions = optionsAmount.mul(optionAllocation).div(\n                100 * Vault.OPTION_ALLOCATION_MULTIPLIER\n            );\n            allocatedOptions = IOptionsPurchaseQueue(optionsPurchaseQueue)\n                .getOptionsAllocation(address(this), allocatedOptions);\n\n            if (allocatedOptions != 0) {\n                IERC20(option).approve(optionsPurchaseQueue, allocatedOptions);\n                IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\n                    allocatedOptions\n                );\n            }\n        }\n\n        return allocatedOptions;\n    }\n\n    /**\n     * @notice Sell the allocated options to the purchase queue post auction settlement\n     * @dev Reverts if the auction hasn't settled yet\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\n     * @param gnosisEasyAuction The address of the Gnosis Easy Auction contract\n     * @return totalPremiums Total premiums earnt by the vault\n     */\n    function sellOptionsToQueue(\n        address optionsPurchaseQueue,\n        address gnosisEasyAuction,\n        uint256 optionAuctionID\n    ) external returns (uint256) {\n        uint256 settlementPrice =\n            getAuctionSettlementPrice(gnosisEasyAuction, optionAuctionID);\n        require(settlementPrice != 0, \"!settlementPrice\");\n\n        return\n            IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\n                settlementPrice\n            );\n    }\n\n    /**\n     * @notice Gets the settlement price of a settled auction\n     * @param gnosisEasyAuction The address of the Gnosis Easy Auction contract\n     * @return settlementPrice Auction settlement price\n     */\n    function getAuctionSettlementPrice(\n        address gnosisEasyAuction,\n        uint256 optionAuctionID\n    ) public view returns (uint256) {\n        bytes32 clearingPriceOrder =\n            IGnosisAuction(gnosisEasyAuction)\n                .auctionData(optionAuctionID)\n                .clearingPriceOrder;\n\n        if (clearingPriceOrder == bytes32(0)) {\n            // Current auction hasn't settled yet\n            return 0;\n        } else {\n            // We decode the clearingPriceOrder to find the auction settlement price\n            // settlementPrice = clearingPriceOrder.sellAmount / clearingPriceOrder.buyAmount\n            return\n                (10**Vault.OTOKEN_DECIMALS)\n                    .mul(\n                    uint96(uint256(clearingPriceOrder)) // sellAmount\n                )\n                    .div(\n                    uint96(uint256(clearingPriceOrder) >> 96) // buyAmount\n                );\n        }\n    }\n\n    /**\n     * @notice Verify the constructor params satisfy requirements\n     * @param owner is the owner of the vault with critical permissions\n     * @param feeRecipient is the address to recieve vault performance and management fees\n     * @param performanceFee is the perfomance fee pct.\n     * @param tokenName is the name of the token\n     * @param tokenSymbol is the symbol of the token\n     * @param _vaultParams is the struct with vault general data\n     */\n    function verifyInitializerParams(\n        address owner,\n        address keeper,\n        address feeRecipient,\n        uint256 performanceFee,\n        uint256 managementFee,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        Vault.VaultParams calldata _vaultParams\n    ) external pure {\n        require(owner != address(0), \"!owner\");\n        require(keeper != address(0), \"!keeper\");\n        require(feeRecipient != address(0), \"!feeRecipient\");\n        require(\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\n            \"performanceFee >= 100%\"\n        );\n        require(\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\n            \"managementFee >= 100%\"\n        );\n        require(bytes(tokenName).length > 0, \"!tokenName\");\n        require(bytes(tokenSymbol).length > 0, \"!tokenSymbol\");\n\n        require(_vaultParams.asset != address(0), \"!asset\");\n        require(_vaultParams.underlying != address(0), \"!underlying\");\n        require(_vaultParams.minimumSupply > 0, \"!minimumSupply\");\n        require(_vaultParams.cap > 0, \"!cap\");\n        require(\n            _vaultParams.cap > _vaultParams.minimumSupply,\n            \"cap has to be higher than minimumSupply\"\n        );\n    }\n\n    /**\n     * @notice Gets the next option expiry timestamp\n     * @param currentOption is the otoken address that the vault is currently writing\n     */\n    function getNextExpiry(address currentOption)\n        internal\n        view\n        returns (uint256)\n    {\n        // uninitialized state\n        if (currentOption == address(0)) {\n            return getNextFriday(block.timestamp);\n        }\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\n\n        // After options expiry if no options are written for >1 week\n        // We need to give the ability continue writing options\n        if (block.timestamp > currentExpiry + 7 days) {\n            return getNextFriday(block.timestamp);\n        }\n        return getNextFriday(currentExpiry);\n    }\n\n    /**\n     * @notice Gets the next options expiry timestamp\n     * @param timestamp is the expiry timestamp of the current option\n     * Reference: https://codereview.stackexchange.com/a/33532\n     * Examples:\n     * getNextFriday(week 1 thursday) -> week 1 friday\n     * getNextFriday(week 1 friday) -> week 2 friday\n     * getNextFriday(week 1 saturday) -> week 2 friday\n     */\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\n\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\n        if (timestamp >= friday8am) {\n            friday8am += 7 days;\n        }\n        return friday8am;\n    }\n}"
    },
    "contracts/libraries/VaultLifecycleSpread.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {Vault} from \"./Vault.sol\";\nimport {ShareMath} from \"./ShareMath.sol\";\nimport {IStrikeSelectionSpread, ISpreadToken} from \"../interfaces/IHimalayan.sol\";\nimport {GnosisAuction} from \"./GnosisAuction.sol\";\nimport {\n    IOtokenFactory,\n    IOtoken,\n    IController,\n    IMarginCalculator,\n    GammaTypes\n} from \"../interfaces/GammaInterface.sol\";\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\nimport {IGnosisAuction} from \"../interfaces/IGnosisAuction.sol\";\nimport {SupportsNonCompliantERC20} from \"./SupportsNonCompliantERC20.sol\";\nimport {IOptionsPremiumPricer} from \"../interfaces/IHimalayan.sol\";\n\nlibrary VaultLifecycleSpread {\n    using SupportsNonCompliantERC20 for IERC20;\n    using Address for address;\n    using Clones for address;\n\n    struct CloseParams {\n        address OTOKEN_FACTORY;\n        address USDC;\n        address[] currentSpread;\n        uint256 delay;\n        address strikeSelection;\n        uint256 premiumDiscount;\n        address SPREAD_TOKEN_IMPL;\n    }\n\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\n    // Dividing by weeks per year requires doing (num * FEE_MULTIPLIER) / WEEKS_PER_YEAR\n    uint256 internal constant WEEKS_PER_YEAR = 52142857;\n\n    /**\n     * @notice Sets the next spread for the vault, and calculates its premium for the auction\n     * @param closeParams is the struct with details on previous spread and strike selection details\n     * @param vaultParams is the struct with vault general data\n     * @param vaultState is the struct with vault accounting state\n     * @return spread addresses of the new short and long options\n     * @return strikePrices is the strike prices of the options in spread\n     * @return deltas is the deltas of the new options in the spread\n     */\n    function commitAndClose(\n        CloseParams calldata closeParams,\n        Vault.VaultParams storage vaultParams,\n        Vault.VaultState storage vaultState\n    )\n        external\n        returns (\n            address[] memory spread,\n            uint256[] memory strikePrices,\n            uint256[] memory deltas,\n            address spreadToken\n        )\n    {\n        uint256 expiry = getNextExpiry(closeParams.currentSpread.length > 0 ? closeParams.currentSpread[0]:address(0));\n\n        IStrikeSelectionSpread selection =\n            IStrikeSelectionSpread(closeParams.strikeSelection);\n\n        bool isPut = vaultParams.isPut;\n        address underlying = vaultParams.underlying;\n        address asset = vaultParams.asset;\n\n        (strikePrices, deltas) = selection.getStrikePrices(expiry, isPut);\n\n        require(strikePrices.length == deltas.length, \"Invalid Data\");\n        for (uint256 i = 0; i < strikePrices.length; i++) {\n            require(strikePrices[i] != 0, \"!strikePrice\");\n        }\n        \n\n        // retrieve address if option already exists, or deploy it\n        spread = getOrDeployOtokens(\n            closeParams,\n            vaultParams,\n            underlying,\n            asset,\n            strikePrices,\n            expiry,\n            isPut\n        );\n\n        spreadToken = deploySpreadToken(\n            closeParams.SPREAD_TOKEN_IMPL,\n            \"Call Spread Token\",\n            \"hCST\",\n            asset,\n            underlying,\n            expiry,\n            isPut\n        );\n\n        return (spread, strikePrices, deltas, spreadToken);\n    }\n\n    function deploySpreadToken(\n        address impl,\n        string memory name,\n        string memory symbol,\n        address asset,\n        address underlying,\n        uint256 expiry,\n        bool isPut\n    )\n        private\n        returns(address)\n    {\n\n        address instance = impl.clone();\n        ISpreadToken(instance).init(\n            name,\n            symbol,\n            asset,\n            underlying,\n            expiry,\n            isPut\n        );\n\n        return instance;\n    }\n\n    /**\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\n     * @param otokenAddress is the address of the otoken\n     * @param vaultParams is the struct with vault general data\n     * @param collateralAsset is the address of the collateral asset\n     * @param USDC is the address of usdc\n     * @param delay is the delay between commitAndClose and rollToNextOption\n     */\n    function verifyOtoken(\n        address otokenAddress,\n        Vault.VaultParams storage vaultParams,\n        address collateralAsset,\n        address USDC,\n        uint256 delay\n    ) private view {\n        require(otokenAddress != address(0), \"!otokenAddress\");\n\n        IOtoken otoken = IOtoken(otokenAddress);\n        require(otoken.isPut() == vaultParams.isPut, \"Type mismatch\");\n        require(\n            otoken.underlyingAsset() == vaultParams.underlying,\n            \"Wrong underlyingAsset\"\n        );\n        require(\n            otoken.collateralAsset() == collateralAsset,\n            \"Wrong collateralAsset\"\n        );\n\n        // we just assume all options use USDC as the strike\n        require(otoken.strikeAsset() == USDC, \"strikeAsset != USDC\");\n\n        uint256 readyAt = block.timestamp  + delay;\n        require(otoken.expiryTimestamp() >= readyAt, \"Expiry before delay\");\n    }\n\n    /**\n     * @param decimals is the decimals of the asset\n     * @param totalBalance is the vaults total balance of the asset\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\n     * @param lastQueuedWithdrawAmount is the total amount queued for withdrawals\n     * @param performanceFee is the perf fee percent to charge on premiums\n     * @param managementFee is the management fee percent to charge on the AUM\n     * @param currentQueuedWithdrawShares is amount of queued withdrawals from the current round\n     */\n    struct RolloverParams {\n        uint256 decimals;\n        uint256 totalBalance;\n        uint256 currentShareSupply;\n        uint256 lastQueuedWithdrawAmount;\n        uint256 performanceFee;\n        uint256 managementFee;\n        uint256 currentQueuedWithdrawShares;\n    }\n\n    /**\n     * @notice Calculate the shares to mint, new price per share, and\n      amount of funds to re-allocate as collateral for the new round\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\n     * @param params is the rollover parameters passed to compute the next state\n     * @return newLockedAmount is the amount of funds to allocate for the new round\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\n     * @return newPricePerShare is the price per share of the new round\n     * @return mintShares is the amount of shares to mint from deposits\n     * @return performanceFeeInAsset is the performance fee charged by vault\n     * @return totalVaultFee is the total amount of fee charged by vault\n     */\n    function rollover(\n        Vault.VaultState storage vaultState,\n        RolloverParams calldata params\n    )\n        external\n        view\n        returns (\n            uint256 newLockedAmount,\n            uint256 queuedWithdrawAmount,\n            uint256 newPricePerShare,\n            uint256 mintShares,\n            uint256 performanceFeeInAsset,\n            uint256 totalVaultFee\n        )\n    {\n        uint256 currentBalance = params.totalBalance;\n        uint256 pendingAmount = vaultState.totalPending;\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\n\n        // Deduct older queued withdraws so we don't charge fees on them\n        uint256 balanceForVaultFees =\n            currentBalance - params.lastQueuedWithdrawAmount;\n\n        {\n            (performanceFeeInAsset, , totalVaultFee) = VaultLifecycleSpread\n                .getVaultFees(\n                balanceForVaultFees,\n                vaultState.lastLockedAmount,\n                vaultState.totalPending,\n                params.performanceFee,\n                params.managementFee\n            );\n        }\n\n        // Take into account the fee\n        // so we can calculate the newPricePerShare\n        currentBalance = currentBalance - totalVaultFee;\n\n        {\n            newPricePerShare = ShareMath.pricePerShare(\n                params.currentShareSupply - lastQueuedWithdrawShares,\n                currentBalance - params.lastQueuedWithdrawAmount,\n                pendingAmount,\n                params.decimals\n            );\n\n            queuedWithdrawAmount = params.lastQueuedWithdrawAmount +\n                ShareMath.sharesToAsset(\n                    params.currentQueuedWithdrawShares,\n                    newPricePerShare,\n                    params.decimals\n                );\n\n            // After closing the short, if the options expire in-the-money\n            // vault pricePerShare would go down because vault's asset balance decreased.\n            // This ensures that the newly-minted shares do not take on the loss.\n            mintShares = ShareMath.assetToShares(\n                pendingAmount,\n                newPricePerShare,\n                params.decimals\n            );\n        }\n\n        return (\n            currentBalance - queuedWithdrawAmount, // new locked balance subtracts the queued withdrawals\n            queuedWithdrawAmount,\n            newPricePerShare,\n            mintShares,\n            performanceFeeInAsset,\n            totalVaultFee\n        );\n    }\n\n    /**\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\n     * @param gammaController is the address of the opyn controller contract\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\n     * @param spread Spread oTokens\n     * @param depositAmount is the amount of collateral to deposit\n     * @param newVault whether to create new vault or not\n     * @param spreadToken Spread Token\n     * @return mintAmount spreadToken mint amount\n     * @return collateralUsed collateral amount used to create spread\n     */\n    function createSpread(\n        address gammaController,\n        address marginPool,\n        address[] calldata spread,\n        uint256 depositAmount,\n        address spreadToken,\n        bool newVault\n    ) public returns (uint256 mintAmount, uint256 collateralUsed) {\n        \n        // An otoken's collateralAsset is the vault's `asset`\n        // So in the context of performing Opyn short operations we call them collateralAsset\n        // Assuming both oTokens in the spread has same collateral\n        IOtoken oToken = IOtoken(spread[0]);\n        address collateralAsset = oToken.collateralAsset();\n        {\n            uint256 collateralDecimals =\n            uint256(IERC20Detailed(collateralAsset).decimals());\n\n            if (oToken.isPut()) {\n                // For minting puts, there will be instances where the full depositAmount will not be used for minting.\n                // This is because of an issue with precision.\n                //\n                // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\n                // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\n                // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\n                //\n                // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\n                // We retain the dust in the vault so the calling contract can withdraw the\n                // actual locked amount + dust at settlement.\n                //\n                // To test this behavior, we can console.log\n                // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\n                // to see how much dust (or excess collateral) is left behind.\n                mintAmount = (\n                    depositAmount\n                    * (10**Vault.OTOKEN_DECIMALS)\n                    * (10**18) // we use 10**18 to give extra precision\n                ) / (oToken.strikePrice() * (10**(10 + collateralDecimals)));\n            } else {\n                mintAmount = depositAmount;\n\n                if (collateralDecimals > 8) {\n                    uint256 scaleBy = 10**(collateralDecimals - 8); // oTokens have 8 decimals\n                    if (mintAmount > scaleBy) {\n                        mintAmount = depositAmount / (scaleBy); // scale down from 10**18 to 10**8\n                    }\n                }\n            }\n        }\n\n        {\n            // double approve to fix non-compliant ERC20s\n            IERC20 collateralToken = IERC20(collateralAsset);\n            collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\n\n            if (newVault) {\n                IController controller = IController(gammaController);\n                uint256 vaultId =\n                    (controller.getAccountVaultCounter(address(this)));\n                vaultId = vaultId + 1;\n\n                IController.ActionArgs[] memory actions =\n                    new IController.ActionArgs[](3);\n\n                actions[0] = IController.ActionArgs(\n                    IController.ActionType.OpenVault,\n                    address(this), // owner\n                    address(this), // receiver\n                    address(0), // asset, otoken\n                    vaultId, // vaultId\n                    0, // amount\n                    0, //index\n                    \"\" //data\n                );\n\n                actions[1] = IController.ActionArgs(\n                    IController.ActionType.DepositCollateral,\n                    address(this), // owner\n                    address(this), // address to transfer from\n                    collateralAsset, // deposited asset\n                    vaultId, // vaultId\n                    depositAmount, // amount\n                    0, //index\n                    \"\" //data\n                );\n\n                actions[2] = IController.ActionArgs(\n                    IController.ActionType.MintShortOption,\n                    address(this), // owner\n                    address(this), // address to transfer to\n                    spread[0], // short option address\n                    vaultId, // vaultId\n                    mintAmount, // amount\n                    0, //index\n                    \"\" //data\n                );\n\n                controller.operate(actions);\n            }\n\n            else {\n                IController controller = IController(gammaController);\n                uint256 vaultId =\n                    (controller.getAccountVaultCounter(address(this)));\n                IController.ActionArgs[] memory actions =\n                    new IController.ActionArgs[](2);\n\n                actions[0] = IController.ActionArgs(\n                    IController.ActionType.DepositCollateral,\n                    address(this), // owner\n                    address(this), // address to transfer from\n                    collateralAsset, // deposited asset\n                    vaultId, // vaultId\n                    depositAmount, // amount\n                    0, //index\n                    \"\" //data\n                );\n\n                actions[1] = IController.ActionArgs(\n                    IController.ActionType.MintShortOption,\n                    address(this), // owner\n                    address(this), // address to transfer to\n                    spread[0], // short option address\n                    vaultId, // vaultId\n                    mintAmount, // amount\n                    0, //index\n                    \"\" //data\n                );\n\n                controller.operate(actions);\n            }\n            \n        \n        }\n        \n        _mintSpread(\n            gammaController,\n            marginPool,\n            spread,\n            mintAmount,\n            spreadToken\n        );\n\n        collateralUsed = _depositAndWithdrawCollateral(\n            gammaController,\n            marginPool,\n            collateralAsset,\n            depositAmount,\n            spread,\n            mintAmount\n        );\n\n        return (mintAmount, collateralUsed);\n    }\n\n    function _mintSpread(\n        address gammaController,\n        address marginPool,\n        address[] memory spread,\n        uint256 mintAmount,\n        address spreadToken\n    )\n        private\n    {\n        IController controller = IController(gammaController);\n        IERC20 shortOption= IERC20(spread[0]);\n        shortOption.safeApproveNonCompliant(marginPool, mintAmount);\n\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](2);\n        \n        actions[0] = IController.ActionArgs(\n            IController.ActionType.DepositLongOption,\n            spreadToken, // vault owner\n            address(this), // deposit from this address\n            spread[0], // collateral otoken\n            1, // vaultId\n            mintAmount, // amount\n            0, // index\n            \"\" // data\n        );\n\n        actions[1] = IController.ActionArgs(\n          IController.ActionType.MintShortOption,\n          spreadToken, // vault owner\n          address(this), // mint to this address\n          spread[1], // otoken\n          1, // vaultId\n          mintAmount, // amount\n          0, // index\n          \"\" // data\n        );\n\n        controller.operate(actions);\n    }\n\n    function _depositAndWithdrawCollateral(\n        address gammaController,\n        address marginPool,\n        address collateralAsset,\n        uint256 collateralDeposited,\n        address[] memory spread,\n        uint256 mintAmount\n    )\n        private\n        returns(uint256 collateralUsed)\n    {\n        IController controller = IController(gammaController);\n        uint256 vaultId =\n            (controller.getAccountVaultCounter(address(this)));\n            \n        IMarginCalculator calculator = IMarginCalculator(controller.calculator());\n\n        IERC20 longOption = IERC20(spread[1]);\n        longOption.safeApproveNonCompliant(marginPool, mintAmount);\n\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](1);\n        \n        actions[0] = IController.ActionArgs(\n            IController.ActionType.DepositLongOption,\n            address(this), // vault owner\n            address(this), // deposit from this address\n            spread[1], // LONG otoken\n            vaultId, // vaultId\n            mintAmount, // amount\n            0, // index\n            \"\" // data\n        );\n\n        controller.operate(actions);\n\n        (GammaTypes.MarginVault memory vault, uint256 typeVault, ) = controller.getVaultWithDetails(address(this), vaultId);\n        (uint256 excessCollateral, bool isValidVault) = calculator.getExcessCollateral(vault, typeVault);\n\n        actions[0] = IController.ActionArgs(\n          IController.ActionType.WithdrawCollateral,\n          address(this), // vault owner\n          address(this), // mint to this address\n          collateralAsset, // otoken\n          vaultId, // vaultId\n          excessCollateral, // amount\n          0, // index\n          \"\" // data\n        );\n\n        controller.operate(actions);\n\n        return (collateralDeposited - excessCollateral);\n    }\n\n    /**\n     * @notice Calculates the performance and management fee for this week's round\n     * @param currentBalance is the balance of funds held on the vault after closing short\n     * @param lastLockedAmount is the amount of funds locked from the previous round\n     * @param pendingAmount is the pending deposit amount\n     * @param performanceFeePercent is the performance fee pct.\n     * @param managementFeePercent is the management fee pct.\n     * @return performanceFeeInAsset is the performance fee\n     * @return managementFeeInAsset is the management fee\n     * @return vaultFee is the total fees\n     */\n    function getVaultFees(\n        uint256 currentBalance,\n        uint256 lastLockedAmount,\n        uint256 pendingAmount,\n        uint256 performanceFeePercent,\n        uint256 managementFeePercent\n    )\n        internal\n        pure\n        returns (\n            uint256 performanceFeeInAsset,\n            uint256 managementFeeInAsset,\n            uint256 vaultFee\n        )\n    {\n        // At the first round, currentBalance=0, pendingAmount>0\n        // so we just do not charge anything on the first round\n        uint256 lockedBalanceSansPending =\n            currentBalance > pendingAmount\n                ? currentBalance - pendingAmount\n                : 0;\n\n        uint256 _performanceFeeInAsset;\n        uint256 _managementFeeInAsset;\n        uint256 _vaultFee;\n\n        // Take performance fee and management fee ONLY if difference between\n        // last week and this week's vault deposits, taking into account pending\n        // deposits and withdrawals, is positive. If it is negative, last week's\n        // option expired ITM past breakeven, and the vault took a loss so we\n        // do not collect performance fee for last week\n        if (lockedBalanceSansPending > lastLockedAmount) {\n            _performanceFeeInAsset = performanceFeePercent > 0\n                ? ((lockedBalanceSansPending - lastLockedAmount) * performanceFeePercent)/ (100 * Vault.FEE_MULTIPLIER)\n                : 0;\n            _managementFeeInAsset = managementFeePercent > 0\n                ? (lockedBalanceSansPending * managementFeePercent) / (100 * Vault.FEE_MULTIPLIER)\n                : 0;\n\n            _vaultFee = _performanceFeeInAsset + _managementFeeInAsset;\n        }\n\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\n    }\n\n    /**\n     * @notice Either retrieves the option tokens if they already exists, or deploys them\n     * @param closeParams is the struct with details on previous option and strike selection details\n     * @param vaultParams is the struct with vault general data\n     * @param underlying is the address of the underlying asset of the option\n     * @param collateralAsset is the address of the collateral asset of the option\n     * @param strikePrices strike prices of the options to be minted\n     * @param expiry is the expiry timestamp of the option\n     * @param isPut is whether the option is a put\n     * @return spread address of the option\n     */\n    function getOrDeployOtokens(\n        CloseParams calldata closeParams,\n        Vault.VaultParams storage vaultParams,\n        address underlying,\n        address collateralAsset,\n        uint256[] memory strikePrices,\n        uint256 expiry,\n        bool isPut\n    ) internal returns (address[] memory) {\n        IOtokenFactory factory = IOtokenFactory(closeParams.OTOKEN_FACTORY);\n        address[] memory spread = new address[](strikePrices.length);\n\n        for (uint8 i = 0; i < strikePrices.length; i++) {\n            spread[i] = getOrDeployOToken(\n                closeParams.OTOKEN_FACTORY,\n                underlying,\n                closeParams.USDC,\n                collateralAsset,\n                strikePrices[i],\n                expiry,\n                isPut\n            );\n            verifyOtoken(\n                spread[i],\n                vaultParams,\n                collateralAsset,\n                closeParams.USDC,\n                closeParams.delay\n            );\n\n        }\n        return spread;\n    }\n\n\n    /**\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\n     calling SettleVault action, this assumption should hold.\n     * @param gammaController is the address of the opyn controller contract\n     * @param spreadToken Token which holds other vault of the strategy\n     * @return amount of collateral redeemed from the vault\n     */\n    function settleSpread(address gammaController, address spreadToken) external returns (uint256) {\n        IController controller = IController(gammaController);\n\n        // gets the currently active vault ID\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\n\n        GammaTypes.Vault memory vault =\n            controller.getVault(address(this), vaultID);\n\n        require(vault.shortOtokens.length > 0, \"No short\");\n\n        // An otoken's collateralAsset is the vault's `asset`\n        // So in the context of performing Opyn short operations we call them collateralAsset\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\n\n        // The short position has been previously closed, or all the otokens have been burned.\n        // So we return early.\n        if (address(collateralToken) == address(0)) {\n            return 0;\n        }\n\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\n        uint256 startCollateralBalance =\n            collateralToken.balanceOf(address(this));\n\n        // If it is after expiry, we need to settle the short position using the normal way\n        // Delete the vault and withdraw all remaining collateral from the vault\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](1);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.SettleVault,\n            address(this), // owner\n            address(this), // address to transfer to\n            address(0), // not used\n            vaultID, // vaultId\n            0, // not used\n            0, // not used\n            \"\" // not used\n        );\n\n        controller.operate(actions);\n\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\n\n        ISpreadToken(spreadToken).settleVault();\n        ISpreadToken(spreadToken).burnAndClaim();\n\n        return endCollateralBalance - startCollateralBalance;\n    }\n\n    function getOrDeployOToken(\n        address _factory,\n        address _underlyingAsset,\n        address _strikeAsset,\n        address _collateralAsset,\n        uint256 _strikePrice,\n        uint256 _expiry,\n        bool _isPut\n\n    ) private returns (address) {\n        IOtokenFactory factory = IOtokenFactory(_factory);\n\n        address otokenFromFactory =\n            factory.getOtoken(\n                _underlyingAsset,\n                _strikeAsset,\n                _collateralAsset,\n                _strikePrice,\n                _expiry,\n                _isPut\n            );\n\n        if (otokenFromFactory != address(0)) {\n            return otokenFromFactory;\n        }\n\n        address otoken =\n            factory.createOtoken(\n                _underlyingAsset,\n                _strikeAsset,\n                _collateralAsset,\n                _strikePrice,\n                _expiry,\n                _isPut\n            );\n\n        return otoken;\n    }\n\n    /**\n     * @notice Starts the gnosis auction\n     * @param auctionDetails is the struct with all the custom parameters of the auction\n     * @return the auction id of the newly created auction\n     */\n    function startAuction(GnosisAuction.AuctionDetails calldata auctionDetails)\n        external\n        returns (uint256)\n    {\n        return GnosisAuction.startAuction(auctionDetails);\n    }\n\n    /**\n     * @notice Verify the constructor params satisfy requirements\n     * @param owner is the owner of the vault with critical permissions\n     * @param feeRecipient is the address to recieve vault performance and management fees\n     * @param performanceFee is the perfomance fee pct.\n     * @param tokenName is the name of the token\n     * @param tokenSymbol is the symbol of the token\n     * @param _vaultParams is the struct with vault general data\n     */\n    function verifyInitializerParams(\n        address owner,\n        address keeper,\n        address feeRecipient,\n        uint256 performanceFee,\n        uint256 managementFee,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        Vault.VaultParams calldata _vaultParams\n    ) external pure {\n        require(owner != address(0), \"!owner\");\n        require(keeper != address(0), \"!keeper\");\n        require(feeRecipient != address(0), \"!feeRecipient\");\n        require(\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\n            \"performanceFee >= 100%\"\n        );\n        require(\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\n            \"managementFee >= 100%\"\n        );\n        require(bytes(tokenName).length > 0, \"!tokenName\");\n        require(bytes(tokenSymbol).length > 0, \"!tokenSymbol\");\n\n        require(_vaultParams.asset != address(0), \"!asset\");\n        require(_vaultParams.underlying != address(0), \"!underlying\");\n        require(_vaultParams.minimumSupply > 0, \"!minimumSupply\");\n        require(_vaultParams.cap > 0, \"!cap\");\n        require(\n            _vaultParams.cap > _vaultParams.minimumSupply,\n            \"cap has to be higher than minimumSupply\"\n        );\n    }\n\n    /**\n     * @notice Gets the next option expiry timestamp\n     * @param currentSpread is the otoken address that the vault is currently writing\n     */\n    function getNextExpiry(address currentSpread)\n        internal\n        view\n        returns (uint256)\n    {\n        if (currentSpread == address(0)) {\n            return getNextDay(block.timestamp);\n        }\n        uint256 currentExpiry = IOtoken(currentSpread).expiryTimestamp();\n\n        // After options expiry if no options are written for >1 week\n        // We need to give the ability continue writing options\n        if (block.timestamp > currentExpiry + 1 days) {\n            return getNextDay(block.timestamp);\n        }\n        return getNextDay(currentExpiry);\n\n\n        //TODO UNCOMMENT THIS\n        // uninitialized state\n        /**if (currentOption == address(0)) {\n            return getNextFriday(block.timestamp);\n        }\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\n        // After options expiry if no options are written for >1 week\n        // We need to give the ability continue writing options\n        if (block.timestamp > currentExpiry + 7 days) {\n            return getNextFriday(block.timestamp);\n        }\n        return getNextFriday(currentExpiry);\n        */\n    }\n\n    /**\n     * @notice Gets the next options expiry timestamp\n     * @param timestamp is the expiry timestamp of the current option\n     * Reference: https://codereview.stackexchange.com/a/33532\n     * Examples:\n     * getNextFriday(week 1 thursday) -> week 1 friday\n     * getNextFriday(week 1 friday) -> week 2 friday\n     * getNextFriday(week 1 saturday) -> week 2 friday\n     */\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\n\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\n        if (timestamp >= friday8am) {\n            friday8am += 7 days;\n        }\n        return friday8am;\n    }\n\n    //TODO: REMOVE THIS\n    function getNextDay(uint256 timestamp) internal pure returns (uint256) {\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\n        uint256 nextDay = timestamp + 1 days;\n        uint256 nextDay8am = nextDay - (nextDay % (24 hours)) + (8 hours);\n\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\n        if (timestamp >= nextDay8am) {\n            nextDay8am += 1 days;\n        }\n        return nextDay8am;\n    }\n}\n"
    },
    "contracts/libraries/VaultLifecycleWithSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Vault} from \"./Vault.sol\";\nimport {ShareMath} from \"./ShareMath.sol\";\nimport {IStrikeSelection} from \"../interfaces/IRibbon.sol\";\nimport {GnosisAuction} from \"./GnosisAuction.sol\";\nimport {\n    IOtokenFactory,\n    IOtoken,\n    IController,\n    GammaTypes\n} from \"../interfaces/GammaInterface.sol\";\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\nimport {ISwap} from \"../interfaces/ISwap.sol\";\nimport {IOptionsPurchaseQueue} from \"../interfaces/IOptionsPurchaseQueue.sol\";\nimport {SupportsNonCompliantERC20} from \"./SupportsNonCompliantERC20.sol\";\nimport {IOptionsPremiumPricer} from \"../interfaces/IRibbon.sol\";\n\nlibrary VaultLifecycleWithSwap {\n    using SafeMath for uint256;\n    using SupportsNonCompliantERC20 for IERC20;\n    using SafeERC20 for IERC20;\n\n    struct CommitParams {\n        address OTOKEN_FACTORY;\n        address USDC;\n        address collateralAsset;\n        address currentOption;\n        uint256 delay;\n        uint16 lastStrikeOverrideRound;\n        uint256 overriddenStrikePrice;\n        address strikeSelection;\n        address optionsPremiumPricer;\n    }\n\n    /**\n     * @notice Sets the next option the vault will be shorting, and calculates its premium for the auction\n     * @param commitParams is the struct with details on previous option and strike selection details\n     * @param vaultParams is the struct with vault general data\n     * @param vaultState is the struct with vault accounting state\n     * @return otokenAddress is the address of the new option\n     * @return strikePrice is the strike price of the new option\n     * @return delta is the delta of the new option\n     */\n    function commitNextOption(\n        CommitParams calldata commitParams,\n        Vault.VaultParams storage vaultParams,\n        Vault.VaultState storage vaultState\n    )\n        external\n        returns (\n            address otokenAddress,\n            uint256 strikePrice,\n            uint256 delta\n        )\n    {\n        uint256 expiry = getNextExpiry(commitParams.currentOption);\n\n        IStrikeSelection selection =\n            IStrikeSelection(commitParams.strikeSelection);\n\n        bool isPut = vaultParams.isPut;\n        address underlying = vaultParams.underlying;\n\n        (strikePrice, delta) = commitParams.lastStrikeOverrideRound ==\n            vaultState.round\n            ? (commitParams.overriddenStrikePrice, selection.delta())\n            : selection.getStrikePrice(expiry, isPut);\n\n        require(strikePrice != 0, \"!strikePrice\");\n\n        // retrieve address if option already exists, or deploy it\n        otokenAddress = getOrDeployOtoken(\n            commitParams,\n            vaultParams,\n            underlying,\n            strikePrice,\n            expiry,\n            isPut\n        );\n\n        return (otokenAddress, strikePrice, delta);\n    }\n\n    /**\n     * @notice Verify the otoken has the correct parameters to prevent vulnerability to opyn contract changes\n     * @param otokenAddress is the address of the otoken\n     * @param vaultParams is the struct with vault general data\n     * @param collateralAsset is the address of the collateral asset\n     * @param USDC is the address of usdc\n     * @param delay is the delay between commitAndClose and rollToNextOption\n     */\n    function verifyOtoken(\n        address otokenAddress,\n        Vault.VaultParams storage vaultParams,\n        address collateralAsset,\n        address USDC,\n        uint256 delay\n    ) private view {\n        require(otokenAddress != address(0), \"!otokenAddress\");\n\n        IOtoken otoken = IOtoken(otokenAddress);\n        require(otoken.isPut() == vaultParams.isPut, \"Type mismatch\");\n        require(\n            otoken.underlyingAsset() == vaultParams.underlying,\n            \"Wrong underlyingAsset\"\n        );\n        require(\n            otoken.collateralAsset() == collateralAsset,\n            \"Wrong collateralAsset\"\n        );\n\n        // we just assume all options use USDC as the strike\n        require(otoken.strikeAsset() == USDC, \"strikeAsset != USDC\");\n\n        uint256 readyAt = block.timestamp.add(delay);\n        require(otoken.expiryTimestamp() >= readyAt, \"Expiry before delay\");\n    }\n\n    /**\n     * @param decimals is the decimals of the asset\n     * @param totalBalance is the vault's total asset balance\n     * @param currentShareSupply is the supply of the shares invoked with totalSupply()\n     * @param lastQueuedWithdrawAmount is the amount queued for withdrawals from last round\n     * @param performanceFee is the perf fee percent to charge on premiums\n     * @param managementFee is the management fee percent to charge on the AUM\n     */\n    struct CloseParams {\n        uint256 decimals;\n        uint256 totalBalance;\n        uint256 currentShareSupply;\n        uint256 lastQueuedWithdrawAmount;\n        uint256 performanceFee;\n        uint256 managementFee;\n        uint256 currentQueuedWithdrawShares;\n    }\n\n    /**\n     * @notice Calculate the shares to mint, new price per share, and\n      amount of funds to re-allocate as collateral for the new round\n     * @param vaultState is the storage variable vaultState passed from RibbonVault\n     * @param params is the rollover parameters passed to compute the next state\n     * @return newLockedAmount is the amount of funds to allocate for the new round\n     * @return queuedWithdrawAmount is the amount of funds set aside for withdrawal\n     * @return newPricePerShare is the price per share of the new round\n     * @return mintShares is the amount of shares to mint from deposits\n     * @return performanceFeeInAsset is the performance fee charged by vault\n     * @return totalVaultFee is the total amount of fee charged by vault\n     */\n    function closeRound(\n        Vault.VaultState storage vaultState,\n        CloseParams calldata params\n    )\n        external\n        view\n        returns (\n            uint256 newLockedAmount,\n            uint256 queuedWithdrawAmount,\n            uint256 newPricePerShare,\n            uint256 mintShares,\n            uint256 performanceFeeInAsset,\n            uint256 totalVaultFee\n        )\n    {\n        uint256 currentBalance = params.totalBalance;\n        uint256 pendingAmount = vaultState.totalPending;\n        // Total amount of queued withdrawal shares from previous rounds (doesn't include the current round)\n        uint256 lastQueuedWithdrawShares = vaultState.queuedWithdrawShares;\n\n        // Deduct older queued withdraws so we don't charge fees on them\n        uint256 balanceForVaultFees =\n            currentBalance.sub(params.lastQueuedWithdrawAmount);\n\n        {\n            (performanceFeeInAsset, , totalVaultFee) = getVaultFees(\n                balanceForVaultFees,\n                vaultState.lastLockedAmount,\n                vaultState.totalPending,\n                params.performanceFee,\n                params.managementFee\n            );\n        }\n\n        // Take into account the fee\n        // so we can calculate the newPricePerShare\n        currentBalance = currentBalance.sub(totalVaultFee);\n\n        {\n            newPricePerShare = ShareMath.pricePerShare(\n                params.currentShareSupply.sub(lastQueuedWithdrawShares),\n                currentBalance.sub(params.lastQueuedWithdrawAmount),\n                pendingAmount,\n                params.decimals\n            );\n\n            queuedWithdrawAmount = params.lastQueuedWithdrawAmount.add(\n                ShareMath.sharesToAsset(\n                    params.currentQueuedWithdrawShares,\n                    newPricePerShare,\n                    params.decimals\n                )\n            );\n\n            // After closing the short, if the options expire in-the-money\n            // vault pricePerShare would go down because vault's asset balance decreased.\n            // This ensures that the newly-minted shares do not take on the loss.\n            mintShares = ShareMath.assetToShares(\n                pendingAmount,\n                newPricePerShare,\n                params.decimals\n            );\n        }\n\n        return (\n            currentBalance.sub(queuedWithdrawAmount), // new locked balance subtracts the queued withdrawals\n            queuedWithdrawAmount,\n            newPricePerShare,\n            mintShares,\n            performanceFeeInAsset,\n            totalVaultFee\n        );\n    }\n\n    /**\n     * @notice Creates the actual Opyn short position by depositing collateral and minting otokens\n     * @param gammaController is the address of the opyn controller contract\n     * @param marginPool is the address of the opyn margin contract which holds the collateral\n     * @param oTokenAddress is the address of the otoken to mint\n     * @param depositAmount is the amount of collateral to deposit\n     * @return the otoken mint amount\n     */\n    function createShort(\n        address gammaController,\n        address marginPool,\n        address oTokenAddress,\n        uint256 depositAmount\n    ) external returns (uint256) {\n        IController controller = IController(gammaController);\n        uint256 newVaultID =\n            (controller.getAccountVaultCounter(address(this))).add(1);\n\n        // An otoken's collateralAsset is the vault's `asset`\n        // So in the context of performing Opyn short operations we call them collateralAsset\n        IOtoken oToken = IOtoken(oTokenAddress);\n        address collateralAsset = oToken.collateralAsset();\n\n        uint256 collateralDecimals =\n            uint256(IERC20Detailed(collateralAsset).decimals());\n        uint256 mintAmount;\n\n        if (oToken.isPut()) {\n            // For minting puts, there will be instances where the full depositAmount will not be used for minting.\n            // This is because of an issue with precision.\n            //\n            // For ETH put options, we are calculating the mintAmount (10**8 decimals) using\n            // the depositAmount (10**18 decimals), which will result in truncation of decimals when scaling down.\n            // As a result, there will be tiny amounts of dust left behind in the Opyn vault when minting put otokens.\n            //\n            // For simplicity's sake, we do not refund the dust back to the address(this) on minting otokens.\n            // We retain the dust in the vault so the calling contract can withdraw the\n            // actual locked amount + dust at settlement.\n            //\n            // To test this behavior, we can console.log\n            // MarginCalculatorInterface(0x7A48d10f372b3D7c60f6c9770B91398e4ccfd3C7).getExcessCollateral(vault)\n            // to see how much dust (or excess collateral) is left behind.\n            mintAmount = depositAmount\n                .mul(10**Vault.OTOKEN_DECIMALS)\n                .mul(10**18) // we use 10**18 to give extra precision\n                .div(oToken.strikePrice().mul(10**(10 + collateralDecimals)));\n        } else {\n            mintAmount = depositAmount;\n\n            if (collateralDecimals > 8) {\n                uint256 scaleBy = 10**(collateralDecimals.sub(8)); // oTokens have 8 decimals\n                if (mintAmount > scaleBy) {\n                    mintAmount = depositAmount.div(scaleBy); // scale down from 10**18 to 10**8\n                }\n            }\n        }\n\n        // double approve to fix non-compliant ERC20s\n        IERC20 collateralToken = IERC20(collateralAsset);\n        collateralToken.safeApproveNonCompliant(marginPool, depositAmount);\n\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](3);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.OpenVault,\n            address(this), // owner\n            address(this), // receiver\n            address(0), // asset, otoken\n            newVaultID, // vaultId\n            0, // amount\n            0, //index\n            \"\" //data\n        );\n\n        actions[1] = IController.ActionArgs(\n            IController.ActionType.DepositCollateral,\n            address(this), // owner\n            address(this), // address to transfer from\n            collateralAsset, // deposited asset\n            newVaultID, // vaultId\n            depositAmount, // amount\n            0, //index\n            \"\" //data\n        );\n\n        actions[2] = IController.ActionArgs(\n            IController.ActionType.MintShortOption,\n            address(this), // owner\n            address(this), // address to transfer to\n            oTokenAddress, // option address\n            newVaultID, // vaultId\n            mintAmount, // amount\n            0, //index\n            \"\" //data\n        );\n\n        controller.operate(actions);\n\n        return mintAmount;\n    }\n\n    /**\n     * @notice Close the existing short otoken position. Currently this implementation is simple.\n     * It closes the most recent vault opened by the contract. This assumes that the contract will\n     * only have a single vault open at any given time. Since calling `_closeShort` deletes vaults by\n     calling SettleVault action, this assumption should hold.\n     * @param gammaController is the address of the opyn controller contract\n     * @return amount of collateral redeemed from the vault\n     */\n    function settleShort(address gammaController) external returns (uint256) {\n        IController controller = IController(gammaController);\n\n        // gets the currently active vault ID\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\n\n        GammaTypes.Vault memory vault =\n            controller.getVault(address(this), vaultID);\n\n        require(vault.shortOtokens.length > 0, \"No short\");\n\n        // An otoken's collateralAsset is the vault's `asset`\n        // So in the context of performing Opyn short operations we call them collateralAsset\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\n\n        // The short position has been previously closed, or all the otokens have been burned.\n        // So we return early.\n        if (address(collateralToken) == address(0)) {\n            return 0;\n        }\n\n        // This is equivalent to doing IERC20(vault.asset).balanceOf(address(this))\n        uint256 startCollateralBalance =\n            collateralToken.balanceOf(address(this));\n\n        // If it is after expiry, we need to settle the short position using the normal way\n        // Delete the vault and withdraw all remaining collateral from the vault\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](1);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.SettleVault,\n            address(this), // owner\n            address(this), // address to transfer to\n            address(0), // not used\n            vaultID, // vaultId\n            0, // not used\n            0, // not used\n            \"\" // not used\n        );\n\n        controller.operate(actions);\n\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\n\n        return endCollateralBalance.sub(startCollateralBalance);\n    }\n\n    /**\n     * @notice Exercises the ITM option using existing long otoken position. Currently this implementation is simple.\n     * It calls the `Redeem` action to claim the payout.\n     * @param gammaController is the address of the opyn controller contract\n     * @param oldOption is the address of the old option\n     * @param asset is the address of the vault's asset\n     * @return amount of asset received by exercising the option\n     */\n    function settleLong(\n        address gammaController,\n        address oldOption,\n        address asset\n    ) external returns (uint256) {\n        IController controller = IController(gammaController);\n\n        uint256 oldOptionBalance = IERC20(oldOption).balanceOf(address(this));\n\n        if (controller.getPayout(oldOption, oldOptionBalance) == 0) {\n            return 0;\n        }\n\n        uint256 startAssetBalance = IERC20(asset).balanceOf(address(this));\n\n        // If it is after expiry, we need to redeem the profits\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](1);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.Redeem,\n            address(0), // not used\n            address(this), // address to send profits to\n            oldOption, // address of otoken\n            0, // not used\n            oldOptionBalance, // otoken balance\n            0, // not used\n            \"\" // not used\n        );\n\n        controller.operate(actions);\n\n        uint256 endAssetBalance = IERC20(asset).balanceOf(address(this));\n\n        return endAssetBalance.sub(startAssetBalance);\n    }\n\n    /**\n     * @notice Burn the remaining oTokens left over from auction. Currently this implementation is simple.\n     * It burns oTokens from the most recent vault opened by the contract. This assumes that the contract will\n     * only have a single vault open at any given time.\n     * @param gammaController is the address of the opyn controller contract\n     * @param currentOption is the address of the current option\n     * @return amount of collateral redeemed by burning otokens\n     */\n    function burnOtokens(address gammaController, address currentOption)\n        external\n        returns (uint256)\n    {\n        uint256 numOTokensToBurn =\n            IERC20(currentOption).balanceOf(address(this));\n\n        require(numOTokensToBurn > 0, \"No oTokens to burn\");\n\n        IController controller = IController(gammaController);\n\n        // gets the currently active vault ID\n        uint256 vaultID = controller.getAccountVaultCounter(address(this));\n\n        GammaTypes.Vault memory vault =\n            controller.getVault(address(this), vaultID);\n\n        require(vault.shortOtokens.length > 0, \"No short\");\n\n        IERC20 collateralToken = IERC20(vault.collateralAssets[0]);\n\n        uint256 startCollateralBalance =\n            collateralToken.balanceOf(address(this));\n\n        // Burning `amount` of oTokens from the ribbon vault,\n        // then withdrawing the corresponding collateral amount from the vault\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](2);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.BurnShortOption,\n            address(this), // owner\n            address(this), // address to transfer from\n            address(vault.shortOtokens[0]), // otoken address\n            vaultID, // vaultId\n            numOTokensToBurn, // amount\n            0, //index\n            \"\" //data\n        );\n\n        actions[1] = IController.ActionArgs(\n            IController.ActionType.WithdrawCollateral,\n            address(this), // owner\n            address(this), // address to transfer to\n            address(collateralToken), // withdrawn asset\n            vaultID, // vaultId\n            vault.collateralAmounts[0].mul(numOTokensToBurn).div(\n                vault.shortAmounts[0]\n            ), // amount\n            0, //index\n            \"\" //data\n        );\n\n        controller.operate(actions);\n\n        uint256 endCollateralBalance = collateralToken.balanceOf(address(this));\n\n        return endCollateralBalance.sub(startCollateralBalance);\n    }\n\n    /**\n     * @notice Calculates the performance and management fee for this week's round\n     * @param currentBalance is the balance of funds held on the vault after closing short\n     * @param lastLockedAmount is the amount of funds locked from the previous round\n     * @param pendingAmount is the pending deposit amount\n     * @param performanceFeePercent is the performance fee pct.\n     * @param managementFeePercent is the management fee pct.\n     * @return performanceFeeInAsset is the performance fee\n     * @return managementFeeInAsset is the management fee\n     * @return vaultFee is the total fees\n     */\n    function getVaultFees(\n        uint256 currentBalance,\n        uint256 lastLockedAmount,\n        uint256 pendingAmount,\n        uint256 performanceFeePercent,\n        uint256 managementFeePercent\n    )\n        internal\n        pure\n        returns (\n            uint256 performanceFeeInAsset,\n            uint256 managementFeeInAsset,\n            uint256 vaultFee\n        )\n    {\n        // At the first round, currentBalance=0, pendingAmount>0\n        // so we just do not charge anything on the first round\n        uint256 lockedBalanceSansPending =\n            currentBalance > pendingAmount\n                ? currentBalance.sub(pendingAmount)\n                : 0;\n\n        uint256 _performanceFeeInAsset;\n        uint256 _managementFeeInAsset;\n        uint256 _vaultFee;\n\n        // Take performance fee and management fee ONLY if difference between\n        // last week and this week's vault deposits, taking into account pending\n        // deposits and withdrawals, is positive. If it is negative, last week's\n        // option expired ITM past breakeven, and the vault took a loss so we\n        // do not collect performance fee for last week\n        if (lockedBalanceSansPending > lastLockedAmount) {\n            _performanceFeeInAsset = performanceFeePercent > 0\n                ? lockedBalanceSansPending\n                    .sub(lastLockedAmount)\n                    .mul(performanceFeePercent)\n                    .div(100 * Vault.FEE_MULTIPLIER)\n                : 0;\n            _managementFeeInAsset = managementFeePercent > 0\n                ? lockedBalanceSansPending.mul(managementFeePercent).div(\n                    100 * Vault.FEE_MULTIPLIER\n                )\n                : 0;\n\n            _vaultFee = _performanceFeeInAsset.add(_managementFeeInAsset);\n        }\n\n        return (_performanceFeeInAsset, _managementFeeInAsset, _vaultFee);\n    }\n\n    /**\n     * @notice Either retrieves the option token if it already exists, or deploy it\n     * @param commitParams is the struct with details on previous option and strike selection details\n     * @param vaultParams is the struct with vault general data\n     * @param underlying is the address of the underlying asset of the option\n     * @param strikePrice is the strike price of the option\n     * @param expiry is the expiry timestamp of the option\n     * @param isPut is whether the option is a put\n     * @return the address of the option\n     */\n    function getOrDeployOtoken(\n        CommitParams calldata commitParams,\n        Vault.VaultParams storage vaultParams,\n        address underlying,\n        uint256 strikePrice,\n        uint256 expiry,\n        bool isPut\n    ) internal returns (address) {\n        IOtokenFactory factory = IOtokenFactory(commitParams.OTOKEN_FACTORY);\n\n        address otokenFromFactory =\n            factory.getOtoken(\n                underlying,\n                commitParams.USDC,\n                commitParams.collateralAsset,\n                strikePrice,\n                expiry,\n                isPut\n            );\n\n        if (otokenFromFactory != address(0)) {\n            return otokenFromFactory;\n        }\n\n        address otoken =\n            factory.createOtoken(\n                underlying,\n                commitParams.USDC,\n                commitParams.collateralAsset,\n                strikePrice,\n                expiry,\n                isPut\n            );\n\n        verifyOtoken(\n            otoken,\n            vaultParams,\n            commitParams.collateralAsset,\n            commitParams.USDC,\n            commitParams.delay\n        );\n\n        return otoken;\n    }\n\n    /**\n     * @notice Creates an offer in the Swap Contract\n     * @param currentOtoken is the current otoken address\n     * @param currOtokenPremium is premium for each otoken\n     * @param swapContract the address of the swap contract\n     * @param vaultParams is the struct with vault general data\n     * @return optionAuctionID auction id of the newly created offer\n     */\n    function createOffer(\n        address currentOtoken,\n        uint256 currOtokenPremium,\n        address swapContract,\n        Vault.VaultParams storage vaultParams\n    ) external returns (uint256 optionAuctionID) {\n        require(\n            currOtokenPremium <= type(uint96).max,\n            \"currentOtokenPremium > type(uint96) max value!\"\n        );\n        require(currOtokenPremium > 0, \"!currentOtokenPremium\");\n\n        uint256 oTokenBalance = IERC20(currentOtoken).balanceOf(address(this));\n        require(\n            oTokenBalance <= type(uint128).max,\n            \"oTokenBalance > type(uint128) max value!\"\n        );\n\n        // Use safeIncrease instead of safeApproval because safeApproval is only used for initial\n        // approval and cannot be called again. Using safeIncrease allow us to call _createOffer\n        // even when we are approving the same oTokens we have used before. This might happen if\n        // we accidentally burn the oTokens before settlement.\n        uint256 allowance =\n            IERC20(currentOtoken).allowance(address(this), swapContract);\n\n        if (allowance < oTokenBalance) {\n            IERC20(currentOtoken).safeIncreaseAllowance(\n                swapContract,\n                oTokenBalance.sub(allowance)\n            );\n        }\n\n        uint256 decimals = vaultParams.decimals;\n\n        // If total size is larger than 1, set minimum bid as 1\n        // Otherwise, set minimum bid to one tenth the total size\n        uint256 minBidSize =\n            oTokenBalance > 10**decimals ? 10**decimals : oTokenBalance.div(10);\n\n        require(\n            minBidSize <= type(uint96).max,\n            \"minBidSize > type(uint96) max value!\"\n        );\n\n        currOtokenPremium = decimals > 18\n            ? currOtokenPremium.mul(10**(decimals.sub(18)))\n            : currOtokenPremium.div(10**(uint256(18).sub(decimals)));\n\n        optionAuctionID = ISwap(swapContract).createOffer(\n            currentOtoken,\n            vaultParams.asset,\n            uint96(currOtokenPremium),\n            uint96(minBidSize),\n            uint128(oTokenBalance)\n        );\n    }\n\n    /**\n     * @notice Allocates the vault's minted options to the OptionsPurchaseQueue contract\n     * @dev Skipped if the optionsPurchaseQueue doesn't exist\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\n     * @param option is the minted option\n     * @param optionsAmount is the amount of options minted\n     * @param optionAllocation is the maximum % of options to allocate towards the purchase queue (will only allocate\n     *  up to the amount that is on the queue)\n     * @return allocatedOptions is the amount of options that ended up getting allocated to the OptionsPurchaseQueue\n     */\n    function allocateOptions(\n        address optionsPurchaseQueue,\n        address option,\n        uint256 optionsAmount,\n        uint256 optionAllocation\n    ) external returns (uint256 allocatedOptions) {\n        // Skip if optionsPurchaseQueue is address(0)\n        if (optionsPurchaseQueue != address(0)) {\n            allocatedOptions = optionsAmount.mul(optionAllocation).div(\n                100 * Vault.OPTION_ALLOCATION_MULTIPLIER\n            );\n            allocatedOptions = IOptionsPurchaseQueue(optionsPurchaseQueue)\n                .getOptionsAllocation(address(this), allocatedOptions);\n\n            if (allocatedOptions != 0) {\n                IERC20(option).approve(optionsPurchaseQueue, allocatedOptions);\n                IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\n                    allocatedOptions\n                );\n            }\n        }\n\n        return allocatedOptions;\n    }\n\n    /**\n     * @notice Sell the allocated options to the purchase queue post auction settlement\n     * @dev Reverts if the auction hasn't settled yet\n     * @param optionsPurchaseQueue is the OptionsPurchaseQueue contract\n     * @param swapContract The address of the swap settlement contract\n     * @return totalPremiums Total premiums earnt by the vault\n     */\n    function sellOptionsToQueue(\n        address optionsPurchaseQueue,\n        address swapContract,\n        uint256 optionAuctionID\n    ) external returns (uint256) {\n        uint256 settlementPrice =\n            getAuctionSettlementPrice(swapContract, optionAuctionID);\n        require(settlementPrice != 0, \"!settlementPrice\");\n\n        return\n            IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\n                settlementPrice\n            );\n    }\n\n    /**\n     * @notice Gets the settlement price of a settled auction\n     * @param swapContract The address of the swap settlement contract\n     * @param optionAuctionID is the offer ID\n     * @return settlementPrice Auction settlement price\n     */\n    function getAuctionSettlementPrice(\n        address swapContract,\n        uint256 optionAuctionID\n    ) public view returns (uint256) {\n        return ISwap(swapContract).averagePriceForOffer(optionAuctionID);\n    }\n\n    /**\n     * @notice Verify the constructor params satisfy requirements\n     * @param owner is the owner of the vault with critical permissions\n     * @param feeRecipient is the address to recieve vault performance and management fees\n     * @param performanceFee is the perfomance fee pct.\n     * @param tokenName is the name of the token\n     * @param tokenSymbol is the symbol of the token\n     * @param _vaultParams is the struct with vault general data\n     */\n    function verifyInitializerParams(\n        address owner,\n        address keeper,\n        address feeRecipient,\n        uint256 performanceFee,\n        uint256 managementFee,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        Vault.VaultParams calldata _vaultParams\n    ) external pure {\n        require(owner != address(0), \"!owner\");\n        require(keeper != address(0), \"!keeper\");\n        require(feeRecipient != address(0), \"!feeRecipient\");\n        require(\n            performanceFee < 100 * Vault.FEE_MULTIPLIER,\n            \"performanceFee >= 100%\"\n        );\n        require(\n            managementFee < 100 * Vault.FEE_MULTIPLIER,\n            \"managementFee >= 100%\"\n        );\n        require(bytes(tokenName).length > 0, \"!tokenName\");\n        require(bytes(tokenSymbol).length > 0, \"!tokenSymbol\");\n\n        require(_vaultParams.asset != address(0), \"!asset\");\n        require(_vaultParams.underlying != address(0), \"!underlying\");\n        require(_vaultParams.minimumSupply > 0, \"!minimumSupply\");\n        require(_vaultParams.cap > 0, \"!cap\");\n        require(\n            _vaultParams.cap > _vaultParams.minimumSupply,\n            \"cap has to be higher than minimumSupply\"\n        );\n    }\n\n    /**\n     * @notice Gets the next option expiry timestamp\n     * @param currentOption is the otoken address that the vault is currently writing\n     */\n    function getNextExpiry(address currentOption)\n        internal\n        view\n        returns (uint256)\n    {\n        // uninitialized state\n        if (currentOption == address(0)) {\n            return getNextFriday(block.timestamp);\n        }\n        uint256 currentExpiry = IOtoken(currentOption).expiryTimestamp();\n\n        // After options expiry if no options are written for >1 week\n        // We need to give the ability continue writing options\n        if (block.timestamp > currentExpiry + 7 days) {\n            return getNextFriday(block.timestamp);\n        }\n        return getNextFriday(currentExpiry);\n    }\n\n    /**\n     * @notice Gets the next options expiry timestamp\n     * @param timestamp is the expiry timestamp of the current option\n     * Reference: https://codereview.stackexchange.com/a/33532\n     * Examples:\n     * getNextFriday(week 1 thursday) -> week 1 friday\n     * getNextFriday(week 1 friday) -> week 2 friday\n     * getNextFriday(week 1 saturday) -> week 2 friday\n     */\n    function getNextFriday(uint256 timestamp) internal pure returns (uint256) {\n        // dayOfWeek = 0 (sunday) - 6 (saturday)\n        uint256 dayOfWeek = ((timestamp / 1 days) + 4) % 7;\n        uint256 nextFriday = timestamp + ((7 + 5 - dayOfWeek) % 7) * 1 days;\n        uint256 friday8am = nextFriday - (nextFriday % (24 hours)) + (8 hours);\n\n        // If the passed timestamp is day=Friday hour>8am, we simply increment it by a week to next Friday\n        if (timestamp >= friday8am) {\n            friday8am += 7 days;\n        }\n        return friday8am;\n    }\n}"
    },
    "contracts/oracles/ManualVolOracle.sol": {
      "content": "//SPDX-License-Identifier: GPL-3.0\npragma solidity =0.8.17;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract ManualVolOracle is AccessControl {\n    /// @dev The identifier of the role which maintains other roles.\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN\");\n\n    /// @dev Map of option id to IV\n    mapping(bytes32 => uint256) private annualizedVols;\n\n    /**\n     * Instrument describe an option with a specific delta, asset and its option type.\n     */\n    struct Option {\n        // option delta\n        uint256 delta;\n        // Underlying token, eg an stETH-collateralized option's underlying is WETH\n        address underlying;\n        // Asset used to collateralize an option, eg an stETH-collateralized option's collateral is wstETH\n        address collateralAsset;\n        // If an otoken is a put or not\n        bool isPut;\n    }\n\n    /**\n     * @notice Creates an volatility oracle for a pool\n     * @param _admin is the admin\n     */\n    constructor(address _admin) {\n        require(_admin != address(0), \"!_admin\");\n\n        // Add _admin as admin\n        _setupRole(ADMIN_ROLE, _admin);\n        _setupRole(DEFAULT_ADMIN_ROLE, _admin);\n    }\n\n    /// @dev A modifier which checks that the caller has the admin role.\n    modifier onlyAdmin() {\n        require(hasRole(ADMIN_ROLE, msg.sender), \"!admin\");\n        _;\n    }\n\n    /**\n     * @notice Returns the standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\n     * @return standardDeviation is the standard deviation of the asset\n     */\n    function vol(bytes32) public pure returns (uint256 standardDeviation) {\n        return 0;\n    }\n\n    /**\n     * @notice Returns the annualized standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\n     * @param optionId is the encoded id for the option struct\n     * @return annualStdev is the annualized standard deviation of the asset\n     */\n    function annualizedVol(bytes32 optionId)\n        public\n        view\n        returns (uint256 annualStdev)\n    {\n        return annualizedVols[optionId];\n    }\n\n    /**\n     * @notice Returns the annualized standard deviation of the base currency in 10**8 i.e. 1*10**8 = 100%\n     * @param delta is the option's delta, in units of 10**8. E.g. 105% = 1.05 * 10**8\n     * @param underlying is the underlying of the option\n     * @param collateralAsset is the collateral used to collateralize the option\n     * @param isPut is the flag used to determine if an option is a put or call\n     * @return annualStdev is the annualized standard deviation of the asset\n     */\n    function annualizedVol(\n        uint256 delta,\n        address underlying,\n        address collateralAsset,\n        bool isPut\n    ) public view returns (uint256 annualStdev) {\n        return\n            annualizedVols[\n                getOptionId(delta, underlying, collateralAsset, isPut)\n            ];\n    }\n\n    /**\n     * @notice Computes the option id for a given Option struct\n     * @param delta is the option's delta, in units of 10**4. E.g. 0.1d = 0.1 * 10**4\n     * @param underlying is the underlying of the option\n     * @param collateralAsset is the collateral used to collateralize the option\n     * @param isPut is the flag used to determine if an option is a put or call\n     */\n    function getOptionId(\n        uint256 delta,\n        address underlying,\n        address collateralAsset,\n        bool isPut\n    ) public pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(delta, underlying, collateralAsset, isPut)\n            );\n    }\n\n    /**\n     * @notice Sets the annualized standard deviation of the base currency of one or more `pool(s)`\n     * @param optionIds is an array of Option IDs encoded and hashed with optionId\n     * @param newAnnualizedVols is an array of the annualized volatility with 10**8 decimals i.e. 1*10**8 = 100%\n     */\n    function setAnnualizedVol(\n        bytes32[] calldata optionIds,\n        uint256[] calldata newAnnualizedVols\n    ) external onlyAdmin {\n        require(\n            optionIds.length == newAnnualizedVols.length,\n            \"Input lengths mismatched\"\n        );\n\n        for (uint256 i = 0; i < optionIds.length; i++) {\n            bytes32 optionId = optionIds[i];\n            uint256 newAnnualizedVol = newAnnualizedVols[i];\n\n            require(newAnnualizedVol > 50 * 10**6, \"Cannot be less than 50%\");\n            require(newAnnualizedVol < 400 * 10**6, \"Cannot be more than 400%\");\n\n            annualizedVols[optionId] = newAnnualizedVol;\n        }\n    }\n}"
    },
    "contracts/oracles/OpynOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\n\nimport {IOracle} from \"../interfaces/GammaInterface.sol\";\nimport {IPriceOracle} from \"../interfaces/IPriceOracle.sol\";\n\ncontract OpynOracle is IPriceOracle {\n    /// @dev base decimals\n    uint256 public constant override decimals = 8;\n\n    /// @notice Gamma Protocol oracle\n    IOracle public immutable oracle;\n\n    /// @notice Asset to get the price of\n    address public immutable asset;\n\n    constructor(address _oracle, address _asset) {\n        require(_oracle != address(0), \"!oracle\");\n        require(_asset != address(0), \"!asset\");\n\n        oracle = IOracle(_oracle);\n        asset = _asset;\n    }\n\n    function latestAnswer() external view override returns (uint256) {\n        return oracle.getPrice(asset);\n    }\n}\n"
    },
    "contracts/oracles/SAvaxOracle.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.17;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IPriceOracle} from \"../interfaces/IPriceOracle.sol\";\nimport {ISAVAX} from \"../interfaces/ISAVAX.sol\";\nimport {DSMath} from \"../vendor/DSMath.sol\";\n\ncontract SAvaxOracle is IPriceOracle {\n    using SafeMath for uint256;\n\n    AggregatorV3Interface public immutable WAVAXOracle;\n    ISAVAX public immutable sAVAX;\n\n    constructor(address _sAVAX, address _WAVAXOracle) {\n        require(_sAVAX != address(0), \"!sAVAX\");\n        require(_WAVAXOracle != address(0), \"!WAVAXOracle\");\n\n        sAVAX = ISAVAX(_sAVAX);\n        WAVAXOracle = AggregatorV3Interface(_WAVAXOracle);\n    }\n\n    function _underlyingPriceToSAvaxPrice(uint256 underlyingPrice)\n        private\n        view\n        returns (uint256)\n    {\n        // Passing 1e18 to getPooledAvaxByShares() gives us the number of AVAX per sAVAX.\n        uint256 sAvaxPerAvax = sAVAX.getPooledAvaxByShares(1e18);\n        return sAvaxPerAvax.mul(underlyingPrice).div(1e18);\n    }\n\n    function latestAnswer() external view override returns (uint256) {\n        (\n            uint80 roundID,\n            int256 price,\n            ,\n            uint256 timeStamp,\n            uint80 answeredInRound\n        ) = WAVAXOracle.latestRoundData();\n\n        require(answeredInRound >= roundID, \"Stale oracle price\");\n        require(timeStamp != 0, \"!timeStamp\");\n        uint256 underlyingPrice = uint256(DSMath.imax(price, 0));\n        return _underlyingPriceToSAvaxPrice(underlyingPrice);\n    }\n\n    function decimals() external view override returns (uint256) {\n        return WAVAXOracle.decimals();\n    }\n}\n"
    },
    "contracts/storage/HimalayanCallSpreadStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nabstract contract HimalayanCallSpreadStorage {\n    // Logic contract used to price options\n    address public optionsPremiumPricer;\n    // Logic contract used to select strike prices\n    address public strikeSelection;\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\n    uint256 public premiumDiscount;\n    // Current oToken premium\n    uint256 public currentSpreadPremium;\n    // Auction duration\n    uint256 public auctionDuration;\n    // Auction id of current option\n    uint256 public optionAuctionID;\n     // Amount locked for scheduled withdrawals last week;\n    uint256 public lastQueuedWithdrawAmount;\n    // Queued withdraw shares for the current round\n    uint256 public currentQueuedWithdrawShares;\n\n}\n"
    },
    "contracts/storage/RibbonDeltaVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\nimport {IRibbonThetaVault} from \"../interfaces/IRibbonThetaVault.sol\";\nimport {Vault} from \"../libraries/Vault.sol\";\n\nabstract contract RibbonDeltaVaultStorageV1 {\n    // Ribbon counterparty theta vault\n    IRibbonThetaVault public counterpartyThetaVault;\n    // % of funds to be used for weekly option purchase\n    uint256 public optionAllocation;\n    // Delta vault equivalent of lockedAmount\n    uint256 public balanceBeforePremium;\n    // User Id of delta vault in latest gnosis auction\n    Vault.AuctionSellOrder public auctionSellOrder;\n}\n\nabstract contract RibbonDeltaVaultStorageV2 {\n    // Amount locked for scheduled withdrawals last week;\n    uint128 public lastQueuedWithdrawAmount;\n}\n\n// We are following Compound's method of upgrading new contract implementations\n// When we need to add new storage variables, we create a new version of RibbonDeltaVaultStorage\n// e.g. RibbonDeltaVaultStorage<versionNumber>, so finally it would look like\n// contract RibbonDeltaVaultStorage is RibbonDeltaVaultStorageV1, RibbonDeltaVaultStorageV2\nabstract contract RibbonDeltaVaultStorage is\n    RibbonDeltaVaultStorageV1,\n    RibbonDeltaVaultStorageV2\n{\n\n}\n"
    },
    "contracts/storage/RibbonThetaSTETHVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nabstract contract RibbonThetaSTETHVaultStorageV1 {\n    // Logic contract used to price options\n    address public optionsPremiumPricer;\n    // Logic contract used to select strike prices\n    address public strikeSelection;\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\n    uint256 public premiumDiscount;\n    // Current oToken premium\n    uint256 public currentOtokenPremium;\n    // Last round id at which the strike was manually overridden\n    uint16 public lastStrikeOverrideRound;\n    // Price last overridden strike set to\n    uint256 public overriddenStrikePrice;\n    // Auction duration\n    uint256 public auctionDuration;\n    // Auction id of current option\n    uint256 public optionAuctionID;\n}\n\nabstract contract RibbonThetaSTETHVaultStorageV2 {\n    // Amount locked for scheduled withdrawals last week;\n    uint256 public lastQueuedWithdrawAmount;\n}\n\nabstract contract RibbonThetaSTETHVaultStorageV3 {\n    // LiquidityGauge contract for the vault\n    address public liquidityGauge;\n}\n\nabstract contract RibbonThetaSTETHVaultStorageV4 {\n    // Queued withdraw shares for the current round\n    uint256 public currentQueuedWithdrawShares;\n}\n\n// We are following Compound's method of upgrading new contract implementations\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\nabstract contract RibbonThetaSTETHVaultStorage is\n    RibbonThetaSTETHVaultStorageV1,\n    RibbonThetaSTETHVaultStorageV2,\n    RibbonThetaSTETHVaultStorageV3,\n    RibbonThetaSTETHVaultStorageV4\n{\n\n}\n"
    },
    "contracts/storage/RibbonThetaVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nabstract contract RibbonThetaVaultStorageV1 {\n    // Logic contract used to price options\n    address public optionsPremiumPricer;\n    // Logic contract used to select strike prices\n    address public strikeSelection;\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\n    uint256 public premiumDiscount;\n    // Current oToken premium\n    uint256 public currentOtokenPremium;\n    // Last round id at which the strike was manually overridden\n    uint16 public lastStrikeOverrideRound;\n    // Price last overridden strike set to\n    uint256 public overriddenStrikePrice;\n    // Auction duration\n    uint256 public auctionDuration;\n    // Auction id of current option\n    uint256 public optionAuctionID;\n}\n\nabstract contract RibbonThetaVaultStorageV2 {\n    // Amount locked for scheduled withdrawals last week;\n    uint256 public lastQueuedWithdrawAmount;\n}\n\nabstract contract RibbonThetaVaultStorageV3 {\n    // DEPRECATED: Auction will be denominated in USDC if true\n    bool private _isUsdcAuction;\n    // DEPRECATED: Path for swaps\n    bytes private _swapPath;\n}\n\nabstract contract RibbonThetaVaultStorageV4 {\n    // LiquidityGauge contract for the vault\n    address public liquidityGauge;\n}\n\nabstract contract RibbonThetaVaultStorageV5 {\n    // OptionsPurchaseQueue contract for selling options\n    address public optionsPurchaseQueue;\n}\n\nabstract contract RibbonThetaVaultStorageV6 {\n    // Queued withdraw shares for the current round\n    uint256 public currentQueuedWithdrawShares;\n}\n\nabstract contract RibbonThetaVaultStorageV7 {\n    // Vault Pauser Contract for the vault\n    address public vaultPauser;\n}\n\nabstract contract RibbonThetaVaultStorageV8 {\n    // DEPRECATED: Executor role for Swap offers\n    address private _offerExecutor;\n}\n\n// We are following Compound's method of upgrading new contract implementations\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\nabstract contract RibbonThetaVaultStorage is\n    RibbonThetaVaultStorageV1,\n    RibbonThetaVaultStorageV2,\n    RibbonThetaVaultStorageV3,\n    RibbonThetaVaultStorageV4,\n    RibbonThetaVaultStorageV5,\n    RibbonThetaVaultStorageV6,\n    RibbonThetaVaultStorageV7,\n    RibbonThetaVaultStorageV8\n{\n\n}\n"
    },
    "contracts/storage/RibbonThetaYearnVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nabstract contract RibbonThetaYearnVaultStorageV1 {\n    // Logic contract used to price options\n    address public optionsPremiumPricer;\n    // Logic contract used to select strike prices\n    address public strikeSelection;\n    // Premium discount on options we are selling (thousandths place: 000 - 999)\n    uint256 public premiumDiscount;\n    // Current oToken premium\n    uint256 public currentOtokenPremium;\n    // Last round id at which the strike was manually overridden\n    uint16 public lastStrikeOverrideRound;\n    // Price last overridden strike set to\n    uint256 public overriddenStrikePrice;\n    // Auction duration\n    uint256 public auctionDuration;\n    // Auction id of current option\n    uint256 public optionAuctionID;\n}\n\nabstract contract RibbonThetaYearnVaultStorageV2 {\n    // Amount locked for scheduled withdrawals last week;\n    uint256 public lastQueuedWithdrawAmount;\n}\n\nabstract contract RibbonThetaYearnVaultStorageV3 {\n    // LiquidityGauge contract for the vault\n    address public liquidityGauge;\n}\n\nabstract contract RibbonThetaYearnVaultStorageV4 {\n    // OptionsPurchaseQueue contract for selling options\n    address public optionsPurchaseQueue;\n}\n\nabstract contract RibbonThetaYearnVaultStorageV5 {\n    // Queued withdraw shares for the current round\n    uint256 public currentQueuedWithdrawShares;\n}\n\n// We are following Compound's method of upgrading new contract implementations\n// When we need to add new storage variables, we create a new version of RibbonThetaVaultStorage\n// e.g. RibbonThetaVaultStorage<versionNumber>, so finally it would look like\n// contract RibbonThetaVaultStorage is RibbonThetaVaultStorageV1, RibbonThetaVaultStorageV2\nabstract contract RibbonThetaYearnVaultStorage is\n    RibbonThetaYearnVaultStorageV1,\n    RibbonThetaYearnVaultStorageV2,\n    RibbonThetaYearnVaultStorageV3,\n    RibbonThetaYearnVaultStorageV4,\n    RibbonThetaYearnVaultStorageV5\n{\n\n}\n"
    },
    "contracts/storage/RibbonTreasuryVaultStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {Vault} from \"../libraries/Vault.sol\";\n\nabstract contract RibbonTreasuryVaultStorageV1 {\n    /// @notice Vault's parameters like cap, decimals\n    Vault.VaultParams public vaultParams;\n\n    /// @notice Vault's lifecycle state like round and locked amounts\n    Vault.VaultState public vaultState;\n\n    /// @notice Vault's state of the options sold and the timelocked option\n    Vault.OptionState public optionState;\n\n    /// @notice Stores the user's pending deposit for the round\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\n\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\n    /// This is used to determine the number of shares to be returned\n    /// to a user with their DepositReceipt.depositAmount\n    mapping(uint256 => uint256) public roundPricePerShare;\n\n    /// @notice Stores pending user withdrawals\n    mapping(address => Vault.Withdrawal) public withdrawals;\n\n    /// @notice Mapping of depositors in the vault\n    mapping(address => bool) public depositorsMap;\n\n    /// @notice Array of depositors in the vault\n    address[] public depositorsArray;\n\n    /// @notice Fee recipient for the performance and management fees\n    address public feeRecipient;\n\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\n    // no access to critical vault changes\n    address public keeper;\n\n    /// @notice Logic contract used to price options\n    address public optionsPremiumPricer;\n\n    /// @notice Logic contract used to select strike prices\n    address public strikeSelection;\n\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\n    uint256 public performanceFee;\n\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\n    uint256 public managementFee;\n\n    /// @notice Premium discount on options we are selling (thousandths place: 000 - 999)\n    uint256 public premiumDiscount;\n\n    /// @notice Current oToken premium\n    uint256 public currentOtokenPremium;\n\n    /// @notice Price last overridden strike set to\n    uint256 public overriddenStrikePrice;\n\n    /// @notice Auction duration\n    uint256 public auctionDuration;\n\n    /// @notice Auction id of current option\n    uint256 public optionAuctionID;\n\n    /// @notice Amount locked for scheduled withdrawals last week;\n    uint256 public lastQueuedWithdrawAmount;\n\n    /// @notice Period between each options sale.\n    /// Available options 7 (weekly), 14 (biweekly), 30 (monthly), 90 (quarterly), 180 (biannually)\n    uint256 public period;\n\n    /// @notice Maximum number of depositors\n    uint256 public maxDepositors;\n\n    /// @notice Minimum amount to deposit\n    uint256 public minDeposit;\n\n    /// @notice Last round id at which the strike was manually overridden\n    uint16 public lastStrikeOverrideRound;\n}\n\n// We are following Compound's method of upgrading new contract implementations\n// When we need to add new storage variables, we create a new version of RibbonTreasuryVaultStorage\n// e.g. RibbonTreasuryVaultStorage<versionNumber>, so finally it would look like\n// contract RibbonTreasuryVaultStorage is RibbonTreasuryVaultStorageV1, RibbonTreasuryVaultStorageV2\nabstract contract RibbonTreasuryVaultStorage is RibbonTreasuryVaultStorageV1 {\n\n}\n"
    },
    "contracts/storage/SwapStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\nimport \"../interfaces/ISwap.sol\";\n\nabstract contract SwapStorageV1 {\n    // Keccak256 of domain name for signature verification\n    bytes32 public DOMAIN_NAME;\n    // Keccak256 of domain version for signature verification\n    bytes32 public DOMAIN_VERSION;\n    // Keccak256 of abi-encoded domain parameters for signature verification\n    bytes32 public DOMAIN_SEPARATOR;\n\n    // Counter to keep track number of offers\n    uint256 public offersCounter;\n    // Mapping of swap offer details for a given swapId\n    mapping(uint256 => ISwap.Offer) public swapOffers;\n    // Mapping of referral fees for a given address\n    mapping(address => uint256) public referralFees;\n    // Mapping of authorized delegate for a given address\n    mapping(address => address) public authorized;\n    /**\n     * @notice Double mapping of signers to nonce groups to nonce states\n     * @dev The nonce group is computed as nonce / 256, so each group of 256 sequential nonces uses the same key\n     * @dev The nonce states are encoded as 256 bits, for each nonce in the group 0 means available and 1 means used\n     */\n    mapping(address => mapping(uint256 => uint256)) internal _nonceGroups;\n}\n\n// We are following Compound's method of upgrading new contract implementations\n// When we need to add new storage variables, we create a new version of SwapStorage\n// e.g. SwapStorage<versionNumber>, so finally it would look like\n// contract SwapStorage is SwapStorageV1, SwapStorageV2\nabstract contract SwapStorage is SwapStorageV1 {\n\n}"
    },
    "contracts/tests/ForceSend.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\n// For test suite\ncontract ForceSend {\n    function go(address payable victim) external payable {\n        selfdestruct(victim);\n    }\n}\n"
    },
    "contracts/tests/GammaInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface IGammaWhitelist {\n    function whitelistCollateral(address _collateral) external;\n\n    function whitelistProduct(\n        address _underlying,\n        address _strike,\n        address _collateral,\n        bool _isPut\n    ) external;\n}\n"
    },
    "contracts/tests/IAssets.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ninterface IWBTC {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function mint(address _to, uint256 _amount) external returns (bool);\n}\n\ninterface IBridgeToken {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function mint(\n        address to,\n        uint256 amount,\n        address feeAddress,\n        uint256 feeAmount,\n        bytes32 originTxId\n    ) external returns (bool);\n}\n\ninterface IPERP {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function mint(address _to, uint256 _amount) external;\n\n    function addMinter(address _minter) external;\n}\n"
    },
    "contracts/tests/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n    constructor(string memory _name, string memory _symbol)\n        ERC20(_name, _symbol)\n    {}\n\n    function mint(address to, uint256 value) external {\n        _mint(to, value);\n    }\n\n    function burn(address from, uint256 value) external {\n        _burn(from, value);\n    }\n}\n"
    },
    "contracts/tests/MockLiquidityGauge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MockLiquidityGauge {\n    using SafeERC20 for IERC20;\n\n    address public lp_token;\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n\n    constructor(address _lp_token) {\n        lp_token = _lp_token;\n    }\n\n    function deposit(\n        uint256 _value,\n        address _addr,\n        bool\n    ) external {\n        if (_value != 0) {\n            totalSupply += _value;\n            balanceOf[_addr] += _value;\n\n            IERC20(lp_token).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _value\n            );\n        }\n    }\n}\n"
    },
    "contracts/tests/MockOptionsPremiumPricer.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ncontract MockOptionsPremiumPricer {\n    uint256 private _optionPremiumPrice;\n    uint256 private _optionUnderlyingPrice;\n    uint256 private _optionUSDCPrice;\n    address private _priceOracle;\n    address private _volatilityOracle;\n    bytes32 private _optionId;\n    mapping(uint256 => uint256) private _deltas;\n\n    function getPremium(\n        uint256,\n        uint256,\n        bool\n    ) external view returns (uint256) {\n        return _optionPremiumPrice;\n    }\n\n    function getOptionDelta(uint256 strikePrice, uint256)\n        external\n        view\n        returns (uint256)\n    {\n        return _deltas[strikePrice];\n    }\n\n    function getOptionDelta(\n        uint256,\n        uint256 strikePrice,\n        uint256,\n        uint256\n    ) external view returns (uint256) {\n        return _deltas[strikePrice];\n    }\n\n    function optionId() external view returns (bytes32) {\n        return _optionId;\n    }\n\n    function getUnderlyingPrice() external view returns (uint256) {\n        return _optionUnderlyingPrice;\n    }\n\n    function priceOracle() external view returns (address) {\n        return _priceOracle;\n    }\n\n    function volatilityOracle() external view returns (address) {\n        return _volatilityOracle;\n    }\n\n    function setPremium(uint256 premium) external {\n        _optionPremiumPrice = premium;\n    }\n\n    function setOptionUnderlyingPrice(uint256 underlyingPrice) external {\n        _optionUnderlyingPrice = underlyingPrice;\n    }\n\n    function setOptionDelta(uint256 strikePrice, uint256 delta) external {\n        _deltas[strikePrice] = delta;\n    }\n\n    function setPriceOracle(address oracle) external {\n        _priceOracle = oracle;\n    }\n\n    function setOptionId(bytes32 newOptionId) external {\n        _optionId = newOptionId;\n    }\n\n    function setVolatilityOracle(address oracle) external {\n        _volatilityOracle = oracle;\n    }\n}\n"
    },
    "contracts/tests/MockPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ncontract MockPriceOracle {\n    uint256 private _decimals;\n\n    function setDecimals(uint256 decimals_) external {\n        _decimals = decimals_;\n    }\n\n    function decimals() external view returns (uint256) {\n        return _decimals;\n    }\n}\n"
    },
    "contracts/tests/MockRibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IOptionsPurchaseQueue} from \"../interfaces/IOptionsPurchaseQueue.sol\";\nimport {Vault} from \"../libraries/Vault.sol\";\n\ncontract MockRibbonVault {\n    Vault.VaultParams public vaultParams;\n\n    address public currentOption;\n\n    function setAsset(address asset) external {\n        vaultParams.asset = asset;\n    }\n\n    function setCurrentOption(address option) external {\n        currentOption = option;\n    }\n\n    function allocateOptions(\n        address optionsPurchaseQueue,\n        address option,\n        uint256 optionsAmount\n    ) external {\n        IERC20(option).approve(optionsPurchaseQueue, optionsAmount);\n        IOptionsPurchaseQueue(optionsPurchaseQueue).allocateOptions(\n            optionsAmount\n        );\n    }\n\n    function sellToBuyers(address optionsPurchaseQueue, uint256 settlementPrice)\n        external\n    {\n        IOptionsPurchaseQueue(optionsPurchaseQueue).sellToBuyers(\n            settlementPrice\n        );\n    }\n}\n"
    },
    "contracts/tests/MockStrikeSelection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ncontract MockStrikeSelection {\n    uint256 private _strikePrice;\n    uint256 private _delta;\n\n    function getStrikePrice(uint256, bool)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return (_strikePrice, _delta);\n    }\n\n    function setStrikePrice(uint256 strikePrice) external {\n        _strikePrice = strikePrice;\n    }\n\n    function setDelta(uint256 newDelta) external {\n        _delta = newDelta;\n    }\n\n    function delta() external view returns (uint256) {\n        return _delta;\n    }\n}\n"
    },
    "contracts/tests/MockVolatilityOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\ncontract MockVolatilityOracle {\n    uint256 private _annualizedVol;\n\n    function annualizedVol(bytes32) external view returns (uint256) {\n        return _annualizedVol;\n    }\n\n    function setAnnualizedVol(uint256 vol) external {\n        _annualizedVol = vol;\n    }\n}\n"
    },
    "contracts/tests/TestShareMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {ShareMath} from \"../libraries/ShareMath.sol\";\n\ncontract TestShareMath {\n    function assetToShares(\n        uint256 assetAmount,\n        uint256 pps,\n        uint256 decimals\n    ) external pure returns (uint256) {\n        return ShareMath.assetToShares(assetAmount, pps, decimals);\n    }\n\n    function sharesToAsset(\n        uint256 shares,\n        uint256 pps,\n        uint256 decimals\n    ) external pure returns (uint256) {\n        return ShareMath.sharesToAsset(shares, pps, decimals);\n    }\n}\n"
    },
    "contracts/tests/TestVaultLifecycle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {VaultLifecycle} from \"../libraries/VaultLifecycle.sol\";\nimport {Vault} from \"../libraries/Vault.sol\";\n\ncontract TestVaultLifecycle {\n    Vault.VaultState public vaultState;\n\n    function getNextFriday(uint256 currentExpiry)\n        external\n        pure\n        returns (uint256 nextFriday)\n    {\n        return VaultLifecycle.getNextFriday(currentExpiry);\n    }\n\n    function getNextExpiry(address currentOption)\n        external\n        view\n        returns (uint256 nextExpiry)\n    {\n        return VaultLifecycle.getNextExpiry(currentOption);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        if (account == address(this)) {\n            return 1 ether;\n        }\n        return 0;\n    }\n\n    function setVaultState(Vault.VaultState calldata newVaultState) public {\n        vaultState.totalPending = newVaultState.totalPending;\n        vaultState.queuedWithdrawShares = newVaultState.queuedWithdrawShares;\n    }\n\n    function rollover(VaultLifecycle.RolloverParams calldata params)\n        external\n        view\n        returns (\n            uint256 newLockedAmount,\n            uint256 queuedWithdrawAmount,\n            uint256 newPricePerShare,\n            uint256 mintShares,\n            uint256 performanceFeeInAsset,\n            uint256 totalVaultFee\n        )\n    {\n        return VaultLifecycle.rollover(vaultState, params);\n    }\n\n    function getAuctionSettlementPrice(\n        address gnosisEasyAuction,\n        uint256 optionAuctionID\n    ) external view returns (uint256) {\n        return\n            VaultLifecycle.getAuctionSettlementPrice(\n                gnosisEasyAuction,\n                optionAuctionID\n            );\n    }\n}\n"
    },
    "contracts/utils/ManualStrikeSelection.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ManualStrikeSelection is Ownable {\n    /// @dev Selected strike price\n    uint256 public strikePrice;\n\n    /// @dev Delta for options strike price selection. 1 is 10000 (10**4)\n    uint256 public constant delta = 1000;\n\n    /**\n     * @notice Sets the strike price, only callable by the owner\n     * @param _strikePrice is the strike price of the option\n     */\n    function setStrikePrice(uint256 _strikePrice) external onlyOwner {\n        strikePrice = _strikePrice;\n    }\n\n    /**\n     * @notice Gets the strike price satisfying the delta value\n     * given the expiry timestamp and whether option is call or put\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\n     * @return newDelta is the delta of the option given its parameters\n     */\n    function getStrikePrice(uint256, bool)\n        external\n        view\n        returns (uint256, uint256)\n    {\n        return (strikePrice, delta);\n    }\n}\n"
    },
    "contracts/utils/ManualStrikeSelectionCallSpread.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract ManualStrikeSelectionCallSpread is Ownable {\n    /// @dev Selected strike price\n    uint256[] public strikePrices;\n\n    /// @dev Delta for options strike price selection. 1 is 10000 (10**4)\n    uint256[] public deltas = [1000, 1000];\n\n    /**\n     * @notice Sets the strike price, only callable by the owner\n     * @param _strikePrices are the strike prices of the options in the spread\n     */\n    function setStrikePrice(uint256[] calldata _strikePrices) external onlyOwner {\n        strikePrices = _strikePrices;\n    }\n\n    /**\n     * @notice Gets the strike price satisfying the delta value\n     * given the expiry timestamp and whether option is call or put\n     * @return newStrikePrice is the strike price of the option (ex: for BTC might be 45000 * 10 ** 8)\n     * @return newDelta is the delta of the option given its parameters\n     */\n    function getStrikePrices(uint256, bool)\n        external\n        view\n        returns (uint256[] memory, uint256[] memory)\n    {\n        return (strikePrices, deltas);\n    }\n}\n"
    },
    "contracts/utils/OptionsPurchaseQueue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {IOptionsPurchaseQueue} from \"../interfaces/IOptionsPurchaseQueue.sol\";\nimport {IRibbonThetaVault} from \"../interfaces/IRibbonThetaVault.sol\";\nimport {Vault} from \"../libraries/Vault.sol\";\n\ncontract OptionsPurchaseQueue is IOptionsPurchaseQueue, Ownable {\n    using SafeERC20 for IERC20;\n\n    /************************************************\n     *  STORAGE\n     ***********************************************/\n\n    /// @notice Stores the purchase queue for each vault\n    mapping(address => Purchase[]) public override purchases;\n\n    /// @notice Stores the total options being purchased for each vault\n    mapping(address => uint256) public override totalOptionsAmount;\n\n    /// @notice Stores the amount of options the vault is allocating towards the purchase queue\n    /// @dev When vaultAllocatedOptions != 0, new purchase requests for the vault are blocked since the vault has\n    ///  already allocated options for this contract\n    mapping(address => uint256) public override vaultAllocatedOptions;\n\n    /// @notice Stores whether a buyer is whitelisted\n    mapping(address => bool) public override whitelistedBuyer;\n\n    /// @notice Stores the ceiling price of a vaults options\n    /// @dev If the ceilingPrice != 0, then the vault is available for requesting purchases\n    mapping(address => uint256) public override ceilingPrice;\n\n    /// @notice Minimum amount of options a buyer needs to request from a vault, necessary to prevent the purchase\n    ///  queue from getting griefed\n    /// @dev Buyers on the whitelist are exempted from this requirement\n    mapping(address => uint256) public override minPurchaseAmount;\n\n    /************************************************\n     *  EVENTS\n     ***********************************************/\n\n    /**\n     * @notice Emitted when a purchase is requested\n     * @param buyer The buyer requesting the purchase\n     * @param vault The vault the buyer is purchasing from\n     * @param optionsAmount Amount of options requested\n     * @param premiums Total premiums from the buyers (optionsAmount * ceilingPrice)\n     */\n    event PurchaseRequested(\n        address indexed buyer,\n        address indexed vault,\n        uint256 optionsAmount,\n        uint256 premiums\n    );\n\n    /**\n     * @notice Emitted when a purchase is cancelled\n     * @param buyer The buyer cancelling their purchase\n     * @param vault The vault the buyer was purchasing from\n     * @param optionsAmount Amount of options cancelled\n     * @param premiums Total premiums transferred back to the buyer\n     */\n    event PurchaseCancelled(\n        address indexed buyer,\n        address indexed vault,\n        uint256 optionsAmount,\n        uint256 premiums\n    );\n\n    /**\n     * @notice Emitted when the vault allocates options to be sold to the buyers\n     * @param vault The vault allocating options\n     * @param allocatedOptions Amount of options allocated\n     */\n    event OptionsAllocated(address indexed vault, uint256 allocatedOptions);\n\n    /**\n     * @notice Emitted when the vault sells options to the buyers\n     * @param vault The vault selling the options\n     * @param totalPremiums Total premiums earnt by the vault\n     * @param totalOptions Total options transferred to the buyers (allocatedOptions)\n     */\n    event OptionsSold(\n        address indexed vault,\n        uint256 totalPremiums,\n        uint256 totalOptions\n    );\n\n    /**\n     * @notice Emitted when a buyer is whitelisted for purchasing options\n     * @param buyer The whitelisted buyer\n     */\n    event AddWhitelist(address indexed buyer);\n\n    /**\n     * @notice Emitted when a buyer is removed from the whitelist for purchasing options\n     * @param buyer The blacklisted buyer\n     */\n    event RemoveWhitelist(address indexed buyer);\n\n    /**\n     * @notice Emitted when the ceiling price for a vault is updated\n     * @param vault The vault\n     * @param ceilingPrice The new ceiling price\n     */\n    event CeilingPriceUpdated(address indexed vault, uint256 ceilingPrice);\n\n    /**\n     * @notice Emitted when the minimum purchase amount for a vault is updated\n     * @param vault The vault\n     * @param optionsAmount The new minimum purchase amount\n     */\n    event MinPurchaseAmountUpdated(\n        address indexed vault,\n        uint256 optionsAmount\n    );\n\n    /************************************************\n     *  BUYER OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Create a request to purchase options from a vault at the auction settlement price\n     * @dev The buyer must be whitelisted to prevent the purchase queue from getting griefed (since sellToBuyers()\n     *  iterates through it). This function transfers the premiums for the options from the buyer at the ceiling\n     *  price (maximum price the buyer has to pay), however when the options are sold the buyer only pays the\n     *  auction settlement price and the leftover premiums are transferred back to the buyer. This function will\n     *  revert after the vault calls allocateOptions. New purchases can be made after the vault calls sellToBuyers().\n     *  The requests on the purchased queue are filled FIFO. Any unfilled/partially filled requests are refunded\n     *  their premiums, this can occur when the vault allocates less options than there are on the queue.\n     * @param vault The vault to purchase options from\n     * @param optionsAmount Amount of options requested\n     * @return premiums Amount of premiums transferred from the buyer\n     */\n    function requestPurchase(address vault, uint256 optionsAmount)\n        external\n        override\n        returns (uint256)\n    {\n        uint256 _ceilingPrice = ceilingPrice[vault];\n        require(_ceilingPrice != 0, \"Invalid vault\");\n        require(optionsAmount != 0, \"!optionsAmount\");\n        // Exempt buyers on the whitelist from the minimum purchase requirement\n        require(\n            optionsAmount >= minPurchaseAmount[vault] ||\n                whitelistedBuyer[msg.sender],\n            \"Minimum purchase requirement\"\n        );\n        // This prevents new purchase requested after the vault has set its allocation\n        require(vaultAllocatedOptions[vault] == 0, \"Vault allocated\");\n\n        // premiums = optionsAmount * ceilingPrice\n        uint256 premiums =\n            (optionsAmount * _ceilingPrice) / (10**Vault.OTOKEN_DECIMALS);\n\n        // Add purchase to queue\n        purchases[vault].push(\n            Purchase(\n                SafeCast.toUint128(optionsAmount),\n                SafeCast.toUint128(premiums),\n                msg.sender\n            )\n        );\n\n        totalOptionsAmount[vault] += optionsAmount;\n\n        // Transfer premiums from the buyer to this contract\n        IERC20(IRibbonThetaVault(vault).vaultParams().asset).safeTransferFrom(\n            msg.sender,\n            address(this),\n            premiums\n        );\n\n        emit PurchaseRequested(msg.sender, vault, optionsAmount, premiums);\n\n        return premiums;\n    }\n\n    /************************************************\n     *  VAULT OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Allocate options to the purchase queue\n     * @dev Only callable by the vault selling options. Since we cannot allocate more options than there are on the\n     *  purchase queue, we cap the allocated options at the totalOptionsAmount. The vault decides how many options\n     *  of its options it wants to allocate. Allows allocating additional options if already called. Transfers the\n     *  options from the vault to this contract.\n     * @param allocatedOptions Maximum amount of options the vault can allocate to buyers\n     * @return allocatedOptions The actual amount of options allocated\n     */\n    function allocateOptions(uint256 allocatedOptions)\n        external\n        override\n        returns (uint256)\n    {\n        require(ceilingPrice[msg.sender] != 0, \"Not vault\");\n\n        // Prevent the vault from allocating more options than there are requested\n        allocatedOptions = getOptionsAllocation(msg.sender, allocatedOptions);\n\n        // Blocks new purchase requests until sellToBuyers() is called\n        vaultAllocatedOptions[msg.sender] += allocatedOptions;\n\n        if (allocatedOptions != 0) {\n            // Transfer allocated options from the vault to this contract\n            IERC20(IRibbonThetaVault(msg.sender).currentOption())\n                .safeTransferFrom(msg.sender, address(this), allocatedOptions);\n        }\n\n        emit OptionsAllocated(msg.sender, allocatedOptions);\n\n        return allocatedOptions;\n    }\n\n    /**\n     * @notice Sells allocated options to the buyers on the purchase queue\n     * @dev Only callable by the vault. Lets say the vault starts an auction and it doesn't fully fill and\n     *  settles at a poor price. If this function were callable by anyone, then they could sell the allocated\n     *  options to the buyers at the poor price. Hence the vault should call this once its auction has settled at a\n     *  good price. The vault must allocate options first, otherwise all the buyers are returned their premiums.\n     *  The buyers receive their options at the auction settlement price and any leftover premiums are refunded.\n     *  If the auction settles above the ceiling price, the vault receives the premiums at the ceiling price (so it\n     *  receives premiums at a worse price than the auction) and the buyers are not refunded.\n     * @param settlementPrice The vault passes in the settlement price of the options\n     * @return totalPremiums The total premiums the vault received from the purchase queue\n     */\n    function sellToBuyers(uint256 settlementPrice)\n        external\n        override\n        returns (uint256)\n    {\n        require(ceilingPrice[msg.sender] != 0, \"Not vault\");\n\n        uint256 totalPremiums;\n        uint256 allocatedOptions = vaultAllocatedOptions[msg.sender];\n        uint256 totalOptions = allocatedOptions; // Cache allocatedOptions here for emitting an event later\n        IERC20 currentOption =\n            IERC20(IRibbonThetaVault(msg.sender).currentOption());\n        IERC20 asset =\n            IERC20(IRibbonThetaVault(msg.sender).vaultParams().asset);\n        Purchase[] memory purchaseQueue = purchases[msg.sender];\n\n        for (uint256 i; i < purchaseQueue.length; i++) {\n            if (allocatedOptions == 0) {\n                // Transfer premiums back to the buyer if no options are left\n                asset.safeTransfer(\n                    purchaseQueue[i].buyer,\n                    purchaseQueue[i].premiums\n                );\n            } else {\n                // Prevent transferring more options than there are allocated\n                // optionsAmount = min(purchase.optionsAmount, allocatedOptions)\n                uint256 optionsAmount =\n                    purchaseQueue[i].optionsAmount < allocatedOptions\n                        ? purchaseQueue[i].optionsAmount\n                        : allocatedOptions;\n\n                // premiums = optionsAmount * settlementPrice\n                uint256 premiums =\n                    (optionsAmount * settlementPrice) /\n                        (10**Vault.OTOKEN_DECIMALS);\n\n                if (premiums < purchaseQueue[i].premiums) {\n                    // Transfer leftover premiums back to the buyer\n                    asset.safeTransfer(\n                        purchaseQueue[i].buyer,\n                        purchaseQueue[i].premiums - premiums\n                    );\n\n                    totalPremiums += premiums;\n                } else {\n                    // If the settlement price exceed the buyer's price (ceiling price), the vault receives all\n                    // of the buyer's premiums at a worse price than the auction\n                    totalPremiums += purchaseQueue[i].premiums;\n                }\n\n                // Transfer options to the buyer\n                currentOption.safeTransfer(\n                    purchaseQueue[i].buyer,\n                    optionsAmount\n                );\n\n                // Deduct transferred options from allocatedOptions\n                allocatedOptions -= optionsAmount;\n            }\n        }\n\n        // Transfer premiums to the vault\n        if (totalPremiums != 0) asset.safeTransfer(msg.sender, totalPremiums);\n\n        // Clear purchase queue\n        delete purchases[msg.sender];\n        totalOptionsAmount[msg.sender] = 0;\n        // Purchase requests are unblocked\n        vaultAllocatedOptions[msg.sender] = 0;\n\n        emit OptionsSold(msg.sender, totalPremiums, totalOptions);\n\n        return totalPremiums;\n    }\n\n    /************************************************\n     *  OWNER OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Cancels all purchase requests for a delisted vault\n     * @dev Only callable by the owner. Will revert if options have already been allocated by the vault.\n     * @param vault The vault to cancel all purchases for\n     */\n    function cancelAllPurchases(address vault) external override onlyOwner {\n        // Revert if the vault is still listed\n        require(ceilingPrice[vault] == 0, \"Vault listed\");\n        // This prevents cancellations after the vault has set its allocation\n        require(vaultAllocatedOptions[vault] == 0, \"Vault allocated\");\n\n        IERC20 asset = IERC20(IRibbonThetaVault(vault).vaultParams().asset);\n        Purchase[] memory purchaseQueue = purchases[vault];\n\n        for (uint256 i; i < purchaseQueue.length; i++) {\n            // Refund premiums to the buyer\n            asset.safeTransfer(\n                purchaseQueue[i].buyer,\n                purchaseQueue[i].premiums\n            );\n\n            emit PurchaseCancelled(\n                purchaseQueue[i].buyer,\n                vault,\n                purchaseQueue[i].optionsAmount,\n                purchaseQueue[i].premiums\n            );\n        }\n\n        // Clear purchase queue\n        delete purchases[vault];\n        totalOptionsAmount[vault] = 0;\n    }\n\n    /************************************************\n     *  SETTERS\n     ***********************************************/\n\n    /**\n     * @notice Adds a buyer to the purchase queue whitelist\n     * @dev Only callable by the owner\n     * @param buyer The buyer to whitelist\n     */\n    function addWhitelist(address buyer) external override onlyOwner {\n        require(buyer != address(0), \"!buyer\");\n\n        whitelistedBuyer[buyer] = true;\n\n        emit AddWhitelist(buyer);\n    }\n\n    /**\n     * @notice Removes a buyer from the purchase queue whitelist\n     * @dev Only callable by the owner\n     * @param buyer The buyer to remove from the whitelist\n     */\n    function removeWhitelist(address buyer) external override onlyOwner {\n        require(buyer != address(0), \"!buyer\");\n\n        whitelistedBuyer[buyer] = false;\n\n        emit RemoveWhitelist(buyer);\n    }\n\n    /**\n     * @notice Set the ceiling price for a vault\n     * @dev Only callable by the owner\n     * @param vault The vault to set a ceiling price for\n     * @param price The ceiling price\n     */\n    function setCeilingPrice(address vault, uint256 price)\n        external\n        override\n        onlyOwner\n    {\n        require(vault != address(0), \"!vault\");\n\n        // Setting the ceiling price to 0 is the same as delisting a vault\n        ceilingPrice[vault] = price;\n\n        emit CeilingPriceUpdated(vault, price);\n    }\n\n    /**\n     * @notice Sets the minimum purchase amount for a vault\n     * @dev Only callable by the owner\n     * @param vault The vault to set the minimum purchase amount for\n     * @param optionsAmount The minimum options purchase amount\n     */\n    function setMinPurchaseAmount(address vault, uint256 optionsAmount)\n        external\n        override\n        onlyOwner\n    {\n        require(vault != address(0), \"!vault\");\n\n        minPurchaseAmount[vault] = optionsAmount;\n\n        emit MinPurchaseAmountUpdated(vault, optionsAmount);\n    }\n\n    /************************************************\n     *  GETTERS\n     ***********************************************/\n\n    /**\n     * @notice Gets all the purchase requests for a vault\n     * @param vault The vault to get purchase requests for\n     * @return purchases The purchase array\n     */\n    function getPurchases(address vault)\n        external\n        view\n        override\n        returns (Purchase[] memory)\n    {\n        return purchases[vault];\n    }\n\n    /**\n     * @notice Gets the premiums the buyer needs to deposit to request a certain amount of options\n     * @param vault The vault to purchase options from\n     * @param optionsAmount Amount of options requested\n     * @return premiums Premiums required to request a purchase\n     */\n    function getPremiums(address vault, uint256 optionsAmount)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        // premiums = optionsAmount * ceilingPrice\n        return\n            (optionsAmount * ceilingPrice[vault]) / (10**Vault.OTOKEN_DECIMALS);\n    }\n\n    /**\n     * @notice Gets the amount of options the vault can allocate to the queue\n     * @param vault The vault selling options to the queue\n     * @param allocatedOptions Maximum amount of options the vault can allocate to the queue\n     * @return allocatedOptions Actual amount of options the vault allocates to the queue\n     */\n    function getOptionsAllocation(address vault, uint256 allocatedOptions)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        // Prevent the vault from allocating more options than there are requested\n        uint256 optionsAmount =\n            totalOptionsAmount[vault] - vaultAllocatedOptions[vault];\n        // allocatedOptions = min(allocatedOptions, totalOptionsAmount[vault] - vaultAllocatedOptions[vault])\n        return\n            optionsAmount < allocatedOptions ? optionsAmount : allocatedOptions;\n    }\n}\n"
    },
    "contracts/utils/SAVAXDepositHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {ISAVAX} from \"../interfaces/ISAVAX.sol\";\nimport {IRibbonVault} from \"../interfaces/IRibbon.sol\";\n\ncontract SAVAXDepositHelper {\n    ISAVAX public immutable sAVAX;\n    IRibbonVault public immutable sAVAXVault;\n\n    constructor(address _sAVAX, address _sAVAXVault) {\n        require(_sAVAX != address(0), \"!sAVAX\");\n        require(_sAVAXVault != address(0), \"!sAVAXVault\");\n\n        sAVAX = ISAVAX(_sAVAX);\n        sAVAXVault = IRibbonVault(_sAVAXVault);\n    }\n\n    function deposit() external payable {\n        uint256 sAVAXAmount = sAVAX.submit{value: msg.value}();\n        sAVAX.approve(address(sAVAXVault), sAVAXAmount);\n        sAVAXVault.depositFor(sAVAXAmount, msg.sender);\n    }\n}\n"
    },
    "contracts/utils/Swap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Source: https://github.com/airswap/airswap-protocols/blob/main/source/swap/contracts/Swap.sol\n\npragma solidity =0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/ISwap.sol\";\nimport \"../storage/SwapStorage.sol\";\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {\n    OwnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {\n    ERC20Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport {IERC20Detailed} from \"../interfaces/IERC20Detailed.sol\";\n\ncontract Swap is\n    ISwap,\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable,\n    SwapStorage\n{\n    using SafeERC20 for IERC20;\n\n    uint256 public immutable DOMAIN_CHAIN_ID;\n\n    bytes32 public constant DOMAIN_TYPEHASH =\n        keccak256(\n            abi.encodePacked(\n                \"EIP712Domain(\",\n                \"string name,\",\n                \"string version,\",\n                \"uint256 chainId,\",\n                \"address verifyingContract\",\n                \")\"\n            )\n        );\n\n    bytes32 public constant BID_TYPEHASH =\n        keccak256(\n            abi.encodePacked(\n                \"Bid(\",\n                \"uint256 swapId,\",\n                \"uint256 nonce,\",\n                \"address signerWallet,\",\n                \"uint256 sellAmount,\",\n                \"uint256 buyAmount,\",\n                \"address referrer\",\n                \")\"\n            )\n        );\n\n    uint256 internal constant MAX_PERCENTAGE = 10000;\n    uint256 internal constant MAX_FEE = 1000;\n    uint256 internal constant MAX_ERROR_COUNT = 10;\n    uint256 internal constant OTOKEN_DECIMALS = 8;\n\n    /************************************************\n     *  CONSTRUCTOR\n     ***********************************************/\n\n    constructor() {\n        uint256 currentChainId = getChainId();\n        DOMAIN_CHAIN_ID = currentChainId;\n    }\n\n    /************************************************\n     *  INITIALIZATION\n     ***********************************************/\n\n    function initialize(\n        string memory _domainName,\n        string memory _domainVersion,\n        address _owner\n    ) external initializer {\n        require(bytes(_domainName).length > 0, \"!_domainName\");\n        require(bytes(_domainVersion).length > 0, \"!_domainVersion\");\n        require(_owner != address(0), \"!_owner\");\n\n        __ReentrancyGuard_init();\n        __Ownable_init();\n        transferOwnership(_owner);\n\n        DOMAIN_NAME = keccak256(bytes(_domainName));\n        DOMAIN_VERSION = keccak256(bytes(_domainVersion));\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                DOMAIN_TYPEHASH,\n                DOMAIN_NAME,\n                DOMAIN_VERSION,\n                DOMAIN_CHAIN_ID,\n                this\n            )\n        );\n    }\n\n    /************************************************\n     *  SETTER\n     ***********************************************/\n\n    /**\n     * @notice Sets the referral fee for a specific referrer\n     * @param referrer is the address of the referrer\n     * @param fee is the fee in percent in 2 decimals\n     */\n    function setFee(address referrer, uint256 fee) external onlyOwner {\n        require(referrer != address(0), \"Referrer cannot be the zero address\");\n        require(fee < MAX_FEE, \"Fee exceeds maximum\");\n\n        referralFees[referrer] = fee;\n\n        emit SetFee(referrer, fee);\n    }\n\n    /************************************************\n     *  OFFER CREATION AND SETTLEMENT\n     ***********************************************/\n\n    /**\n     * @notice Create a new offer available for swap\n     * @param oToken token offered by seller\n     * @param biddingToken token asked by seller\n     * @param minPrice minimum price of oToken denominated in biddingToken\n     * @param minBidSize minimum amount of oToken requested in a single bid\n     * @param totalSize amount of oToken offered by seller\n     */\n    function createOffer(\n        address oToken,\n        address biddingToken,\n        uint96 minPrice,\n        uint96 minBidSize,\n        uint128 totalSize\n    ) external override returns (uint256 swapId) {\n        require(oToken != address(0), \"oToken cannot be the zero address\");\n        require(\n            biddingToken != address(0),\n            \"BiddingToken cannot be the zero address\"\n        );\n        require(minPrice > 0, \"MinPrice must be larger than zero\");\n        require(minBidSize > 0, \"MinBidSize must be larger than zero\");\n        require(minBidSize <= totalSize, \"MinBidSize exceeds total size\");\n\n        offersCounter += 1;\n\n        swapId = offersCounter;\n\n        swapOffers[swapId].seller = msg.sender;\n        swapOffers[swapId].oToken = oToken;\n        swapOffers[swapId].biddingToken = biddingToken;\n        swapOffers[swapId].minBidSize = minBidSize;\n        swapOffers[swapId].minPrice = minPrice;\n        swapOffers[swapId].totalSize = totalSize;\n        swapOffers[swapId].availableSize = totalSize;\n        // We warm the storage slot with 1 wei so we avoid a cold SSTORE\n        swapOffers[swapId].totalSales = 1;\n\n        emit NewOffer(\n            swapId,\n            msg.sender,\n            oToken,\n            biddingToken,\n            minPrice,\n            minBidSize,\n            totalSize\n        );\n    }\n\n    /**\n     * @notice Settles the swap offering by iterating through the bids\n     * @param swapId unique identifier of the swap offer\n     * @param bids bids for swaps\n     */\n    function settleOffer(uint256 swapId, Bid[] calldata bids)\n        external\n        override\n        nonReentrant\n    {\n        Offer storage offer = swapOffers[swapId];\n\n        address seller = offer.seller;\n        require(\n            seller == msg.sender,\n            \"Only seller can settle or offer doesn't exist\"\n        );\n        require(offer.availableSize > 0, \"Offer fully settled\");\n\n        uint256 totalSales;\n        OfferDetails memory offerDetails;\n        offerDetails.seller = seller;\n        offerDetails.oToken = offer.oToken;\n        offerDetails.biddingToken = offer.biddingToken;\n        offerDetails.minPrice = offer.minPrice;\n        offerDetails.minBidSize = offer.minBidSize;\n\n        for (uint256 i = 0; i < bids.length; i++) {\n            require(\n                swapId == bids[i].swapId,\n                \"Offer and bid swapId mismatched\"\n            );\n\n            _swap(offerDetails, offer, bids[i]);\n            totalSales += bids[i].sellAmount;\n        }\n\n        bool fullySettled = offer.availableSize == 0;\n\n        // Deduct the initial 1 wei offset if offer is fully settled\n        offer.totalSales += totalSales - (fullySettled ? 1 : 0);\n\n        if (fullySettled) {\n            offer.seller = address(0);\n            offer.oToken = address(0);\n            offer.biddingToken = address(0);\n            offer.minBidSize = 0;\n            offer.minPrice = 0;\n\n            emit SettleOffer(swapId);\n        }\n    }\n\n    /**\n     * @notice Authorize a signer\n     * @param signer address Wallet of the signer to authorize\n     * @dev Emits an Authorize event\n     */\n    function authorize(address signer) external override {\n        require(signer != address(0), \"SIGNER_INVALID\");\n        authorized[msg.sender] = signer;\n        emit Authorize(signer, msg.sender);\n    }\n\n    /**\n     * @notice Revoke the signer\n     * @dev Emits a Revoke event\n     */\n    function revoke() external override {\n        address tmp = authorized[msg.sender];\n        delete authorized[msg.sender];\n        emit Revoke(tmp, msg.sender);\n    }\n\n    /**\n     * @notice Cancel one or more nonces\n     * @dev Cancelled nonces are marked as used\n     * @dev Emits a Cancel event\n     * @dev Out of gas may occur in arrays of length > 400\n     * @param nonces uint256[] List of nonces to cancel\n     */\n    function cancelNonce(uint256[] calldata nonces) external override {\n        for (uint256 i = 0; i < nonces.length; i++) {\n            uint256 nonce = nonces[i];\n            if (_markNonceAsUsed(msg.sender, nonce)) {\n                emit Cancel(nonce, msg.sender);\n            }\n        }\n    }\n\n    /************************************************\n     *  PUBLIC VIEW FUNCTIONS\n     ***********************************************/\n\n    /**\n     * @notice Validates Swap bid for any potential errors\n     * @param bid Bid struct containing bid details\n     * @return tuple of error count and bytes32[] memory array of error messages\n     */\n    function check(Bid calldata bid)\n        external\n        view\n        override\n        returns (uint256, bytes32[] memory)\n    {\n        Offer memory offer = swapOffers[bid.swapId];\n        require(offer.seller != address(0), \"Offer does not exist\");\n\n        bytes32[] memory errors = new bytes32[](MAX_ERROR_COUNT);\n\n        uint256 errCount;\n\n        // Check signature\n        address signatory = _getSignatory(bid);\n\n        if (signatory == address(0)) {\n            errors[errCount] = \"SIGNATURE_INVALID\";\n            errCount++;\n        }\n\n        if (\n            bid.signerWallet != signatory &&\n            authorized[bid.signerWallet] != signatory\n        ) {\n            errors[errCount] = \"UNAUTHORIZED\";\n            errCount++;\n        }\n\n        // Check nonce\n        if (nonceUsed(signatory, bid.nonce)) {\n            errors[errCount] = \"NONCE_ALREADY_USED\";\n            errCount++;\n        }\n\n        // Check bid size\n        if (bid.buyAmount < offer.minBidSize) {\n            errors[errCount] = \"BID_TOO_SMALL\";\n            errCount++;\n        }\n        if (bid.buyAmount > offer.availableSize) {\n            errors[errCount] = \"BID_EXCEED_AVAILABLE_SIZE\";\n            errCount++;\n        }\n\n        // Check bid price\n        uint256 bidPrice =\n            (bid.sellAmount * 10**OTOKEN_DECIMALS) / bid.buyAmount;\n        if (bidPrice < offer.minPrice) {\n            errors[errCount] = \"PRICE_TOO_LOW\";\n            errCount++;\n        }\n\n        // Check signer allowance\n        uint256 signerAllowance =\n            IERC20(offer.biddingToken).allowance(\n                bid.signerWallet,\n                address(this)\n            );\n        if (signerAllowance < bid.sellAmount) {\n            errors[errCount] = \"SIGNER_ALLOWANCE_LOW\";\n            errCount++;\n        }\n\n        // Check signer balance\n        uint256 signerBalance =\n            IERC20(offer.biddingToken).balanceOf(bid.signerWallet);\n        if (signerBalance < bid.sellAmount) {\n            errors[errCount] = \"SIGNER_BALANCE_LOW\";\n            errCount++;\n        }\n\n        // Check seller allowance\n        uint256 sellerAllowance =\n            IERC20(offer.oToken).allowance(offer.seller, address(this));\n        if (sellerAllowance < bid.buyAmount) {\n            errors[errCount] = \"SELLER_ALLOWANCE_LOW\";\n            errCount++;\n        }\n\n        // Check seller balance\n        uint256 sellerBalance = IERC20(offer.oToken).balanceOf(offer.seller);\n        if (sellerBalance < bid.buyAmount) {\n            errors[errCount] = \"SELLER_BALANCE_LOW\";\n            errCount++;\n        }\n\n        return (errCount, errors);\n    }\n\n    /**\n     * @notice Returns the average settlement price for a swap offer\n     * @param swapId unique identifier of the swap offer\n     */\n    function averagePriceForOffer(uint256 swapId)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        Offer storage offer = swapOffers[swapId];\n        require(offer.totalSize != 0, \"Offer does not exist\");\n\n        uint256 availableSize = offer.availableSize;\n\n        // Deduct the initial 1 wei offset if offer is not fully settled\n        uint256 adjustment = availableSize != 0 ? 1 : 0;\n\n        return\n            ((offer.totalSales - adjustment) * (10**8)) /\n            (offer.totalSize - availableSize);\n    }\n\n    /**\n     * @notice Returns true if the nonce has been used\n     * @param signer address Address of the signer\n     * @param nonce uint256 Nonce being checked\n     */\n    function nonceUsed(address signer, uint256 nonce)\n        public\n        view\n        override\n        returns (bool)\n    {\n        uint256 groupKey = nonce / 256;\n        uint256 indexInGroup = nonce % 256;\n        return (_nonceGroups[signer][groupKey] >> indexInGroup) & 1 == 1;\n    }\n\n    /************************************************\n     *  INTERNAL FUNCTIONS\n     ***********************************************/\n\n    /**\n     * @notice Swap Atomic ERC20 Swap\n     * @param details Details of offering\n     * @param offer Offer struct containing offer details\n     * @param bid Bid struct containing bid details\n     */\n    function _swap(\n        OfferDetails memory details,\n        Offer storage offer,\n        Bid calldata bid\n    ) internal {\n        require(DOMAIN_CHAIN_ID == getChainId(), \"CHAIN_ID_CHANGED\");\n\n        address signatory = _getSignatory(bid);\n\n        require(signatory != address(0), \"SIGNATURE_INVALID\");\n\n        if (bid.signerWallet != signatory) {\n            require(authorized[bid.signerWallet] == signatory, \"UNAUTHORIZED\");\n        }\n\n        require(_markNonceAsUsed(signatory, bid.nonce), \"NONCE_ALREADY_USED\");\n        require(\n            bid.buyAmount <= offer.availableSize,\n            \"BID_EXCEED_AVAILABLE_SIZE\"\n        );\n        require(bid.buyAmount >= details.minBidSize, \"BID_TOO_SMALL\");\n\n        // Ensure min. price is met\n        uint256 bidPrice =\n            (bid.sellAmount * 10**OTOKEN_DECIMALS) / bid.buyAmount;\n        require(bidPrice >= details.minPrice, \"PRICE_TOO_LOW\");\n\n        // don't have to do a uint128 check because we already check\n        // that bid.buyAmount <= offer.availableSize\n        offer.availableSize -= uint128(bid.buyAmount);\n\n        // Transfer token from sender to signer\n        IERC20(details.oToken).safeTransferFrom(\n            details.seller,\n            bid.signerWallet,\n            bid.buyAmount\n        );\n\n        // Transfer to referrer if any\n        uint256 feeAmount;\n        if (bid.referrer != address(0)) {\n            uint256 feePercent = referralFees[bid.referrer];\n\n            if (feePercent > 0) {\n                feeAmount = (bid.sellAmount * feePercent) / MAX_PERCENTAGE;\n\n                IERC20(details.biddingToken).safeTransferFrom(\n                    bid.signerWallet,\n                    bid.referrer,\n                    feeAmount\n                );\n            }\n        }\n\n        // Transfer token from signer to recipient\n        IERC20(details.biddingToken).safeTransferFrom(\n            bid.signerWallet,\n            details.seller,\n            bid.sellAmount - feeAmount\n        );\n\n        // Emit a Swap event\n        emit Swap(\n            bid.swapId,\n            bid.nonce,\n            bid.signerWallet,\n            bid.sellAmount,\n            bid.buyAmount,\n            bid.referrer,\n            feeAmount\n        );\n    }\n\n    /**\n     * @notice Marks a nonce as used for the given signer\n     * @param signer address Address of the signer for which to mark the nonce as used\n     * @param nonce uint256 Nonce to be marked as used\n     * @return bool True if the nonce was not marked as used already\n     */\n    function _markNonceAsUsed(address signer, uint256 nonce)\n        internal\n        returns (bool)\n    {\n        uint256 groupKey = nonce / 256;\n        uint256 indexInGroup = nonce % 256;\n        uint256 group = _nonceGroups[signer][groupKey];\n\n        // If it is already used, return false\n        if ((group >> indexInGroup) & 1 == 1) {\n            return false;\n        }\n\n        _nonceGroups[signer][groupKey] = group | (uint256(1) << indexInGroup);\n\n        return true;\n    }\n\n    /**\n     * @notice Recover the signatory from a signature\n     * @param bid Bid struct containing bid details\n     */\n    function _getSignatory(Bid calldata bid) internal view returns (address) {\n        return\n            ecrecover(\n                keccak256(\n                    abi.encodePacked(\n                        \"\\x19\\x01\",\n                        DOMAIN_SEPARATOR,\n                        keccak256(\n                            abi.encode(\n                                BID_TYPEHASH,\n                                bid.swapId,\n                                bid.nonce,\n                                bid.signerWallet,\n                                bid.sellAmount,\n                                bid.buyAmount,\n                                bid.referrer\n                            )\n                        )\n                    )\n                ),\n                bid.v,\n                bid.r,\n                bid.s\n            );\n    }\n\n    /**\n     * @notice Returns the current chainId using the chainid opcode\n     * @return id uint256 The chain id\n     */\n    function getChainId() internal view returns (uint256 id) {\n        // no-inline-assembly\n        assembly {\n            id := chainid()\n        }\n    }\n}"
    },
    "contracts/vaults/BaseVaults/base/RibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {\n    OwnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {\n    ERC20Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\nimport {Vault} from \"../../../libraries/Vault.sol\";\nimport {VaultLifecycle} from \"../../../libraries/VaultLifecycle.sol\";\nimport {ShareMath} from \"../../../libraries/ShareMath.sol\";\nimport {IWETH} from \"../../../interfaces/IWETH.sol\";\n\ncontract RibbonVault is\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable,\n    ERC20Upgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using ShareMath for Vault.DepositReceipt;\n\n    /************************************************\n     *  NON UPGRADEABLE STORAGE\n     ***********************************************/\n\n    /// @notice Stores the user's pending deposit for the round\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\n\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\n    /// This is used to determine the number of shares to be returned\n    /// to a user with their DepositReceipt.depositAmount\n    mapping(uint256 => uint256) public roundPricePerShare;\n\n    /// @notice Stores pending user withdrawals\n    mapping(address => Vault.Withdrawal) public withdrawals;\n\n    /// @notice Vault's parameters like cap, decimals\n    Vault.VaultParams public vaultParams;\n\n    /// @notice Vault's lifecycle state like round and locked amounts\n    Vault.VaultState public vaultState;\n\n    /// @notice Vault's state of the options sold and the timelocked option\n    Vault.OptionState public optionState;\n\n    /// @notice Fee recipient for the performance and management fees\n    address public feeRecipient;\n\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\n    // no access to critical vault changes\n    address public keeper;\n\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\n    uint256 public performanceFee;\n\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\n    uint256 public managementFee;\n\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\n    uint256[30] private ____gap;\n\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\n\n    /************************************************\n     *  IMMUTABLES & CONSTANTS\n     ***********************************************/\n\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n    address public immutable WETH;\n\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\n    address public immutable USDC;\n\n    /// @notice Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\n    uint256 public constant DELAY = 0;\n\n    /// @notice 7 day period between each options sale.\n    uint256 public constant PERIOD = 7 days;\n\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\n\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\n    // which allows users to perform multiple actions on their vaults\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\n    address public immutable GAMMA_CONTROLLER;\n\n    // MARGIN_POOL is Gamma protocol's collateral pool.\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\n    address public immutable MARGIN_POOL;\n\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\n    address public immutable GNOSIS_EASY_AUCTION;\n\n    /************************************************\n     *  EVENTS\n     ***********************************************/\n\n    event Deposit(address indexed account, uint256 amount, uint256 round);\n\n    event InitiateWithdraw(\n        address indexed account,\n        uint256 shares,\n        uint256 round\n    );\n\n    event Redeem(address indexed account, uint256 share, uint256 round);\n\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\n\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\n\n    event CapSet(uint256 oldCap, uint256 newCap);\n\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\n\n    event CollectVaultFees(\n        uint256 performanceFee,\n        uint256 vaultFee,\n        uint256 round,\n        address indexed feeRecipient\n    );\n\n    /************************************************\n     *  CONSTRUCTOR & INITIALIZATION\n     ***********************************************/\n\n    /**\n     * @notice Initializes the contract with immutable variables\n     * @param _weth is the Wrapped Ether contract\n     * @param _usdc is the USDC contract\n     * @param _gammaController is the contract address for opyn actions\n     * @param _marginPool is the contract address for providing collateral to opyn\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\n     */\n    constructor(\n        address _weth,\n        address _usdc,\n        address _gammaController,\n        address _marginPool,\n        address _gnosisEasyAuction\n    ) {\n        require(_weth != address(0), \"!_weth\");\n        require(_usdc != address(0), \"!_usdc\");\n        require(_gnosisEasyAuction != address(0), \"!_gnosisEasyAuction\");\n        require(_gammaController != address(0), \"!_gammaController\");\n        require(_marginPool != address(0), \"!_marginPool\");\n\n        WETH = _weth;\n        USDC = _usdc;\n        GAMMA_CONTROLLER = _gammaController;\n        MARGIN_POOL = _marginPool;\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\n    }\n\n    /**\n     * @notice Initializes the OptionVault contract with storage variables.\n     */\n    function baseInitialize(\n        address _owner,\n        address _keeper,\n        address _feeRecipient,\n        uint256 _managementFee,\n        uint256 _performanceFee,\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        Vault.VaultParams calldata _vaultParams\n    ) internal initializer {\n        VaultLifecycle.verifyInitializerParams(\n            _owner,\n            _keeper,\n            _feeRecipient,\n            _performanceFee,\n            _managementFee,\n            _tokenName,\n            _tokenSymbol,\n            _vaultParams\n        );\n\n        __ReentrancyGuard_init();\n        __ERC20_init(_tokenName, _tokenSymbol);\n        __Ownable_init();\n        transferOwnership(_owner);\n\n        keeper = _keeper;\n\n        feeRecipient = _feeRecipient;\n        performanceFee = _performanceFee;\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\n            WEEKS_PER_YEAR\n        );\n        vaultParams = _vaultParams;\n\n        uint256 assetBalance =\n            IERC20(vaultParams.asset).balanceOf(address(this));\n        ShareMath.assertUint104(assetBalance);\n        vaultState.lastLockedAmount = uint104(assetBalance);\n\n        vaultState.round = 1;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the keeper.\n     */\n    modifier onlyKeeper() {\n        require(msg.sender == keeper, \"!keeper\");\n        _;\n    }\n\n    /************************************************\n     *  SETTERS\n     ***********************************************/\n\n    /**\n     * @notice Sets the new keeper\n     * @param newKeeper is the address of the new keeper\n     */\n    function setNewKeeper(address newKeeper) external onlyOwner {\n        require(newKeeper != address(0), \"!newKeeper\");\n        keeper = newKeeper;\n    }\n\n    /**\n     * @notice Sets the new fee recipient\n     * @param newFeeRecipient is the address of the new fee recipient\n     */\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\n        feeRecipient = newFeeRecipient;\n    }\n\n    /**\n     * @notice Sets the management fee for the vault\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\n     */\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\n        require(\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\n            \"Invalid management fee\"\n        );\n\n        // We are dividing annualized management fee by num weeks in a year\n        uint256 tmpManagementFee =\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\n\n        emit ManagementFeeSet(managementFee, newManagementFee);\n\n        managementFee = tmpManagementFee;\n    }\n\n    /**\n     * @notice Sets the performance fee for the vault\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\n     */\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\n        require(\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\n            \"Invalid performance fee\"\n        );\n\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\n\n        performanceFee = newPerformanceFee;\n    }\n\n    /**\n     * @notice Sets a new cap for deposits\n     * @param newCap is the new cap for deposits\n     */\n    function setCap(uint256 newCap) external onlyOwner {\n        require(newCap > 0, \"!newCap\");\n        ShareMath.assertUint104(newCap);\n        emit CapSet(vaultParams.cap, newCap);\n        vaultParams.cap = uint104(newCap);\n    }\n\n    /************************************************\n     *  DEPOSIT & WITHDRAWALS\n     ***********************************************/\n\n    /**\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\n     */\n    function depositETH() external payable nonReentrant {\n        require(vaultParams.asset == WETH, \"!WETH\");\n        require(msg.value > 0, \"!value\");\n\n        _depositFor(msg.value, msg.sender);\n\n        IWETH(WETH).deposit{value: msg.value}();\n    }\n\n    /**\n     * @notice Deposits the `asset` from msg.sender.\n     * @param amount is the amount of `asset` to deposit\n     */\n    function deposit(uint256 amount) external nonReentrant {\n        require(amount > 0, \"!amount\");\n\n        _depositFor(amount, msg.sender);\n\n        // An approve() by the msg.sender is required beforehand\n        IERC20(vaultParams.asset).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    /**\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\n     * @notice Used for vault -> vault deposits on the user's behalf\n     * @param amount is the amount of `asset` to deposit\n     * @param creditor is the address that can claim/withdraw deposited amount\n     */\n    function depositFor(uint256 amount, address creditor)\n        external\n        nonReentrant\n    {\n        require(amount > 0, \"!amount\");\n        require(creditor != address(0));\n\n        _depositFor(amount, creditor);\n\n        // An approve() by the msg.sender is required beforehand\n        IERC20(vaultParams.asset).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    /**\n     * @notice Mints the vault shares to the creditor\n     * @param amount is the amount of `asset` deposited\n     * @param creditor is the address to receieve the deposit\n     */\n    function _depositFor(uint256 amount, address creditor) private {\n        uint256 currentRound = vaultState.round;\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\n\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\n        require(\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\n            \"Insufficient balance\"\n        );\n\n        emit Deposit(creditor, amount, currentRound);\n\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\n\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                currentRound,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        uint256 depositAmount = amount;\n\n        // If we have a pending deposit in the current round, we add on to the pending deposit\n        if (currentRound == depositReceipt.round) {\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\n            depositAmount = newAmount;\n        }\n\n        ShareMath.assertUint104(depositAmount);\n\n        depositReceipts[creditor] = Vault.DepositReceipt({\n            round: uint16(currentRound),\n            amount: uint104(depositAmount),\n            unredeemedShares: uint128(unredeemedShares)\n        });\n\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\n        ShareMath.assertUint128(newTotalPending);\n\n        vaultState.totalPending = uint128(newTotalPending);\n    }\n\n    /**\n     * @notice Initiates a withdrawal that can be processed once the round completes\n     * @param numShares is the number of shares to withdraw\n     */\n    function _initiateWithdraw(uint256 numShares) internal {\n        require(numShares > 0, \"!numShares\");\n\n        // We do a max redeem before initiating a withdrawal\n        // But we check if they must first have unredeemed shares\n        if (\n            depositReceipts[msg.sender].amount > 0 ||\n            depositReceipts[msg.sender].unredeemedShares > 0\n        ) {\n            _redeem(0, true);\n        }\n\n        // This caches the `round` variable used in shareBalances\n        uint256 currentRound = vaultState.round;\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\n\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\n\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\n\n        uint256 existingShares = uint256(withdrawal.shares);\n\n        uint256 withdrawalShares;\n        if (withdrawalIsSameRound) {\n            withdrawalShares = existingShares.add(numShares);\n        } else {\n            require(existingShares == 0, \"Existing withdraw\");\n            withdrawalShares = numShares;\n            withdrawals[msg.sender].round = uint16(currentRound);\n        }\n\n        ShareMath.assertUint128(withdrawalShares);\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\n\n        _transfer(msg.sender, address(this), numShares);\n    }\n\n    /**\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\n     * @return withdrawAmount the current withdrawal amount\n     */\n    function _completeWithdraw() internal returns (uint256) {\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\n\n        uint256 withdrawalShares = withdrawal.shares;\n        uint256 withdrawalRound = withdrawal.round;\n\n        // This checks if there is a withdrawal\n        require(withdrawalShares > 0, \"Not initiated\");\n\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\n\n        // We leave the round number as non-zero to save on gas for subsequent writes\n        withdrawals[msg.sender].shares = 0;\n        vaultState.queuedWithdrawShares = uint128(\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\n        );\n\n        uint256 withdrawAmount =\n            ShareMath.sharesToAsset(\n                withdrawalShares,\n                roundPricePerShare[withdrawalRound],\n                vaultParams.decimals\n            );\n\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\n\n        _burn(address(this), withdrawalShares);\n\n        require(withdrawAmount > 0, \"!withdrawAmount\");\n        transferAsset(msg.sender, withdrawAmount);\n\n        return withdrawAmount;\n    }\n\n    /**\n     * @notice Redeems shares that are owed to the account\n     * @param numShares is the number of shares to redeem\n     */\n    function redeem(uint256 numShares) external nonReentrant {\n        require(numShares > 0, \"!numShares\");\n        _redeem(numShares, false);\n    }\n\n    /**\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\n     */\n    function maxRedeem() external nonReentrant {\n        _redeem(0, true);\n    }\n\n    /**\n     * @notice Redeems shares that are owed to the account\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\n     * @param isMax is flag for when callers do a max redemption\n     */\n    function _redeem(uint256 numShares, bool isMax) internal {\n        Vault.DepositReceipt memory depositReceipt =\n            depositReceipts[msg.sender];\n\n        // This handles the null case when depositReceipt.round = 0\n        // Because we start with round = 1 at `initialize`\n        uint256 currentRound = vaultState.round;\n\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                currentRound,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        numShares = isMax ? unredeemedShares : numShares;\n        if (numShares == 0) {\n            return;\n        }\n        require(numShares <= unredeemedShares, \"Exceeds available\");\n\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\n        // we debit from the unredeemedShares, but leave the amount field intact\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\n        if (depositReceipt.round < currentRound) {\n            depositReceipts[msg.sender].amount = 0;\n        }\n\n        ShareMath.assertUint128(numShares);\n        depositReceipts[msg.sender].unredeemedShares = uint128(\n            unredeemedShares.sub(numShares)\n        );\n\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\n\n        _transfer(address(this), msg.sender, numShares);\n    }\n\n    /************************************************\n     *  VAULT OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\n     * @param numRounds is the number of rounds to initialize in the map\n     */\n    function initRounds(uint256 numRounds) external nonReentrant {\n        require(numRounds > 0, \"!numRounds\");\n\n        uint256 _round = vaultState.round;\n        for (uint256 i = 0; i < numRounds; i++) {\n            uint256 index = _round + i;\n            require(roundPricePerShare[index] == 0, \"Initialized\"); // AVOID OVERWRITING ACTUAL VALUES\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\n        }\n    }\n\n    /**\n     * @notice Helper function that performs most administrative tasks\n     * such as setting next option, minting new shares, getting vault fees, etc.\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\n     * @return newOption is the new option address\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\n     */\n    function _rollToNextOption(\n        uint256 lastQueuedWithdrawAmount,\n        uint256 currentQueuedWithdrawShares\n    )\n        internal\n        returns (\n            address newOption,\n            uint256 lockedBalance,\n            uint256 queuedWithdrawAmount\n        )\n    {\n        require(block.timestamp >= optionState.nextOptionReadyAt, \"!ready\");\n\n        newOption = optionState.nextOption;\n        require(newOption != address(0), \"!nextOption\");\n\n        address recipient = feeRecipient;\n        uint256 mintShares;\n        uint256 performanceFeeInAsset;\n        uint256 totalVaultFee;\n        {\n            uint256 newPricePerShare;\n            (\n                lockedBalance,\n                queuedWithdrawAmount,\n                newPricePerShare,\n                mintShares,\n                performanceFeeInAsset,\n                totalVaultFee\n            ) = VaultLifecycle.rollover(\n                vaultState,\n                VaultLifecycle.RolloverParams(\n                    vaultParams.decimals,\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\n                    totalSupply(),\n                    lastQueuedWithdrawAmount,\n                    performanceFee,\n                    managementFee,\n                    currentQueuedWithdrawShares\n                )\n            );\n\n            optionState.currentOption = newOption;\n            optionState.nextOption = address(0);\n\n            // Finalize the pricePerShare at the end of the round\n            uint256 currentRound = vaultState.round;\n            roundPricePerShare[currentRound] = newPricePerShare;\n\n            emit CollectVaultFees(\n                performanceFeeInAsset,\n                totalVaultFee,\n                currentRound,\n                recipient\n            );\n\n            vaultState.totalPending = 0;\n            vaultState.round = uint16(currentRound + 1);\n        }\n\n        _mint(address(this), mintShares);\n\n        if (totalVaultFee > 0) {\n            transferAsset(payable(recipient), totalVaultFee);\n        }\n\n        return (newOption, lockedBalance, queuedWithdrawAmount);\n    }\n\n    /**\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\n     * @param recipient is the receiving address\n     * @param amount is the transfer amount\n     */\n    function transferAsset(address recipient, uint256 amount) internal {\n        address asset = vaultParams.asset;\n        if (asset == WETH) {\n            IWETH(WETH).withdraw(amount);\n            (bool success, ) = recipient.call{value: amount}(\"\");\n            require(success, \"Transfer failed\");\n            return;\n        }\n        IERC20(asset).safeTransfer(recipient, amount);\n    }\n\n    /************************************************\n     *  GETTERS\n     ***********************************************/\n\n    /**\n     * @notice Returns the asset balance held on the vault for the account\n     * @param account is the address to lookup balance for\n     * @return the amount of `asset` custodied by the vault for the user\n     */\n    function accountVaultBalance(address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 _decimals = vaultParams.decimals;\n        uint256 assetPerShare =\n            ShareMath.pricePerShare(\n                totalSupply(),\n                totalBalance(),\n                vaultState.totalPending,\n                _decimals\n            );\n        return\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\n    }\n\n    /**\n     * @notice Getter for returning the account's share balance including unredeemed shares\n     * @param account is the account to lookup share balance for\n     * @return the share balance\n     */\n    function shares(address account) public view returns (uint256) {\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\n        return heldByAccount.add(heldByVault);\n    }\n\n    /**\n     * @notice Getter for returning the account's share balance split between account and vault holdings\n     * @param account is the account to lookup share balance for\n     * @return heldByAccount is the shares held by account\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\n     */\n    function shareBalances(address account)\n        public\n        view\n        returns (uint256 heldByAccount, uint256 heldByVault)\n    {\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\n\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\n            return (balanceOf(account), 0);\n        }\n\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                vaultState.round,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        return (balanceOf(account), unredeemedShares);\n    }\n\n    /**\n     * @notice The price of a unit of share denominated in the `asset`\n     */\n    function pricePerShare() external view returns (uint256) {\n        return\n            ShareMath.pricePerShare(\n                totalSupply(),\n                totalBalance(),\n                vaultState.totalPending,\n                vaultParams.decimals\n            );\n    }\n\n    /**\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\n     * @return total balance of the vault, including the amounts locked in third party protocols\n     */\n    function totalBalance() public view returns (uint256) {\n        return\n            uint256(vaultState.lockedAmount).add(\n                IERC20(vaultParams.asset).balanceOf(address(this))\n            );\n    }\n\n    /**\n     * @notice Returns the token decimals\n     */\n    function decimals() public view override returns (uint8) {\n        return vaultParams.decimals;\n    }\n\n    function cap() external view returns (uint256) {\n        return vaultParams.cap;\n    }\n\n    function nextOptionReadyAt() external view returns (uint256) {\n        return optionState.nextOptionReadyAt;\n    }\n\n    function currentOption() external view returns (address) {\n        return optionState.currentOption;\n    }\n\n    function nextOption() external view returns (address) {\n        return optionState.nextOption;\n    }\n\n    function totalPending() external view returns (uint256) {\n        return vaultState.totalPending;\n    }\n}\n"
    },
    "contracts/vaults/BaseVaults/RibbonThetaVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {GnosisAuction} from \"../../libraries/GnosisAuction.sol\";\nimport {\n    RibbonThetaVaultStorage\n} from \"../../storage/RibbonThetaVaultStorage.sol\";\nimport {Vault} from \"../../libraries/Vault.sol\";\nimport {VaultLifecycle} from \"../../libraries/VaultLifecycle.sol\";\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\nimport {ILiquidityGauge} from \"../../interfaces/ILiquidityGauge.sol\";\nimport {RibbonVault} from \"./base/RibbonVault.sol\";\n\n/**\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\n * the inheritance chain closely.\n * Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage.\n * RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\n */\ncontract RibbonThetaVault is RibbonVault, RibbonThetaVaultStorage {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using ShareMath for Vault.DepositReceipt;\n\n    /************************************************\n     *  IMMUTABLES & CONSTANTS\n     ***********************************************/\n\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\n    address public immutable OTOKEN_FACTORY;\n\n    // The minimum duration for an option auction.\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\n\n    /************************************************\n     *  EVENTS\n     ***********************************************/\n\n    event OpenShort(\n        address indexed options,\n        uint256 depositAmount,\n        address indexed manager\n    );\n\n    event CloseShort(\n        address indexed options,\n        uint256 withdrawAmount,\n        address indexed manager\n    );\n\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\n\n    event PremiumDiscountSet(\n        uint256 premiumDiscount,\n        uint256 newPremiumDiscount\n    );\n\n    event AuctionDurationSet(\n        uint256 auctionDuration,\n        uint256 newAuctionDuration\n    );\n\n    event InstantWithdraw(\n        address indexed account,\n        uint256 amount,\n        uint256 round\n    );\n\n    event InitiateGnosisAuction(\n        address indexed auctioningToken,\n        address indexed biddingToken,\n        uint256 auctionCounter,\n        address indexed manager\n    );\n\n    /************************************************\n     *  STRUCTS\n     ***********************************************/\n\n    /**\n     * @notice Initialization parameters for the vault.\n     * @param _owner is the owner of the vault with critical permissions\n     * @param _feeRecipient is the address to recieve vault performance and management fees\n     * @param _managementFee is the management fee pct.\n     * @param _performanceFee is the perfomance fee pct.\n     * @param _tokenName is the name of the token\n     * @param _tokenSymbol is the symbol of the token\n     * @param _optionsPremiumPricer is the address of the contract with the\n       black-scholes premium calculation logic\n     * @param _strikeSelection is the address of the contract with strike selection logic\n     * @param _premiumDiscount is the vault's discount applied to the premium\n     * @param _auctionDuration is the duration of the gnosis auction\n     */\n    struct InitParams {\n        address _owner;\n        address _keeper;\n        address _feeRecipient;\n        uint256 _managementFee;\n        uint256 _performanceFee;\n        string _tokenName;\n        string _tokenSymbol;\n        address _optionsPremiumPricer;\n        address _strikeSelection;\n        uint32 _premiumDiscount;\n        uint256 _auctionDuration;\n    }\n\n    /************************************************\n     *  CONSTRUCTOR & INITIALIZATION\n     ***********************************************/\n\n    /**\n     * @notice Initializes the contract with immutable variables\n     * @param _weth is the Wrapped Ether contract\n     * @param _usdc is the USDC contract\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\n     * @param _gammaController is the contract address for opyn actions\n     * @param _marginPool is the contract address for providing collateral to opyn\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\n     */\n    constructor(\n        address _weth,\n        address _usdc,\n        address _oTokenFactory,\n        address _gammaController,\n        address _marginPool,\n        address _gnosisEasyAuction\n    )\n        RibbonVault(\n            _weth,\n            _usdc,\n            _gammaController,\n            _marginPool,\n            _gnosisEasyAuction\n        )\n    {\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\n        OTOKEN_FACTORY = _oTokenFactory;\n    }\n\n    /**\n     * @notice Initializes the OptionVault contract with storage variables.\n     * @param _initParams is the struct with vault initialization parameters\n     * @param _vaultParams is the struct with vault general data\n     */\n    function initialize(\n        InitParams calldata _initParams,\n        Vault.VaultParams calldata _vaultParams\n    ) external initializer {\n        baseInitialize(\n            _initParams._owner,\n            _initParams._keeper,\n            _initParams._feeRecipient,\n            _initParams._managementFee,\n            _initParams._performanceFee,\n            _initParams._tokenName,\n            _initParams._tokenSymbol,\n            _vaultParams\n        );\n        require(\n            _initParams._optionsPremiumPricer != address(0),\n            \"!_optionsPremiumPricer\"\n        );\n        require(\n            _initParams._strikeSelection != address(0),\n            \"!_strikeSelection\"\n        );\n        require(\n            _initParams._premiumDiscount > 0 &&\n                _initParams._premiumDiscount <\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\n            \"!_premiumDiscount\"\n        );\n        require(\n            _initParams._auctionDuration >= MIN_AUCTION_DURATION,\n            \"!_auctionDuration\"\n        );\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\n        strikeSelection = _initParams._strikeSelection;\n        premiumDiscount = _initParams._premiumDiscount;\n        auctionDuration = _initParams._auctionDuration;\n    }\n\n    /************************************************\n     *  SETTERS\n     ***********************************************/\n\n    /**\n     * @notice Sets the new discount on premiums for options we are selling\n     * @param newPremiumDiscount is the premium discount\n     */\n    function setPremiumDiscount(uint256 newPremiumDiscount)\n        external\n        onlyKeeper\n    {\n        require(\n            newPremiumDiscount > 0 &&\n                newPremiumDiscount <= 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\n            \"Invalid discount\"\n        );\n\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\n\n        premiumDiscount = newPremiumDiscount;\n    }\n\n    /**\n     * @notice Sets the new auction duration\n     * @param newAuctionDuration is the auction duration\n     */\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\n        require(\n            newAuctionDuration >= MIN_AUCTION_DURATION,\n            \"Invalid auction duration\"\n        );\n\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\n\n        auctionDuration = newAuctionDuration;\n    }\n\n    /**\n     * @notice Sets the new strike selection contract\n     * @param newStrikeSelection is the address of the new strike selection contract\n     */\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\n        require(newStrikeSelection != address(0), \"!newStrikeSelection\");\n        strikeSelection = newStrikeSelection;\n    }\n\n    /**\n     * @notice Sets the new options premium pricer contract\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\n     */\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\n        external\n        onlyOwner\n    {\n        require(\n            newOptionsPremiumPricer != address(0),\n            \"!newOptionsPremiumPricer\"\n        );\n        optionsPremiumPricer = newOptionsPremiumPricer;\n    }\n\n    /**\n     * @notice Optionality to set strike price manually\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\n     */\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\n        require(strikePrice > 0, \"!strikePrice\");\n        overriddenStrikePrice = strikePrice;\n        lastStrikeOverrideRound = vaultState.round;\n    }\n\n    /**\n     * @notice Sets the new liquidityGauge contract for this vault\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\n     */\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\n        liquidityGauge = newLiquidityGauge;\n    }\n\n    /**\n     * @notice Sets the new optionsPurchaseQueue contract for this vault\n     * @param newOptionsPurchaseQueue is the address of the new optionsPurchaseQueue contract\n     */\n    function setOptionsPurchaseQueue(address newOptionsPurchaseQueue)\n        external\n        onlyOwner\n    {\n        optionsPurchaseQueue = newOptionsPurchaseQueue;\n    }\n\n    /**\n     * @notice Sets oToken Premium\n     * @param minPrice is the new oToken Premium in the units of 10**18\n     */\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\n        require(minPrice > 0, \"!minPrice\");\n        currentOtokenPremium = minPrice;\n    }\n\n    /************************************************\n     *  VAULT OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\n     * @param amount is the amount to withdraw\n     */\n    function withdrawInstantly(uint256 amount) external nonReentrant {\n        Vault.DepositReceipt storage depositReceipt =\n            depositReceipts[msg.sender];\n\n        uint256 currentRound = vaultState.round;\n        require(amount > 0, \"!amount\");\n        require(depositReceipt.round == currentRound, \"Invalid round\");\n\n        uint256 receiptAmount = depositReceipt.amount;\n        require(receiptAmount >= amount, \"Exceed amount\");\n\n        // Subtraction underflow checks already ensure it is smaller than uint104\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\n        vaultState.totalPending = uint128(\n            uint256(vaultState.totalPending).sub(amount)\n        );\n\n        emit InstantWithdraw(msg.sender, amount, currentRound);\n\n        transferAsset(msg.sender, amount);\n    }\n\n    /**\n     * @notice Initiates a withdrawal that can be processed once the round completes\n     * @param numShares is the number of shares to withdraw\n     */\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\n        _initiateWithdraw(numShares);\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares.add(\n            numShares\n        );\n    }\n\n    /**\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\n     */\n    function completeWithdraw() external nonReentrant {\n        uint256 withdrawAmount = _completeWithdraw();\n        lastQueuedWithdrawAmount = uint128(\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\n        );\n    }\n\n    /**\n     * @notice Stakes a users vault shares\n     * @param numShares is the number of shares to stake\n     */\n    function stake(uint256 numShares) external nonReentrant {\n        address _liquidityGauge = liquidityGauge;\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\n        require(numShares > 0);\n        uint256 heldByAccount = balanceOf(msg.sender);\n        if (heldByAccount < numShares) {\n            _redeem(numShares.sub(heldByAccount), false);\n        }\n        _transfer(msg.sender, address(this), numShares);\n        _approve(address(this), _liquidityGauge, numShares);\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\n    }\n\n    /**\n     * @notice Sets the next option the vault will be shorting, and closes the existing short.\n     *         This allows all the users to withdraw if the next option is malicious.\n     */\n    function commitAndClose() external nonReentrant {\n        address oldOption = optionState.currentOption;\n\n        VaultLifecycle.CloseParams memory closeParams =\n            VaultLifecycle.CloseParams({\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\n                USDC: USDC,\n                currentOption: oldOption,\n                delay: DELAY,\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\n                overriddenStrikePrice: overriddenStrikePrice,\n                strikeSelection: strikeSelection,\n                optionsPremiumPricer: optionsPremiumPricer,\n                premiumDiscount: premiumDiscount\n            });\n\n        (address otokenAddress, uint256 strikePrice, uint256 delta) =\n            VaultLifecycle.commitAndClose(closeParams, vaultParams, vaultState);\n\n        emit NewOptionStrikeSelected(strikePrice, delta);\n\n        optionState.nextOption = otokenAddress;\n\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\n        require(\n            nextOptionReady <= type(uint32).max,\n            \"Overflow nextOptionReady\"\n        );\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\n\n        _closeShort(oldOption);\n    }\n\n    /**\n     * @notice Closes the existing short position for the vault.\n     */\n    function _closeShort(address oldOption) private {\n        uint256 lockedAmount = vaultState.lockedAmount;\n        if (oldOption != address(0)) {\n            vaultState.lastLockedAmount = uint104(lockedAmount);\n        }\n        vaultState.lockedAmount = 0;\n\n        optionState.currentOption = address(0);\n\n        if (oldOption != address(0)) {\n            uint256 withdrawAmount =\n                VaultLifecycle.settleShort(GAMMA_CONTROLLER);\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\n        }\n    }\n\n    /**\n     * @notice Rolls the vault's funds into a new short position.\n     */\n    function rollToNextOption() external onlyKeeper nonReentrant {\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\n\n        (\n            address newOption,\n            uint256 lockedBalance,\n            uint256 queuedWithdrawAmount\n        ) =\n            _rollToNextOption(\n                lastQueuedWithdrawAmount,\n                currQueuedWithdrawShares\n            );\n\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\n\n        uint256 newQueuedWithdrawShares =\n            uint256(vaultState.queuedWithdrawShares).add(\n                currQueuedWithdrawShares\n            );\n        ShareMath.assertUint128(newQueuedWithdrawShares);\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\n\n        currentQueuedWithdrawShares = 0;\n\n        ShareMath.assertUint104(lockedBalance);\n        vaultState.lockedAmount = uint104(lockedBalance);\n\n        emit OpenShort(newOption, lockedBalance, msg.sender);\n\n        uint256 optionsMintAmount =\n            VaultLifecycle.createShort(\n                GAMMA_CONTROLLER,\n                MARGIN_POOL,\n                newOption,\n                lockedBalance\n            );\n\n        VaultLifecycle.allocateOptions(\n            optionsPurchaseQueue,\n            newOption,\n            optionsMintAmount,\n            VaultLifecycle.QUEUE_OPTION_ALLOCATION\n        );\n\n        _startAuction();\n    }\n\n    /**\n     * @notice Initiate the gnosis auction.\n     */\n    function startAuction() external onlyKeeper nonReentrant {\n        _startAuction();\n    }\n\n    function _startAuction() private {\n        GnosisAuction.AuctionDetails memory auctionDetails;\n\n        address currentOtoken = optionState.currentOption;\n\n        auctionDetails.tokenAddress = currentOtoken;\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\n        auctionDetails.asset = vaultParams.asset;\n        auctionDetails.assetDecimals = vaultParams.decimals;\n        auctionDetails.premium = currentOtokenPremium;\n        auctionDetails.duration = auctionDuration;\n\n        optionAuctionID = VaultLifecycle.startAuction(auctionDetails);\n    }\n\n    /**\n     * @notice Sell the allocated options to the purchase queue post auction settlement\n     */\n    function sellOptionsToQueue() external onlyKeeper nonReentrant {\n        VaultLifecycle.sellOptionsToQueue(\n            optionsPurchaseQueue,\n            GNOSIS_EASY_AUCTION,\n            optionAuctionID\n        );\n    }\n\n    /**\n     * @notice Burn the remaining oTokens left over from gnosis auction.\n     */\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\n        uint256 unlockedAssetAmount =\n            VaultLifecycle.burnOtokens(\n                GAMMA_CONTROLLER,\n                optionState.currentOption\n            );\n\n        vaultState.lockedAmount = uint104(\n            uint256(vaultState.lockedAmount).sub(unlockedAssetAmount)\n        );\n    }\n\n    /**\n     * @notice Recovery function that returns an ERC20 token to the recipient\n     * @param token is the ERC20 token to recover from the vault\n     * @param recipient is the recipient of the recovered tokens\n     */\n    function recoverTokens(address token, address recipient)\n        external\n        onlyOwner\n    {\n        require(token != vaultParams.asset, \"Vault asset not recoverable\");\n        require(token != address(this), \"Vault share not recoverable\");\n        require(recipient != address(this), \"Recipient cannot be vault\");\n\n        IERC20(token).safeTransfer(\n            recipient,\n            IERC20(token).balanceOf(address(this))\n        );\n    }\n}\n"
    },
    "contracts/vaults/BaseVaultWithSwap/base/RibbonVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {\n    OwnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {\n    ERC20Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\nimport {Vault} from \"../../../libraries/Vault.sol\";\nimport {\n    VaultLifecycleWithSwap\n} from \"../../../libraries/VaultLifecycleWithSwap.sol\";\nimport {ShareMath} from \"../../../libraries/ShareMath.sol\";\nimport {IWETH} from \"../../../interfaces/IWETH.sol\";\n\ncontract RibbonVault is\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable,\n    ERC20Upgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using ShareMath for Vault.DepositReceipt;\n\n    /************************************************\n     *  NON UPGRADEABLE STORAGE\n     ***********************************************/\n\n    /// @notice Stores the user's pending deposit for the round\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\n\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\n    /// This is used to determine the number of shares to be returned\n    /// to a user with their DepositReceipt.depositAmount\n    mapping(uint256 => uint256) public roundPricePerShare;\n\n    /// @notice Stores pending user withdrawals\n    mapping(address => Vault.Withdrawal) public withdrawals;\n\n    /// @notice Vault's parameters like cap, decimals\n    Vault.VaultParams public vaultParams;\n\n    /// @notice Vault's lifecycle state like round and locked amounts\n    Vault.VaultState public vaultState;\n\n    /// @notice Vault's state of the options sold and the timelocked option\n    Vault.OptionState public optionState;\n\n    /// @notice Fee recipient for the performance and management fees\n    address public feeRecipient;\n\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\n    // no access to critical vault changes\n    address public keeper;\n\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\n    uint256 public performanceFee;\n\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\n    uint256 public managementFee;\n\n    // Gap is left to avoid storage collisions. Though RibbonVault is not upgradeable, we add this as a safety measure.\n    uint256[30] private ____gap;\n\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\n    // This is to prevent storage collisions. All storage variables should be appended to RibbonThetaVaultStorage\n    // or RibbonDeltaVaultStorage instead. Read this documentation to learn more:\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\n\n    /************************************************\n     *  IMMUTABLES & CONSTANTS\n     ***********************************************/\n\n    /// @notice WETH9 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\n    address public immutable WETH;\n\n    /// @notice USDC 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\n    address public immutable USDC;\n\n    /// @notice Deprecated: 15 minute timelock between commitAndClose and rollToNexOption.\n    uint256 public constant DELAY = 0;\n\n    /// @notice 7 day period between each options sale.\n    uint256 public constant PERIOD = 7 days;\n\n    // Number of weeks per year = 52.142857 weeks * FEE_MULTIPLIER = 52142857\n    // Dividing by weeks per year requires doing num.mul(FEE_MULTIPLIER).div(WEEKS_PER_YEAR)\n    uint256 private constant WEEKS_PER_YEAR = 52142857;\n\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\n    // which allows users to perform multiple actions on their vaults\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\n    address public immutable GAMMA_CONTROLLER;\n\n    // MARGIN_POOL is Gamma protocol's collateral pool.\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\n    address public immutable MARGIN_POOL;\n\n    // SWAP_CONTRACT is a contract for settling bids via signed messages\n    // https://github.com/ribbon-finance/ribbon-v2/blob/master/contracts/utils/Swap.sol\n    address public immutable SWAP_CONTRACT;\n\n    /************************************************\n     *  EVENTS\n     ***********************************************/\n\n    event Deposit(address indexed account, uint256 amount, uint256 round);\n\n    event InitiateWithdraw(\n        address indexed account,\n        uint256 shares,\n        uint256 round\n    );\n\n    event Redeem(address indexed account, uint256 share, uint256 round);\n\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\n\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\n\n    event CapSet(uint256 oldCap, uint256 newCap);\n\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\n\n    event CollectVaultFees(\n        uint256 performanceFee,\n        uint256 vaultFee,\n        uint256 round,\n        address indexed feeRecipient\n    );\n\n    /************************************************\n     *  CONSTRUCTOR & INITIALIZATION\n     ***********************************************/\n\n    /**\n     * @notice Initializes the contract with immutable variables\n     * @param _weth is the Wrapped Ether contract\n     * @param _usdc is the USDC contract\n     * @param _gammaController is the contract address for opyn actions\n     * @param _marginPool is the contract address for providing collateral to opyn\n     * @param _swapContract is the contract address that facilitates bids settlement\n     */\n    constructor(\n        address _weth,\n        address _usdc,\n        address _gammaController,\n        address _marginPool,\n        address _swapContract\n    ) {\n        require(_weth != address(0), \"!_weth\");\n        require(_usdc != address(0), \"!_usdc\");\n        require(_swapContract != address(0), \"!_swapContract\");\n        require(_gammaController != address(0), \"!_gammaController\");\n        require(_marginPool != address(0), \"!_marginPool\");\n\n        WETH = _weth;\n        USDC = _usdc;\n        GAMMA_CONTROLLER = _gammaController;\n        MARGIN_POOL = _marginPool;\n        SWAP_CONTRACT = _swapContract;\n    }\n\n    /**\n     * @notice Initializes the OptionVault contract with storage variables.\n     */\n    function baseInitialize(\n        address _owner,\n        address _keeper,\n        address _feeRecipient,\n        uint256 _managementFee,\n        uint256 _performanceFee,\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        Vault.VaultParams calldata _vaultParams\n    ) internal initializer {\n        VaultLifecycleWithSwap.verifyInitializerParams(\n            _owner,\n            _keeper,\n            _feeRecipient,\n            _performanceFee,\n            _managementFee,\n            _tokenName,\n            _tokenSymbol,\n            _vaultParams\n        );\n\n        __ReentrancyGuard_init();\n        __ERC20_init(_tokenName, _tokenSymbol);\n        __Ownable_init();\n        transferOwnership(_owner);\n\n        keeper = _keeper;\n\n        feeRecipient = _feeRecipient;\n        performanceFee = _performanceFee;\n        managementFee = _managementFee.mul(Vault.FEE_MULTIPLIER).div(\n            WEEKS_PER_YEAR\n        );\n        vaultParams = _vaultParams;\n\n        uint256 assetBalance =\n            IERC20(vaultParams.asset).balanceOf(address(this));\n        ShareMath.assertUint104(assetBalance);\n        vaultState.lastLockedAmount = uint104(assetBalance);\n\n        vaultState.round = 1;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the keeper.\n     */\n    modifier onlyKeeper() {\n        require(msg.sender == keeper, \"!keeper\");\n        _;\n    }\n\n    /************************************************\n     *  SETTERS\n     ***********************************************/\n\n    /**\n     * @notice Sets the new keeper\n     * @param newKeeper is the address of the new keeper\n     */\n    function setNewKeeper(address newKeeper) external onlyOwner {\n        require(newKeeper != address(0), \"!newKeeper\");\n        keeper = newKeeper;\n    }\n\n    /**\n     * @notice Sets the new fee recipient\n     * @param newFeeRecipient is the address of the new fee recipient\n     */\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\n        feeRecipient = newFeeRecipient;\n    }\n\n    /**\n     * @notice Sets the management fee for the vault\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\n     */\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\n        require(\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\n            \"Invalid management fee\"\n        );\n\n        // We are dividing annualized management fee by num weeks in a year\n        uint256 tmpManagementFee =\n            newManagementFee.mul(Vault.FEE_MULTIPLIER).div(WEEKS_PER_YEAR);\n\n        emit ManagementFeeSet(managementFee, newManagementFee);\n\n        managementFee = tmpManagementFee;\n    }\n\n    /**\n     * @notice Sets the performance fee for the vault\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\n     */\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\n        require(\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\n            \"Invalid performance fee\"\n        );\n\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\n\n        performanceFee = newPerformanceFee;\n    }\n\n    /**\n     * @notice Sets a new cap for deposits\n     * @param newCap is the new cap for deposits\n     */\n    function setCap(uint256 newCap) external onlyOwner {\n        require(newCap > 0, \"!newCap\");\n        ShareMath.assertUint104(newCap);\n        emit CapSet(vaultParams.cap, newCap);\n        vaultParams.cap = uint104(newCap);\n    }\n\n    /************************************************\n     *  DEPOSIT & WITHDRAWALS\n     ***********************************************/\n\n    /**\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WETH.\n     */\n    function depositETH() external payable nonReentrant {\n        require(vaultParams.asset == WETH, \"!WETH\");\n        require(msg.value > 0, \"!value\");\n\n        _depositFor(msg.value, msg.sender);\n\n        IWETH(WETH).deposit{value: msg.value}();\n    }\n\n    /**\n     * @notice Deposits the `asset` from msg.sender.\n     * @param amount is the amount of `asset` to deposit\n     */\n    function deposit(uint256 amount) external nonReentrant {\n        require(amount > 0, \"!amount\");\n\n        _depositFor(amount, msg.sender);\n\n        // An approve() by the msg.sender is required beforehand\n        IERC20(vaultParams.asset).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    /**\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\n     * @notice Used for vault -> vault deposits on the user's behalf\n     * @param amount is the amount of `asset` to deposit\n     * @param creditor is the address that can claim/withdraw deposited amount\n     */\n    function depositFor(uint256 amount, address creditor)\n        external\n        nonReentrant\n    {\n        require(amount > 0, \"!amount\");\n        require(creditor != address(0));\n\n        _depositFor(amount, creditor);\n\n        // An approve() by the msg.sender is required beforehand\n        IERC20(vaultParams.asset).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    /**\n     * @notice Mints the vault shares to the creditor\n     * @param amount is the amount of `asset` deposited\n     * @param creditor is the address to receieve the deposit\n     */\n    function _depositFor(uint256 amount, address creditor) private {\n        uint256 currentRound = vaultState.round;\n        uint256 totalWithDepositedAmount = totalBalance().add(amount);\n\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\n        require(\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\n            \"Insufficient balance\"\n        );\n\n        emit Deposit(creditor, amount, currentRound);\n\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\n\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                currentRound,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        uint256 depositAmount = amount;\n\n        // If we have a pending deposit in the current round, we add on to the pending deposit\n        if (currentRound == depositReceipt.round) {\n            uint256 newAmount = uint256(depositReceipt.amount).add(amount);\n            depositAmount = newAmount;\n        }\n\n        ShareMath.assertUint104(depositAmount);\n\n        depositReceipts[creditor] = Vault.DepositReceipt({\n            round: uint16(currentRound),\n            amount: uint104(depositAmount),\n            unredeemedShares: uint128(unredeemedShares)\n        });\n\n        uint256 newTotalPending = uint256(vaultState.totalPending).add(amount);\n        ShareMath.assertUint128(newTotalPending);\n\n        vaultState.totalPending = uint128(newTotalPending);\n    }\n\n    /**\n     * @notice Initiates a withdrawal that can be processed once the round completes\n     * @param numShares is the number of shares to withdraw\n     */\n    function _initiateWithdraw(uint256 numShares) internal {\n        require(numShares > 0, \"!numShares\");\n\n        // We do a max redeem before initiating a withdrawal\n        // But we check if they must first have unredeemed shares\n        if (\n            depositReceipts[msg.sender].amount > 0 ||\n            depositReceipts[msg.sender].unredeemedShares > 0\n        ) {\n            _redeem(0, true);\n        }\n\n        // This caches the `round` variable used in shareBalances\n        uint256 currentRound = vaultState.round;\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\n\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\n\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\n\n        uint256 existingShares = uint256(withdrawal.shares);\n\n        uint256 withdrawalShares;\n        if (withdrawalIsSameRound) {\n            withdrawalShares = existingShares.add(numShares);\n        } else {\n            require(existingShares == 0, \"Existing withdraw\");\n            withdrawalShares = numShares;\n            withdrawals[msg.sender].round = uint16(currentRound);\n        }\n\n        ShareMath.assertUint128(withdrawalShares);\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\n\n        _transfer(msg.sender, address(this), numShares);\n    }\n\n    /**\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\n     * @return withdrawAmount the current withdrawal amount\n     */\n    function _completeWithdraw() internal returns (uint256) {\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\n\n        uint256 withdrawalShares = withdrawal.shares;\n        uint256 withdrawalRound = withdrawal.round;\n\n        // This checks if there is a withdrawal\n        require(withdrawalShares > 0, \"Not initiated\");\n\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\n\n        // We leave the round number as non-zero to save on gas for subsequent writes\n        withdrawals[msg.sender].shares = 0;\n        vaultState.queuedWithdrawShares = uint128(\n            uint256(vaultState.queuedWithdrawShares).sub(withdrawalShares)\n        );\n\n        uint256 withdrawAmount =\n            ShareMath.sharesToAsset(\n                withdrawalShares,\n                roundPricePerShare[withdrawalRound],\n                vaultParams.decimals\n            );\n\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\n\n        _burn(address(this), withdrawalShares);\n\n        require(withdrawAmount > 0, \"!withdrawAmount\");\n        transferAsset(msg.sender, withdrawAmount);\n\n        return withdrawAmount;\n    }\n\n    /**\n     * @notice Redeems shares that are owed to the account\n     * @param numShares is the number of shares to redeem\n     */\n    function redeem(uint256 numShares) external nonReentrant {\n        require(numShares > 0, \"!numShares\");\n        _redeem(numShares, false);\n    }\n\n    /**\n     * @notice Redeems the entire unredeemedShares balance that is owed to the account\n     */\n    function maxRedeem() external nonReentrant {\n        _redeem(0, true);\n    }\n\n    /**\n     * @notice Redeems shares that are owed to the account\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\n     * @param isMax is flag for when callers do a max redemption\n     */\n    function _redeem(uint256 numShares, bool isMax) internal {\n        Vault.DepositReceipt memory depositReceipt =\n            depositReceipts[msg.sender];\n\n        // This handles the null case when depositReceipt.round = 0\n        // Because we start with round = 1 at `initialize`\n        uint256 currentRound = vaultState.round;\n\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                currentRound,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        numShares = isMax ? unredeemedShares : numShares;\n        if (numShares == 0) {\n            return;\n        }\n        require(numShares <= unredeemedShares, \"Exceeds available\");\n\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\n        // we debit from the unredeemedShares, but leave the amount field intact\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\n        if (depositReceipt.round < currentRound) {\n            depositReceipts[msg.sender].amount = 0;\n        }\n\n        ShareMath.assertUint128(numShares);\n        depositReceipts[msg.sender].unredeemedShares = uint128(\n            unredeemedShares.sub(numShares)\n        );\n\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\n\n        _transfer(address(this), msg.sender, numShares);\n    }\n\n    /************************************************\n     *  VAULT OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\n     * @param numRounds is the number of rounds to initialize in the map\n     */\n    function initRounds(uint256 numRounds) external nonReentrant {\n        require(numRounds > 0, \"!numRounds\");\n\n        uint256 _round = vaultState.round;\n        for (uint256 i = 0; i < numRounds; i++) {\n            uint256 index = _round + i;\n            require(roundPricePerShare[index] == 0, \"Initialized\"); // AVOID OVERWRITING ACTUAL VALUES\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\n        }\n    }\n\n    /**\n     * @notice Helper function that performs most administrative tasks\n     * such as minting new shares, getting vault fees, etc.\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\n     */\n    function _closeRound(\n        uint256 lastQueuedWithdrawAmount,\n        uint256 currentQueuedWithdrawShares\n    ) internal returns (uint256 lockedBalance, uint256 queuedWithdrawAmount) {\n        address recipient = feeRecipient;\n        uint256 mintShares;\n        uint256 performanceFeeInAsset;\n        uint256 totalVaultFee;\n        {\n            uint256 newPricePerShare;\n            (\n                lockedBalance,\n                queuedWithdrawAmount,\n                newPricePerShare,\n                mintShares,\n                performanceFeeInAsset,\n                totalVaultFee\n            ) = VaultLifecycleWithSwap.closeRound(\n                vaultState,\n                VaultLifecycleWithSwap.CloseParams(\n                    vaultParams.decimals,\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\n                    totalSupply(),\n                    lastQueuedWithdrawAmount,\n                    performanceFee,\n                    managementFee,\n                    currentQueuedWithdrawShares\n                )\n            );\n\n            // Finalize the pricePerShare at the end of the round\n            uint256 currentRound = vaultState.round;\n            roundPricePerShare[currentRound] = newPricePerShare;\n\n            emit CollectVaultFees(\n                performanceFeeInAsset,\n                totalVaultFee,\n                currentRound,\n                recipient\n            );\n\n            vaultState.totalPending = 0;\n            vaultState.round = uint16(currentRound + 1);\n        }\n\n        _mint(address(this), mintShares);\n\n        if (totalVaultFee > 0) {\n            transferAsset(payable(recipient), totalVaultFee);\n        }\n\n        return (lockedBalance, queuedWithdrawAmount);\n    }\n\n    /**\n     * @notice Helper function to make either an ETH transfer or ERC20 transfer\n     * @param recipient is the receiving address\n     * @param amount is the transfer amount\n     */\n    function transferAsset(address recipient, uint256 amount) internal {\n        address asset = vaultParams.asset;\n        if (asset == WETH) {\n            IWETH(WETH).withdraw(amount);\n            (bool success, ) = recipient.call{value: amount}(\"\");\n            require(success, \"Transfer failed\");\n            return;\n        }\n        IERC20(asset).safeTransfer(recipient, amount);\n    }\n\n    /************************************************\n     *  GETTERS\n     ***********************************************/\n\n    /**\n     * @notice Returns the asset balance held on the vault for the account\n     * @param account is the address to lookup balance for\n     * @return the amount of `asset` custodied by the vault for the user\n     */\n    function accountVaultBalance(address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 _decimals = vaultParams.decimals;\n        uint256 assetPerShare =\n            ShareMath.pricePerShare(\n                totalSupply(),\n                totalBalance(),\n                vaultState.totalPending,\n                _decimals\n            );\n        return\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\n    }\n\n    /**\n     * @notice Getter for returning the account's share balance including unredeemed shares\n     * @param account is the account to lookup share balance for\n     * @return the share balance\n     */\n    function shares(address account) public view returns (uint256) {\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\n        return heldByAccount.add(heldByVault);\n    }\n\n    /**\n     * @notice Getter for returning the account's share balance split between account and vault holdings\n     * @param account is the account to lookup share balance for\n     * @return heldByAccount is the shares held by account\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\n     */\n    function shareBalances(address account)\n        public\n        view\n        returns (uint256 heldByAccount, uint256 heldByVault)\n    {\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\n\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\n            return (balanceOf(account), 0);\n        }\n\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                vaultState.round,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        return (balanceOf(account), unredeemedShares);\n    }\n\n    /**\n     * @notice The price of a unit of share denominated in the `asset`\n     */\n    function pricePerShare() external view returns (uint256) {\n        return\n            ShareMath.pricePerShare(\n                totalSupply(),\n                totalBalance(),\n                vaultState.totalPending,\n                vaultParams.decimals\n            );\n    }\n\n    /**\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\n     * @return total balance of the vault, including the amounts locked in third party protocols\n     */\n    function totalBalance() public view returns (uint256) {\n        // After calling closeRound, current option is set to none\n        // We also commit the lockedAmount but do not deposit into Opyn\n        // which results in double counting of asset balance and lockedAmount\n\n        return\n            optionState.currentOption != address(0)\n                ? uint256(vaultState.lockedAmount).add(\n                    IERC20(vaultParams.asset).balanceOf(address(this))\n                )\n                : IERC20(vaultParams.asset).balanceOf(address(this));\n    }\n\n    /**\n     * @notice Returns the token decimals\n     */\n    function decimals() public view override returns (uint8) {\n        return vaultParams.decimals;\n    }\n\n    function cap() external view returns (uint256) {\n        return vaultParams.cap;\n    }\n\n    function nextOptionReadyAt() external view returns (uint256) {\n        return optionState.nextOptionReadyAt;\n    }\n\n    function currentOption() external view returns (address) {\n        return optionState.currentOption;\n    }\n\n    function nextOption() external view returns (address) {\n        return optionState.nextOption;\n    }\n\n    function totalPending() external view returns (uint256) {\n        return vaultState.totalPending;\n    }\n}\n"
    },
    "contracts/vaults/BaseVaultWithSwap/RibbonThetaVaultWithSwap.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {SafeMath} from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {ISwap} from \"../../interfaces/ISwap.sol\";\nimport {\n    RibbonThetaVaultStorage\n} from \"../../storage/RibbonThetaVaultStorage.sol\";\nimport {Vault} from \"../../libraries/Vault.sol\";\nimport {\n    VaultLifecycleWithSwap\n} from \"../../libraries/VaultLifecycleWithSwap.sol\";\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\nimport {ILiquidityGauge} from \"../../interfaces/ILiquidityGauge.sol\";\nimport {RibbonVault} from \"./base/RibbonVault.sol\";\nimport {IVaultPauser} from \"../../interfaces/IVaultPauser.sol\";\n\n/**\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\n * the inheritance chain closely.\n * Any changes/appends in storage variable needs to happen in RibbonThetaVaultStorage.\n * RibbonThetaVault should not inherit from any other contract aside from RibbonVault, RibbonThetaVaultStorage\n */\ncontract RibbonThetaVaultWithSwap is RibbonVault, RibbonThetaVaultStorage {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n    using ShareMath for Vault.DepositReceipt;\n\n    /************************************************\n     *  IMMUTABLES & CONSTANTS\n     ***********************************************/\n\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\n    address public immutable OTOKEN_FACTORY;\n\n    // The minimum duration for an option auction.\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\n\n    /************************************************\n     *  EVENTS\n     ***********************************************/\n\n    event OpenShort(\n        address indexed options,\n        uint256 depositAmount,\n        address indexed manager\n    );\n\n    event CloseShort(\n        address indexed options,\n        uint256 withdrawAmount,\n        address indexed manager\n    );\n\n    event NewOptionStrikeSelected(uint256 strikePrice, uint256 delta);\n\n    event AuctionDurationSet(\n        uint256 auctionDuration,\n        uint256 newAuctionDuration\n    );\n\n    event InstantWithdraw(\n        address indexed account,\n        uint256 amount,\n        uint256 round\n    );\n\n    event NewOffer(\n        uint256 swapId,\n        address seller,\n        address oToken,\n        address biddingToken,\n        uint256 minPrice,\n        uint256 minBidSize,\n        uint256 totalSize\n    );\n\n    /************************************************\n     *  STRUCTS\n     ***********************************************/\n\n    /**\n     * @notice Initialization parameters for the vault.\n     * @param _owner is the owner of the vault with critical permissions\n     * @param _feeRecipient is the address to recieve vault performance and management fees\n     * @param _managementFee is the management fee pct.\n     * @param _performanceFee is the perfomance fee pct.\n     * @param _tokenName is the name of the token\n     * @param _tokenSymbol is the symbol of the token\n     * @param _optionsPremiumPricer is the address of the contract with the\n       black-scholes premium calculation logic\n     * @param _strikeSelection is the address of the contract with strike selection logic\n     */\n    struct InitParams {\n        address _owner;\n        address _keeper;\n        address _feeRecipient;\n        uint256 _managementFee;\n        uint256 _performanceFee;\n        string _tokenName;\n        string _tokenSymbol;\n        address _optionsPremiumPricer;\n        address _strikeSelection;\n    }\n\n    /************************************************\n     *  CONSTRUCTOR & INITIALIZATION\n     ***********************************************/\n\n    /**\n     * @notice Initializes the contract with immutable variables\n     * @param _weth is the Wrapped Ether contract\n     * @param _usdc is the USDC contract\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\n     * @param _gammaController is the contract address for opyn actions\n     * @param _marginPool is the contract address for providing collateral to opyn\n     * @param _swapContract is the contract address that facilitates bids settlement\n     */\n    constructor(\n        address _weth,\n        address _usdc,\n        address _oTokenFactory,\n        address _gammaController,\n        address _marginPool,\n        address _swapContract\n    ) RibbonVault(_weth, _usdc, _gammaController, _marginPool, _swapContract) {\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\n        OTOKEN_FACTORY = _oTokenFactory;\n    }\n\n    /**\n     * @notice Initializes the OptionVault contract with storage variables.\n     * @param _initParams is the struct with vault initialization parameters\n     * @param _vaultParams is the struct with vault general data\n     */\n    function initialize(\n        InitParams calldata _initParams,\n        Vault.VaultParams calldata _vaultParams\n    ) external initializer {\n        baseInitialize(\n            _initParams._owner,\n            _initParams._keeper,\n            _initParams._feeRecipient,\n            _initParams._managementFee,\n            _initParams._performanceFee,\n            _initParams._tokenName,\n            _initParams._tokenSymbol,\n            _vaultParams\n        );\n        require(\n            _initParams._optionsPremiumPricer != address(0),\n            \"!_optionsPremiumPricer\"\n        );\n        require(\n            _initParams._strikeSelection != address(0),\n            \"!_strikeSelection\"\n        );\n\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\n        strikeSelection = _initParams._strikeSelection;\n    }\n\n    /************************************************\n     *  SETTERS\n     ***********************************************/\n\n    /**\n     * @notice Sets the new strike selection contract\n     * @param newStrikeSelection is the address of the new strike selection contract\n     */\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\n        require(newStrikeSelection != address(0), \"!newStrikeSelection\");\n        strikeSelection = newStrikeSelection;\n    }\n\n    /**\n     * @notice Sets the new options premium pricer contract\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\n     */\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\n        external\n        onlyOwner\n    {\n        require(\n            newOptionsPremiumPricer != address(0),\n            \"!newOptionsPremiumPricer\"\n        );\n        optionsPremiumPricer = newOptionsPremiumPricer;\n    }\n\n    /**\n     * @notice Optionality to set strike price manually\n     * Should be called after closeRound if we are setting current week's strike\n     * @param strikePrice is the strike price of the new oTokens (decimals = 8)\n     */\n    function setStrikePrice(uint128 strikePrice) external onlyOwner {\n        require(strikePrice > 0, \"!strikePrice\");\n        overriddenStrikePrice = strikePrice;\n        lastStrikeOverrideRound = vaultState.round;\n    }\n\n    /**\n     * @notice Sets the new liquidityGauge contract for this vault\n     * @param newLiquidityGauge is the address of the new liquidityGauge contract\n     */\n    function setLiquidityGauge(address newLiquidityGauge) external onlyOwner {\n        liquidityGauge = newLiquidityGauge;\n    }\n\n    /**\n     * @notice Sets oToken Premium\n     * @param minPrice is the new oToken Premium in the units of 10**18\n     */\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\n        require(minPrice > 0, \"!minPrice\");\n        currentOtokenPremium = minPrice;\n    }\n\n    /**\n     * @notice Sets the new Vault Pauser contract for this vault\n     * @param newVaultPauser is the address of the new vaultPauser contract\n     */\n    function setVaultPauser(address newVaultPauser) external onlyOwner {\n        vaultPauser = newVaultPauser;\n    }\n\n    /************************************************\n     *  VAULT OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\n     * @param amount is the amount to withdraw\n     */\n    function withdrawInstantly(uint256 amount) external nonReentrant {\n        Vault.DepositReceipt storage depositReceipt =\n            depositReceipts[msg.sender];\n\n        uint256 currentRound = vaultState.round;\n        require(amount > 0, \"!amount\");\n        require(depositReceipt.round == currentRound, \"Invalid round\");\n\n        uint256 receiptAmount = depositReceipt.amount;\n        require(receiptAmount >= amount, \"Exceed amount\");\n\n        // Subtraction underflow checks already ensure it is smaller than uint104\n        depositReceipt.amount = uint104(receiptAmount.sub(amount));\n        vaultState.totalPending = uint128(\n            uint256(vaultState.totalPending).sub(amount)\n        );\n\n        emit InstantWithdraw(msg.sender, amount, currentRound);\n\n        transferAsset(msg.sender, amount);\n    }\n\n    /**\n     * @notice Initiates a withdrawal that can be processed once the round completes\n     * @param numShares is the number of shares to withdraw\n     */\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\n        _initiateWithdraw(numShares);\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares.add(\n            numShares\n        );\n    }\n\n    /**\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\n     */\n    function completeWithdraw() external nonReentrant {\n        uint256 withdrawAmount = _completeWithdraw();\n        lastQueuedWithdrawAmount = uint128(\n            uint256(lastQueuedWithdrawAmount).sub(withdrawAmount)\n        );\n    }\n\n    /**\n     * @notice Stakes a users vault shares\n     * @param numShares is the number of shares to stake\n     */\n    function stake(uint256 numShares) external nonReentrant {\n        address _liquidityGauge = liquidityGauge;\n        require(_liquidityGauge != address(0)); // Removed revert msgs due to contract size limit\n        require(numShares > 0);\n        uint256 heldByAccount = balanceOf(msg.sender);\n        if (heldByAccount < numShares) {\n            _redeem(numShares.sub(heldByAccount), false);\n        }\n        _transfer(msg.sender, address(this), numShares);\n        _approve(address(this), _liquidityGauge, numShares);\n        ILiquidityGauge(_liquidityGauge).deposit(numShares, msg.sender, false);\n    }\n\n    /**\n     * @notice Closes the existing short and calculate the shares to mint, new price per share &\n      amount of funds to re-allocate as collateral for the new round\n     * Since we are incrementing the round here, the options are sold in the beginning of a round\n     * instead of at the end of the round. For example, at round 1, we don't sell any options. We\n     * start selling options at the beginning of round 2.\n     */\n    function closeRound() external nonReentrant {\n        address oldOption = optionState.currentOption;\n        require(\n            oldOption != address(0) || vaultState.round == 1,\n            \"Round closed\"\n        );\n        _closeShort(oldOption);\n\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\n        (uint256 lockedBalance, uint256 queuedWithdrawAmount) =\n            _closeRound(\n                uint256(lastQueuedWithdrawAmount),\n                currQueuedWithdrawShares\n            );\n\n        lastQueuedWithdrawAmount = queuedWithdrawAmount;\n\n        uint256 newQueuedWithdrawShares =\n            uint256(vaultState.queuedWithdrawShares).add(\n                currQueuedWithdrawShares\n            );\n        ShareMath.assertUint128(newQueuedWithdrawShares);\n        vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\n\n        currentQueuedWithdrawShares = 0;\n\n        ShareMath.assertUint104(lockedBalance);\n        vaultState.lockedAmount = uint104(lockedBalance);\n\n        uint256 nextOptionReady = block.timestamp.add(DELAY);\n        require(\n            nextOptionReady <= type(uint32).max,\n            \"Overflow nextOptionReady\"\n        );\n        optionState.nextOptionReadyAt = uint32(nextOptionReady);\n    }\n\n    /**\n     * @notice Closes the existing short position for the vault.\n     */\n    function _closeShort(address oldOption) private {\n        uint256 lockedAmount = vaultState.lockedAmount;\n        if (oldOption != address(0)) {\n            vaultState.lastLockedAmount = uint104(lockedAmount);\n        }\n        vaultState.lockedAmount = 0;\n\n        optionState.currentOption = address(0);\n\n        if (oldOption != address(0)) {\n            uint256 withdrawAmount =\n                VaultLifecycleWithSwap.settleShort(GAMMA_CONTROLLER);\n            emit CloseShort(oldOption, withdrawAmount, msg.sender);\n        }\n    }\n\n    /**\n     * @notice Sets the next option the vault will be shorting\n     */\n    function commitNextOption() external onlyKeeper nonReentrant {\n        address currentOption = optionState.currentOption;\n        require(\n            currentOption == address(0) && vaultState.round != 1,\n            \"Round not closed\"\n        );\n\n        VaultLifecycleWithSwap.CommitParams memory commitParams =\n            VaultLifecycleWithSwap.CommitParams({\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\n                USDC: USDC,\n                collateralAsset: vaultParams.asset,\n                currentOption: currentOption,\n                delay: DELAY,\n                lastStrikeOverrideRound: lastStrikeOverrideRound,\n                overriddenStrikePrice: overriddenStrikePrice,\n                strikeSelection: strikeSelection,\n                optionsPremiumPricer: optionsPremiumPricer\n            });\n\n        (address otokenAddress, uint256 strikePrice, uint256 delta) =\n            VaultLifecycleWithSwap.commitNextOption(\n                commitParams,\n                vaultParams,\n                vaultState\n            );\n\n        emit NewOptionStrikeSelected(strikePrice, delta);\n\n        optionState.nextOption = otokenAddress;\n    }\n\n    /**\n     * @notice Rolls the vault's funds into a new short position and create a new offer.\n     */\n    function rollToNextOption() external onlyKeeper nonReentrant {\n        address newOption = optionState.nextOption;\n        require(newOption != address(0), \"!nextOption\");\n\n        optionState.currentOption = newOption;\n        optionState.nextOption = address(0);\n        uint256 lockedBalance = vaultState.lockedAmount;\n\n        emit OpenShort(newOption, lockedBalance, msg.sender);\n\n        VaultLifecycleWithSwap.createShort(\n            GAMMA_CONTROLLER,\n            MARGIN_POOL,\n            newOption,\n            lockedBalance\n        );\n\n        _createOffer();\n    }\n\n    function _createOffer() private {\n        address currentOtoken = optionState.currentOption;\n        uint256 currOtokenPremium = currentOtokenPremium;\n\n        optionAuctionID = VaultLifecycleWithSwap.createOffer(\n            currentOtoken,\n            currOtokenPremium,\n            SWAP_CONTRACT,\n            vaultParams\n        );\n    }\n\n    /**\n     * @notice Settle current offer\n     */\n    function settleOffer(ISwap.Bid[] calldata bids)\n        external\n        onlyKeeper\n        nonReentrant\n    {\n        ISwap(SWAP_CONTRACT).settleOffer(optionAuctionID, bids);\n    }\n\n    /**\n     * @notice Burn the remaining oTokens left over\n     */\n    function burnRemainingOTokens() external onlyKeeper nonReentrant {\n        VaultLifecycleWithSwap.burnOtokens(\n            GAMMA_CONTROLLER,\n            optionState.currentOption\n        );\n    }\n\n    /**\n     * @notice pause a user's vault position\n     */\n    function pausePosition() external {\n        address _vaultPauserAddress = vaultPauser;\n        require(_vaultPauserAddress != address(0)); // Removed revert msgs due to contract size limit\n        _redeem(0, true);\n        uint256 heldByAccount = balanceOf(msg.sender);\n        _approve(msg.sender, _vaultPauserAddress, heldByAccount);\n        IVaultPauser(_vaultPauserAddress).pausePosition(\n            msg.sender,\n            heldByAccount\n        );\n    }\n}"
    },
    "contracts/vaults/SpreadVaults/base/HimalayanVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport {\n    OwnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {\n    ERC20Upgradeable\n} from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\n\nimport {Vault} from \"../../../libraries/Vault.sol\";\nimport {VaultLifecycleSpread} from \"../../../libraries/VaultLifecycleSpread.sol\";\nimport {ShareMath} from \"../../../libraries/ShareMath.sol\";\nimport {IWETH} from \"../../../interfaces/IWETH.sol\";\n\ncontract HimalayanVault is\n    ReentrancyGuardUpgradeable,\n    OwnableUpgradeable,\n    ERC20Upgradeable\n{\n    using SafeERC20 for IERC20;\n    using ShareMath for Vault.DepositReceipt;\n\n    /************************************************\n     *  NON UPGRADEABLE STORAGE\n     ***********************************************/\n\n    /// @notice Stores the user's pending deposit for the round\n    mapping(address => Vault.DepositReceipt) public depositReceipts;\n\n    /// @notice On every round's close, the pricePerShare value of an rTHETA token is stored\n    /// This is used to determine the number of shares to be returned\n    /// to a user with their DepositReceipt.depositAmount\n    mapping(uint256 => uint256) public roundPricePerShare;\n\n    /// @notice Stores pending user withdrawals\n    mapping(address => Vault.Withdrawal) public withdrawals;\n\n    /// @notice Vault's parameters like cap, decimals\n    Vault.VaultParams public vaultParams;\n\n    /// @notice Vault's lifecycle state like round and locked amounts\n    Vault.VaultState public vaultState;\n\n    /// @notice Vault's state of the strategy sold\n    Vault.SpreadState public spreadState;\n\n    /// @notice Fee recipient for the performance and management fees\n    address public feeRecipient;\n\n    /// @notice role in charge of weekly vault operations such as rollToNextOption and burnRemainingOTokens\n    // no access to critical vault changes\n    address public keeper;\n\n    /// @notice Performance fee charged on premiums earned in rollToNextOption. Only charged when there is no loss.\n    uint256 public performanceFee;\n\n    /// @notice Management fee charged on entire AUM in rollToNextOption. Only charged when there is no loss.\n    uint256 public managementFee;\n\n    // Gap is left to avoid storage collisions. Though HimalayanVault is not upgradeable, we add this as a safety measure.\n    uint256[30] private ____gap;\n\n    // *IMPORTANT* NO NEW STORAGE VARIABLES SHOULD BE ADDED HERE\n    // This is to prevent storage collisions. All storage variables should be appended to HimalayanVaultStorage\n    // https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#modifying-your-contracts\n\n    /************************************************\n     *  IMMUTABLES & CONSTANTS\n     ***********************************************/\n\n    /// @notice Wrapped NATIVE currency \n    address public immutable WNATIVE;\n\n    /// @notice USDC\n    address public immutable USDC;\n\n    // GAMMA_CONTROLLER is the top-level contract in Gamma protocol\n    // which allows users to perform multiple actions on their vaults\n    // and positions https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/Controller.sol\n    address public immutable GAMMA_CONTROLLER;\n\n    // MARGIN_POOL is Gamma protocol's collateral pool.\n    // Needed to approve collateral.safeTransferFrom for minting otokens.\n    // https://github.com/opynfinance/GammaProtocol/blob/master/contracts/core/MarginPool.sol\n    address public immutable MARGIN_POOL;\n\n    // GNOSIS_EASY_AUCTION is Gnosis protocol's contract for initiating auctions and placing bids\n    // https://github.com/gnosis/ido-contracts/blob/main/contracts/EasyAuction.sol\n    address public immutable GNOSIS_EASY_AUCTION;\n\n    //IMPL OF SYMBOLIC SPREAD TOKEN\n    address public immutable SPREAD_TOKEN;\n\n    /************************************************\n     *  EVENTS\n     ***********************************************/\n\n    event Deposit(address indexed account, uint256 amount, uint256 round);\n\n    event InitiateWithdraw(\n        address indexed account,\n        uint256 shares,\n        uint256 round\n    );\n\n    event Redeem(address indexed account, uint256 share, uint256 round);\n\n    event ManagementFeeSet(uint256 managementFee, uint256 newManagementFee);\n\n    event PerformanceFeeSet(uint256 performanceFee, uint256 newPerformanceFee);\n\n    event CapSet(uint256 oldCap, uint256 newCap);\n\n    event Withdraw(address indexed account, uint256 amount, uint256 shares);\n\n    event CollectVaultFees(\n        uint256 performanceFee,\n        uint256 vaultFee,\n        uint256 round,\n        address indexed feeRecipient\n    );\n\n    /************************************************\n     *  CONSTRUCTOR & INITIALIZATION\n     ***********************************************/\n\n    /**\n     * @notice Initializes the contract with immutable variables\n     * @param _wnative is the Wrapped Native currency contract\n     * @param _usdc is the USDC contract\n     * @param _gammaController is the contract address for opyn actions\n     * @param _marginPool is the contract address for providing collateral to opyn\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\n     * @param _token is the token contract for EIP 1667\n     */\n    constructor(\n        address _wnative,\n        address _usdc,\n        address _gammaController,\n        address _marginPool,\n        address _gnosisEasyAuction,\n        address _token\n    ) {\n        require(_wnative != address(0), \"!_wnative\");\n        require(_usdc != address(0), \"!_usdc\");\n        require(_gnosisEasyAuction != address(0), \"!_gnosisEasyAuction\");\n        require(_gammaController != address(0), \"!_gammaController\");\n        require(_marginPool != address(0), \"!_marginPool\");\n        require(_token != address(0), \"!token\");\n\n        WNATIVE = _wnative;\n        USDC = _usdc;\n        GAMMA_CONTROLLER = _gammaController;\n        MARGIN_POOL = _marginPool;\n        GNOSIS_EASY_AUCTION = _gnosisEasyAuction;\n        SPREAD_TOKEN = _token;\n    }\n\n    /**\n     * @notice Initializes the OptionVault contract with storage variables.\n     */\n    function baseInitialize(\n        address _owner,\n        address _keeper,\n        address _feeRecipient,\n        uint256 _managementFee,\n        uint256 _performanceFee,\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        Vault.VaultParams calldata _vaultParams\n    ) internal initializer {\n        VaultLifecycleSpread.verifyInitializerParams(\n            _owner,\n            _keeper,\n            _feeRecipient,\n            _performanceFee,\n            _managementFee,\n            _tokenName,\n            _tokenSymbol,\n            _vaultParams\n        );\n\n        __ReentrancyGuard_init();\n        __ERC20_init(_tokenName, _tokenSymbol);\n        __Ownable_init();\n        transferOwnership(_owner);\n\n        keeper = _keeper;\n\n        feeRecipient = _feeRecipient;\n        performanceFee = _performanceFee;\n        managementFee = (_managementFee * Vault.FEE_MULTIPLIER) / VaultLifecycleSpread.WEEKS_PER_YEAR;\n        vaultParams = _vaultParams;\n\n        uint256 assetBalance =\n            IERC20(vaultParams.asset).balanceOf(address(this));\n        ShareMath.assertUint104(assetBalance);\n        vaultState.lastLockedAmount = uint104(assetBalance);\n\n        vaultState.round = 1;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the keeper.\n     */\n    modifier onlyKeeper() {\n        require(msg.sender == keeper, \"!keeper\");\n        _;\n    }\n\n    /**\n     * @notice Sets the new keeper\n     * @param newKeeper is the address of the new keeper\n     */\n    function setNewKeeper(address newKeeper) external onlyOwner {\n        require(newKeeper != address(0), \"!newKeeper\");\n        keeper = newKeeper;\n    }\n\n    /**\n     * @notice Sets the new fee recipient\n     * @param newFeeRecipient is the address of the new fee recipient\n     */\n    function setFeeRecipient(address newFeeRecipient) external onlyOwner {\n        require(newFeeRecipient != address(0), \"!newFeeRecipient\");\n        require(newFeeRecipient != feeRecipient, \"Must be new feeRecipient\");\n        feeRecipient = newFeeRecipient;\n    }\n\n    /**\n     * @notice Sets the management fee for the vault\n     * @param newManagementFee is the management fee (6 decimals). ex: 2 * 10 ** 6 = 2%\n     */\n    function setManagementFee(uint256 newManagementFee) external onlyOwner {\n        require(\n            newManagementFee < 100 * Vault.FEE_MULTIPLIER,\n            \"Invalid management fee\"\n        );\n\n        // We are dividing annualized management fee by num weeks in a year\n        uint256 tmpManagementFee =\n            (newManagementFee * Vault.FEE_MULTIPLIER) / VaultLifecycleSpread.WEEKS_PER_YEAR;\n\n        emit ManagementFeeSet(managementFee, newManagementFee);\n\n        managementFee = tmpManagementFee;\n    }\n\n    /**\n     * @notice Sets the performance fee for the vault\n     * @param newPerformanceFee is the performance fee (6 decimals). ex: 20 * 10 ** 6 = 20%\n     */\n    function setPerformanceFee(uint256 newPerformanceFee) external onlyOwner {\n        require(\n            newPerformanceFee < 100 * Vault.FEE_MULTIPLIER,\n            \"Invalid performance fee\"\n        );\n\n        emit PerformanceFeeSet(performanceFee, newPerformanceFee);\n\n        performanceFee = newPerformanceFee;\n    }\n\n    /**\n     * @notice Sets a new cap for deposits\n     * @param newCap is the new cap for deposits\n     */\n    function setCap(uint256 newCap) external onlyOwner {\n        require(newCap > 0, \"!newCap\");\n        ShareMath.assertUint104(newCap);\n        emit CapSet(vaultParams.cap, newCap);\n        vaultParams.cap = uint104(newCap);\n    }\n\n    /************************************************\n     *  DEPOSIT & WITHDRAWALS\n     ***********************************************/\n\n    /**\n     * @notice Deposits ETH into the contract and mint vault shares. Reverts if the asset is not WNATIVE.\n     */\n    function depositETH() external payable nonReentrant {\n        require(vaultParams.asset == WNATIVE, \"!WNATIVE\");\n        require(msg.value > 0, \"!value\");\n\n        _depositFor(msg.value, msg.sender);\n\n        IWETH(WNATIVE).deposit{value: msg.value}();\n    }\n\n    /**\n     * @notice Deposits the `asset` from msg.sender.\n     * @param amount is the amount of `asset` to deposit\n     */\n    function deposit(uint256 amount) external nonReentrant {\n        require(amount > 0, \"!amount\");\n\n        _depositFor(amount, msg.sender);\n\n        // An approve() by the msg.sender is required beforehand\n        IERC20(vaultParams.asset).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    /**\n     * @notice Deposits the `asset` from msg.sender added to `creditor`'s deposit.\n     * @notice Used for vault -> vault deposits on the user's behalf\n     * @param amount is the amount of `asset` to deposit\n     * @param creditor is the address that can claim/withdraw deposited amount\n     */\n    function depositFor(uint256 amount, address creditor)\n        external\n        nonReentrant\n    {\n        require(amount > 0, \"!amount\");\n        require(creditor != address(0));\n\n        _depositFor(amount, creditor);\n\n        // An approve() by the msg.sender is required beforehand\n        IERC20(vaultParams.asset).safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n    }\n\n    /**\n     * @notice Mints the vault shares to the creditor\n     * @param amount is the amount of `asset` deposited\n     * @param creditor is the address to receieve the deposit\n     */\n    function _depositFor(uint256 amount, address creditor) private {\n        uint256 currentRound = vaultState.round;\n        uint256 totalWithDepositedAmount = totalBalance() + amount;\n\n        require(totalWithDepositedAmount <= vaultParams.cap, \"Exceed cap\");\n        require(\n            totalWithDepositedAmount >= vaultParams.minimumSupply,\n            \"Insufficient balance\"\n        );\n\n        emit Deposit(creditor, amount, currentRound);\n\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[creditor];\n\n        // If we have an unprocessed pending deposit from the previous rounds, we have to process it.\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                currentRound,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        uint256 depositAmount = amount;\n\n        // If we have a pending deposit in the current round, we add on to the pending deposit\n        if (currentRound == depositReceipt.round) {\n            uint256 newAmount = uint256(depositReceipt.amount) + amount;\n            depositAmount = newAmount;\n        }\n\n        ShareMath.assertUint104(depositAmount);\n\n        depositReceipts[creditor] = Vault.DepositReceipt({\n            round: uint16(currentRound),\n            amount: uint104(depositAmount),\n            unredeemedShares: uint128(unredeemedShares)\n        });\n\n        uint256 newTotalPending = uint256(vaultState.totalPending) + amount;\n        ShareMath.assertUint128(newTotalPending);\n\n        vaultState.totalPending = uint128(newTotalPending);\n    }\n\n    /**\n     * @notice Initiates a withdrawal that can be processed once the round completes\n     * @param numShares is the number of shares to withdraw\n     */\n    function _initiateWithdraw(uint256 numShares) internal {\n        require(numShares > 0, \"!numShares\");\n\n        // We do a max redeem before initiating a withdrawal\n        // But we check if they must first have unredeemed shares\n        if (\n            depositReceipts[msg.sender].amount > 0 ||\n            depositReceipts[msg.sender].unredeemedShares > 0\n        ) {\n            redeem(0, true);\n        }\n\n        // This caches the `round` variable used in shareBalances\n        uint256 currentRound = vaultState.round;\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\n\n        bool withdrawalIsSameRound = withdrawal.round == currentRound;\n\n        emit InitiateWithdraw(msg.sender, numShares, currentRound);\n\n        uint256 existingShares = uint256(withdrawal.shares);\n\n        uint256 withdrawalShares;\n        if (withdrawalIsSameRound) {\n            withdrawalShares = existingShares  + numShares;\n        } else {\n            require(existingShares == 0, \"Existing withdraw\");\n            withdrawalShares = numShares;\n            withdrawals[msg.sender].round = uint16(currentRound);\n        }\n\n        ShareMath.assertUint128(withdrawalShares);\n        withdrawals[msg.sender].shares = uint128(withdrawalShares);\n\n        _transfer(msg.sender, address(this), numShares);\n    }\n\n    /**\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\n     * @return withdrawAmount the current withdrawal amount\n     */\n    function _completeWithdraw() internal returns (uint256) {\n        Vault.Withdrawal storage withdrawal = withdrawals[msg.sender];\n\n        uint256 withdrawalShares = withdrawal.shares;\n        uint256 withdrawalRound = withdrawal.round;\n\n        // This checks if there is a withdrawal\n        require(withdrawalShares > 0, \"Not initiated\");\n\n        require(withdrawalRound < vaultState.round, \"Round not closed\");\n\n        // We leave the round number as non-zero to save on gas for subsequent writes\n        withdrawals[msg.sender].shares = 0;\n        vaultState.queuedWithdrawShares = uint128(\n            uint256(vaultState.queuedWithdrawShares) - withdrawalShares\n        );\n\n        uint256 withdrawAmount =\n            ShareMath.sharesToAsset(\n                withdrawalShares,\n                roundPricePerShare[withdrawalRound],\n                vaultParams.decimals\n            );\n\n        emit Withdraw(msg.sender, withdrawAmount, withdrawalShares);\n\n        _burn(address(this), withdrawalShares);\n\n        require(withdrawAmount > 0, \"!withdrawAmount\");\n        transferAsset(msg.sender, withdrawAmount);\n\n        return withdrawAmount;\n    }\n\n    /**\n     * @notice Redeems shares that are owed to the account\n     * @param numShares is the number of shares to redeem, could be 0 when isMax=true\n     * @param isMax is flag for when callers do a max redemption\n     */\n    function redeem(uint256 numShares, bool isMax) public {\n        require(numShares > 0 || isMax, \"!numShares\");\n\n        Vault.DepositReceipt memory depositReceipt =\n            depositReceipts[msg.sender];\n\n        // This handles the null case when depositReceipt.round = 0\n        // Because we start with round = 1 at `initialize`\n        uint256 currentRound = vaultState.round;\n\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                currentRound,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        numShares = isMax ? unredeemedShares : numShares;\n        if (numShares == 0) {\n            return;\n        }\n        require(numShares <= unredeemedShares, \"Exceeds available\");\n\n        // If we have a depositReceipt on the same round, BUT we have some unredeemed shares\n        // we debit from the unredeemedShares, but leave the amount field intact\n        // If the round has past, with no new deposits, we just zero it out for new deposits.\n        if (depositReceipt.round < currentRound) {\n            depositReceipts[msg.sender].amount = 0;\n        }\n\n        ShareMath.assertUint128(numShares);\n        depositReceipts[msg.sender].unredeemedShares = uint128(\n            unredeemedShares - numShares\n        );\n\n        emit Redeem(msg.sender, numShares, depositReceipt.round);\n\n        _transfer(address(this), msg.sender, numShares);\n    }\n\n    /************************************************\n     *  VAULT OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Helper function that helps to save gas for writing values into the roundPricePerShare map.\n     *         Writing `1` into the map makes subsequent writes warm, reducing the gas from 20k to 5k.\n     *         Having 1 initialized beforehand will not be an issue as long as we round down share calculations to 0.\n     * @param numRounds is the number of rounds to initialize in the map\n     */\n    function initRounds(uint256 numRounds) external nonReentrant {\n        require(numRounds > 0, \"!numRounds\");\n\n        uint256 _round = vaultState.round;\n        for (uint256 i = 0; i < numRounds; i++) {\n            uint256 index = _round + i;\n            require(roundPricePerShare[index] == 0, \"Initialized\"); // AVOID OVERWRITING ACTUAL VALUES\n            roundPricePerShare[index] = ShareMath.PLACEHOLDER_UINT;\n        }\n    }\n\n    /**\n     * @notice Helper function that performs most administrative tasks\n     * such as setting next option, minting new shares, getting vault fees, etc.\n     * @param lastQueuedWithdrawAmount is old queued withdraw amount\n     * @param currentQueuedWithdrawShares is the queued withdraw shares for the current round\n     * @return newSpread is the new spread\n     * @return lockedBalance is the new balance used to calculate next option purchase size or collateral size\n     * @return queuedWithdrawAmount is the new queued withdraw amount for this round\n     */\n    function _rollToNextOption(\n        uint256 lastQueuedWithdrawAmount,\n        uint256 currentQueuedWithdrawShares\n    )\n        internal\n        returns (\n            address[] memory newSpread,\n            uint256 lockedBalance,\n            uint256 queuedWithdrawAmount,\n            address spreadToken\n        )\n    {\n        require(block.timestamp >= spreadState.nextOptionReadyAt, \"!ready\");\n\n        newSpread = spreadState.nextSpread;\n        spreadToken = spreadState.nextSpreadToken;\n        require(newSpread[0] != address(0), \"!nextSpread 0\");\n        require(newSpread[1] != address(0), \"!nextSpread 1\");\n        require(spreadToken != address(0), \"!spreadToken\");\n\n        address recipient = feeRecipient;\n        uint256 mintShares;\n        uint256 performanceFeeInAsset;\n        uint256 totalVaultFee;\n        {\n            uint256 newPricePerShare;\n            (\n                lockedBalance,\n                queuedWithdrawAmount,\n                newPricePerShare,\n                mintShares,\n                performanceFeeInAsset,\n                totalVaultFee\n            ) = VaultLifecycleSpread.rollover(\n                vaultState,\n                VaultLifecycleSpread.RolloverParams(\n                    vaultParams.decimals,\n                    IERC20(vaultParams.asset).balanceOf(address(this)),\n                    totalSupply(),\n                    lastQueuedWithdrawAmount,\n                    performanceFee,\n                    managementFee,\n                    currentQueuedWithdrawShares\n                )\n            );\n\n            spreadState.currentSpread = newSpread;\n            spreadState.currentSpreadToken = spreadToken;\n\n            spreadState.nextSpreadToken = address(0);\n            delete spreadState.nextSpread;\n\n            // Finalize the pricePerShare at the end of the round\n            uint256 currentRound = vaultState.round;\n            roundPricePerShare[currentRound] = newPricePerShare;\n\n            emit CollectVaultFees(\n                performanceFeeInAsset,\n                totalVaultFee,\n                currentRound,\n                recipient\n            );\n\n            vaultState.totalPending = 0;\n            vaultState.round = uint16(currentRound + 1);\n        }\n\n        _mint(address(this), mintShares);\n\n        if (totalVaultFee > 0) {\n            transferAsset(payable(recipient), totalVaultFee);\n        }\n\n        return (newSpread, lockedBalance, queuedWithdrawAmount, spreadToken);\n    }\n\n    /**\n     * @notice Helper function to make either an NATIVE transfer or ERC20 transfer\n     * @param recipient is the receiving address\n     * @param amount is the transfer amount\n     */\n    function transferAsset(address recipient, uint256 amount) internal {\n        address asset = vaultParams.asset;\n        if (asset == WNATIVE) {\n            IWETH(WNATIVE).withdraw(amount);\n            (bool success, ) = recipient.call{value: amount}(\"\");\n            require(success, \"Transfer failed\");\n            return;\n        }\n        IERC20(asset).safeTransfer(recipient, amount);\n    }\n\n    /************************************************\n     *  GETTERS\n     ***********************************************/\n\n    /**\n     * @notice Returns the asset balance held on the vault for the account\n     * @param account is the address to lookup balance for\n     * @return the amount of `asset` custodied by the vault for the user\n     */\n    function accountVaultBalance(address account)\n        external\n        view\n        returns (uint256)\n    {\n        uint256 _decimals = vaultParams.decimals;\n        uint256 assetPerShare =\n            ShareMath.pricePerShare(\n                totalSupply(),\n                totalBalance(),\n                vaultState.totalPending,\n                _decimals\n            );\n        return\n            ShareMath.sharesToAsset(shares(account), assetPerShare, _decimals);\n    }\n\n    /**\n     * @notice Getter for returning the account's share balance including unredeemed shares\n     * @param account is the account to lookup share balance for\n     * @return the share balance\n     */\n    function shares(address account) public view returns (uint256) {\n        (uint256 heldByAccount, uint256 heldByVault) = shareBalances(account);\n        return heldByAccount  + heldByVault;\n    }\n\n    /**\n     * @notice Getter for returning the account's share balance split between account and vault holdings\n     * @param account is the account to lookup share balance for\n     * @return heldByAccount is the shares held by account\n     * @return heldByVault is the shares held on the vault (unredeemedShares)\n     */\n    function shareBalances(address account)\n        public\n        view\n        returns (uint256 heldByAccount, uint256 heldByVault)\n    {\n        Vault.DepositReceipt memory depositReceipt = depositReceipts[account];\n\n        if (depositReceipt.round < ShareMath.PLACEHOLDER_UINT) {\n            return (balanceOf(account), 0);\n        }\n\n        uint256 unredeemedShares =\n            depositReceipt.getSharesFromReceipt(\n                vaultState.round,\n                roundPricePerShare[depositReceipt.round],\n                vaultParams.decimals\n            );\n\n        return (balanceOf(account), unredeemedShares);\n    }\n\n    /**\n     * @notice The price of a unit of share denominated in the `asset`\n     */\n    function pricePerShare() external view returns (uint256) {\n        return\n            ShareMath.pricePerShare(\n                totalSupply(),\n                totalBalance(),\n                vaultState.totalPending,\n                vaultParams.decimals\n            );\n    }\n\n    /**\n     * @notice Returns the vault's total balance, including the amounts locked into a short position\n     * @return total balance of the vault, including the amounts locked in third party protocols\n     */\n    function totalBalance() public view returns (uint256) {\n        return\n            uint256(vaultState.lockedAmountUsed) +\n                IERC20(vaultParams.asset).balanceOf(address(this));\n    }\n\n    /**\n     * @notice Returns the token decimals\n     */\n    function decimals() public view override returns (uint8) {\n        return vaultParams.decimals;\n    }\n\n    function cap() external view returns (uint256) {\n        return vaultParams.cap;\n    }\n\n    function nextOptionReadyAt() external view returns (uint256) {\n        return spreadState.nextOptionReadyAt;\n    }\n\n    function currentSpread() external view returns (address[] memory) {\n        return spreadState.currentSpread;\n    }\n\n    function nextSpread() external view returns (address[] memory) {\n        return spreadState.nextSpread;\n    }\n\n    function totalPending() external view returns (uint256) {\n        return vaultState.totalPending;\n    }\n}\n"
    },
    "contracts/vaults/SpreadVaults/SpreadBaseToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract SpreadBaseToken is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string internal _name;\n    string internal _symbol;\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 8;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/vaults/SpreadVaults/SpreadToken.sol": {
      "content": "pragma solidity =0.8.17;\n\nimport \"./SpreadBaseToken.sol\";\nimport {IController} from \"../../interfaces/GammaInterface.sol\";\n\nimport {ISpreadToken} from \"../../interfaces/IHimalayan.sol\";\n\n\ncontract SpreadToken is SpreadBaseToken {\n\n    address public immutable GAMMA_CONTROLLER;\n\n    IERC20 public asset;\n\n    IERC20 public underlyingAsset;\n\n    uint256 public expiryTimestamp;\n\n    bool public isPut;\n\n    address public himalayanVault;\n\n    bool public initialized;\n\n    bool public settled;\n\n    constructor(address gamma) public {\n        require(gamma != address(0), \"!gamma\");\n        GAMMA_CONTROLLER = gamma;\n    }\n\n    function init(\n        string calldata name,\n        string calldata symbol,\n        address _asset,\n        address _underlying,\n        uint256 _expiry,\n        bool _isPut\n    )\n        external\n    {\n        require(!initialized, \"Already initialized\");\n        require(_asset != address(0), \"!asset\");\n        require(_underlying != address(0), \"!asset\");\n        require(_expiry > block.timestamp, \"!expiry\");\n\n        initialized = true;\n        _name = name;\n        _symbol = symbol;\n        asset = IERC20(_asset);\n        underlyingAsset = IERC20(_underlying);\n        expiryTimestamp = _expiry;\n        isPut = _isPut;\n        himalayanVault = _msgSender();\n\n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](1);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.OpenVault,\n            address(this), // owner\n            address(0), // receiver\n            address(0), // asset\n            1, // vaultId\n            0, // amount\n            0, //index\n            \"\" //data\n        );\n\n        IController controller = IController(GAMMA_CONTROLLER);\n\n        controller.operate(actions);\n\n        controller.setOperator(himalayanVault, true);\n    }\n\n    function mint(uint256 amount) external {\n        require(_msgSender() == himalayanVault, \"Unauthorized access\");\n\n        _mint(_msgSender(), amount);\n    }\n\n    function settleVault() external {\n        require(_msgSender() == himalayanVault, \"Unauthorized access\");\n        settled = true;\n        \n        IController.ActionArgs[] memory actions =\n            new IController.ActionArgs[](1);\n\n        actions[0] = IController.ActionArgs(\n            IController.ActionType.SettleVault,\n            address(this), // owner\n            address(this), // address to transfer to\n            address(0), // not used\n            1, // vaultId\n            0, // not used\n            0, // not used\n            \"\" // not used\n        );\n\n        IController controller = IController(GAMMA_CONTROLLER);\n        controller.operate(actions);\n    }\n\n    function burnAndClaim() external {\n        require(settled, \"!settled\");\n\n        uint256 tokenBalance = balanceOf(_msgSender());\n        uint256 totalBalance = totalSupply();\n        uint256 receivedAmount = (tokenBalance * (asset.balanceOf(address(this)))) / (totalBalance);\n        _burn(_msgSender(), tokenBalance);\n        asset.transfer(_msgSender(), receivedAmount);\n    }\n\n}"
    },
    "contracts/vaults/SpreadVaults/SpreadVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport {GnosisAuction} from \"../../libraries/GnosisAuction.sol\";\nimport {\n    HimalayanCallSpreadStorage\n} from \"../../storage/HimalayanCallSpreadStorage.sol\";\nimport {Vault} from \"../../libraries/Vault.sol\";\nimport {VaultLifecycleSpread} from \"../../libraries/VaultLifecycleSpread.sol\";\nimport {ShareMath} from \"../../libraries/ShareMath.sol\";\nimport {HimalayanVault} from \"./base/HimalayanVault.sol\";\nimport {IOtoken} from \"../../interfaces/GammaInterface.sol\";\nimport {ISpreadToken} from \"../../interfaces/IHimalayan.sol\";\n\n/**\n * UPGRADEABILITY: Since we use the upgradeable proxy pattern, we must observe\n * the inheritance chain closely.\n * Any changes/appends in storage variable needs to happen in HimalayanCallSpreadStorage.\n * CallSpread should not inherit from any other contract aside from HimalayanVault, HimalayanCallSpreadStorage\n */\ncontract SpreadVault is HimalayanVault, HimalayanCallSpreadStorage {\n    using SafeERC20 for IERC20;\n    using ShareMath for Vault.DepositReceipt;\n\n    /************************************************\n     *  IMMUTABLES & CONSTANTS\n     ***********************************************/\n\n    /// @notice oTokenFactory is the factory contract used to spawn otokens. Used to lookup otokens.\n    address public immutable OTOKEN_FACTORY;\n\n    // The minimum duration for an option auction.\n    uint256 private constant MIN_AUCTION_DURATION = 5 minutes;\n\n    /************************************************\n     *  EVENTS\n     ***********************************************/\n\n    event OpenSpread(\n        address[] spread,\n        uint256 depositAmount,\n        address indexed manager,\n        address indexed spreadToken\n    );\n\n    event CloseSpread(\n        address[] spread,\n        uint256 withdrawAmount,\n        address indexed manager,\n        address indexed spreadToken\n    );\n\n    event NewSpreadStrikesSelected(\n        uint256[] strikePrices,\n        uint256[] deltas,\n        address spreadToken\n    );\n\n    event PremiumDiscountSet(\n        uint256 premiumDiscount,\n        uint256 newPremiumDiscount\n    );\n\n    event AuctionDurationSet(\n        uint256 auctionDuration,\n        uint256 newAuctionDuration\n    );\n\n    event InstantWithdraw(\n        address indexed account,\n        uint256 amount,\n        uint256 round\n    );\n\n    /************************************************\n     *  STRUCTS\n     ***********************************************/\n\n    /**\n     * @notice Initialization parameters for the vault.\n     * @param _owner is the owner of the vault with critical permissions\n     * @param _feeRecipient is the address to recieve vault performance and management fees\n     * @param _managementFee is the management fee pct.\n     * @param _performanceFee is the perfomance fee pct.\n     * @param _tokenName is the name of the token\n     * @param _tokenSymbol is the symbol of the token\n     * @param _optionsPremiumPricer is the address of the contract with the\n       black-scholes premium calculation logic\n     * @param _strikeSelection is the address of the contract with strike selection logic\n     * @param _premiumDiscount is the vault's discount applied to the premium\n     * @param _auctionDuration is the duration of the gnosis auction\n     */\n    struct InitParams {\n        address _owner;\n        address _keeper;\n        address _feeRecipient;\n        uint256 _managementFee;\n        uint256 _performanceFee;\n        string _tokenName;\n        string _tokenSymbol;\n        address _optionsPremiumPricer;\n        address _strikeSelection;\n        uint32 _premiumDiscount;\n        uint256 _auctionDuration;\n    }\n\n    /************************************************\n     *  CONSTRUCTOR & INITIALIZATION\n     ***********************************************/\n\n    /**\n     * @notice Initializes the contract with immutable variables\n     * @param _wnative is the Wrapped Native contract\n     * @param _usdc is the USDC contract\n     * @param _oTokenFactory is the contract address for minting new opyn option types (strikes, asset, expiry)\n     * @param _gammaController is the contract address for opyn actions\n     * @param _marginPool is the contract address for providing collateral to opyn\n     * @param _gnosisEasyAuction is the contract address that facilitates gnosis auctions\n     * @param _spreadTokenLogic Spread token logic contract\n     */\n    constructor(\n        address _wnative,\n        address _usdc,\n        address _oTokenFactory,\n        address _gammaController,\n        address _marginPool,\n        address _gnosisEasyAuction,\n        address _spreadTokenLogic\n    )\n        HimalayanVault(\n            _wnative,\n            _usdc,\n            _gammaController,\n            _marginPool,\n            _gnosisEasyAuction,\n            _spreadTokenLogic\n        )\n    {\n        require(_oTokenFactory != address(0), \"!_oTokenFactory\");\n        OTOKEN_FACTORY = _oTokenFactory;\n    }\n\n    /**\n     * @notice Initializes the OptionVault contract with storage variables.\n     * @param _initParams is the struct with vault initialization parameters\n     * @param _vaultParams is the struct with vault general data\n     */\n    function initialize(\n        InitParams calldata _initParams,\n        Vault.VaultParams calldata _vaultParams\n    ) external initializer {\n        baseInitialize(\n            _initParams._owner,\n            _initParams._keeper,\n            _initParams._feeRecipient,\n            _initParams._managementFee,\n            _initParams._performanceFee,\n            _initParams._tokenName,\n            _initParams._tokenSymbol,\n            _vaultParams\n        );\n        require(\n            _initParams._optionsPremiumPricer != address(0),\n            \"!_optionsPremiumPricer\"\n        );\n        require(\n            _initParams._strikeSelection != address(0),\n            \"!_strikeSelection\"\n        );\n        require(\n            _initParams._premiumDiscount > 0 &&\n                _initParams._premiumDiscount <\n                100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\n            \"!_premiumDiscount\"\n        );\n        require(\n            _initParams._auctionDuration >= MIN_AUCTION_DURATION,\n            \"!_auctionDuration\"\n        );\n        optionsPremiumPricer = _initParams._optionsPremiumPricer;\n        strikeSelection = _initParams._strikeSelection;\n        premiumDiscount = _initParams._premiumDiscount;\n        auctionDuration = _initParams._auctionDuration;\n    }\n\n    /************************************************\n     *  SETTERS\n     ***********************************************/\n\n    /**\n     * @notice Sets the new discount on premiums for options we are selling\n     * @param newPremiumDiscount is the premium discount\n     */\n    function setPremiumDiscount(uint256 newPremiumDiscount)\n        external\n        onlyKeeper\n    {\n        require(\n            newPremiumDiscount > 0 &&\n                newPremiumDiscount <= 100 * Vault.PREMIUM_DISCOUNT_MULTIPLIER,\n            \"Invalid discount\"\n        );\n\n        emit PremiumDiscountSet(premiumDiscount, newPremiumDiscount);\n\n        premiumDiscount = newPremiumDiscount;\n    }\n\n    /**\n     * @notice Sets the new options premium pricer contract\n     * @param newOptionsPremiumPricer is the address of the new strike selection contract\n     */\n    function setOptionsPremiumPricer(address newOptionsPremiumPricer)\n        external\n        onlyOwner\n    {\n        require(\n            newOptionsPremiumPricer != address(0),\n            \"!newOptionsPremiumPricer\"\n        );\n        optionsPremiumPricer = newOptionsPremiumPricer;\n    }\n\n    /**\n     * @notice Sets the new auction duration\n     * @param newAuctionDuration is the auction duration\n     */\n    function setAuctionDuration(uint256 newAuctionDuration) external onlyOwner {\n        require(\n            newAuctionDuration >= MIN_AUCTION_DURATION,\n            \"Invalid auction duration\"\n        );\n\n        emit AuctionDurationSet(auctionDuration, newAuctionDuration);\n\n        auctionDuration = newAuctionDuration;\n    }\n\n    /**\n     * @notice Sets the new strike selection contract\n     * @param newStrikeSelection is the address of the new strike selection contract\n     */\n    function setStrikeSelection(address newStrikeSelection) external onlyOwner {\n        require(newStrikeSelection != address(0), \"!newStrikeSelection\");\n        strikeSelection = newStrikeSelection;\n    }\n\n    /**\n     * @notice Sets oToken Premium\n     * @param minPrice is the new oToken Premium in the units of 10**18\n     */\n    function setMinPrice(uint256 minPrice) external onlyKeeper {\n        require(minPrice > 0, \"!minPrice\");\n        currentSpreadPremium = minPrice;\n    }\n\n    /************************************************\n     *  VAULT OPERATIONS\n     ***********************************************/\n\n    /**\n     * @notice Withdraws the assets on the vault using the outstanding `DepositReceipt.amount`\n     * @param amount is the amount to withdraw\n     */\n    function withdrawInstantly(uint256 amount) external nonReentrant {\n        Vault.DepositReceipt storage depositReceipt =\n            depositReceipts[msg.sender];\n\n        uint256 currentRound = vaultState.round;\n        require(amount > 0, \"!amount\");\n        require(depositReceipt.round == currentRound, \"Invalid round\");\n\n        uint256 receiptAmount = depositReceipt.amount;\n        require(receiptAmount >= amount, \"Exceed amount\");\n\n        // Subtraction underflow checks already ensure it is smaller than uint104\n        depositReceipt.amount = uint104(receiptAmount - amount);\n        vaultState.totalPending = uint128(\n            uint256(vaultState.totalPending) - amount\n        );\n\n        emit InstantWithdraw(msg.sender, amount, currentRound);\n\n        transferAsset(msg.sender, amount);\n    }\n\n    /**\n     * @notice Initiates a withdrawal that can be processed once the round completes\n     * @param numShares is the number of shares to withdraw\n     */\n    function initiateWithdraw(uint256 numShares) external nonReentrant {\n        _initiateWithdraw(numShares);\n        currentQueuedWithdrawShares = currentQueuedWithdrawShares + numShares;\n    }\n\n    /**\n     * @notice Completes a scheduled withdrawal from a past round. Uses finalized pps for the round\n     */\n    function completeWithdraw() external nonReentrant {\n        uint256 withdrawAmount = _completeWithdraw();\n        lastQueuedWithdrawAmount = uint128(\n            uint256(lastQueuedWithdrawAmount) - withdrawAmount\n        );\n    }\n\n    /**\n     * @notice Sets the next call spread the vault will be setting up existing the vault.\n     *         This allows all the users to withdraw if the next option is malicious.\n     */\n    function commitAndClose() external nonReentrant {\n        address[] memory oldSpread = spreadState.currentSpread;\n        address oldSpreadToken = spreadState.currentSpreadToken;\n\n        VaultLifecycleSpread.CloseParams memory closeParams =\n            VaultLifecycleSpread.CloseParams({\n                OTOKEN_FACTORY: OTOKEN_FACTORY,\n                USDC: USDC,\n                currentSpread: oldSpread,\n                delay: 0,\n                strikeSelection: strikeSelection,\n                premiumDiscount: premiumDiscount,\n                SPREAD_TOKEN_IMPL: SPREAD_TOKEN\n            });\n\n        (\n            address[] memory spread,\n            uint256[]  memory strikePrices,\n            uint256[] memory deltas,\n            address spreadToken\n        ) = VaultLifecycleSpread.commitAndClose(closeParams, vaultParams, vaultState);\n\n        emit NewSpreadStrikesSelected(strikePrices, deltas, spreadToken);\n        \n        bool isPut = vaultParams.isPut;\n\n        if (isPut) {\n            require(\n                IOtoken(spread[0]).strikePrice() > IOtoken(spread[1]).strikePrice(),\n                \"Short put otoken must have higher strike price then long put otoken\"\n            );\n        }\n        else {\n            require(\n                IOtoken(spread[0]).strikePrice() < IOtoken(spread[1]).strikePrice(),\n                \"Short otoken must have less strike price then long token\"\n            );\n        }\n        \n        spreadState.nextSpread = spread;\n        spreadState.nextSpreadToken = spreadToken;\n\n        uint256 nextOptionReady = block.timestamp;\n        require(\n            nextOptionReady <= type(uint32).max,\n            \"Overflow nextOptionReady\"\n        );\n        spreadState.nextOptionReadyAt = uint32(nextOptionReady);\n\n        _closeSpread(oldSpread, oldSpreadToken);\n    }\n\n    /**\n     * @notice Closes the existing short position for the vault.\n     */\n    function _closeSpread(address[] memory oldSpread, address oldSpreadToken) private {\n        uint256 lockedAmount = vaultState.lockedAmount;\n        if (oldSpread.length > 0 && oldSpread[0] != address(0)) {\n            vaultState.lastLockedAmount = uint104(lockedAmount);\n        }\n        vaultState.lockedAmount = 0;\n        vaultState.lockedAmountUsed = 0;\n        \n        delete spreadState.currentSpread;\n\n        if (oldSpread.length > 0 && oldSpread[0] != address(0)) {\n            uint256 withdrawAmount =\n                VaultLifecycleSpread.settleSpread(GAMMA_CONTROLLER, oldSpreadToken);\n            emit CloseSpread(oldSpread, withdrawAmount, msg.sender, oldSpreadToken);\n        }\n    }\n\n    /**\n     * @notice Rolls the vault's funds into a new short position.\n     */\n    function rollToNextOption(uint256 index) external onlyKeeper nonReentrant {\n        uint256 currQueuedWithdrawShares = currentQueuedWithdrawShares;\n        uint104 lockedAmountUsed = vaultState.lockedAmountUsed;\n        address[] memory newSpread = spreadState.currentSpread;\n        uint256 lockedBalance = vaultState.lockedAmount;\n        address spreadToken = spreadState.currentSpreadToken;\n        uint256 queuedWithdrawAmount = 0;\n        uint256 totalMinted = 0;\n\n        if (lockedAmountUsed == 0) {\n            (\n                newSpread,\n                lockedBalance,\n                queuedWithdrawAmount,\n                spreadToken\n            ) =\n                _rollToNextOption(\n                    lastQueuedWithdrawAmount,\n                    currQueuedWithdrawShares\n                );\n\n            lastQueuedWithdrawAmount = queuedWithdrawAmount;\n\n            uint256 newQueuedWithdrawShares =\n                uint256(vaultState.queuedWithdrawShares) + currQueuedWithdrawShares;\n            ShareMath.assertUint128(newQueuedWithdrawShares);\n            vaultState.queuedWithdrawShares = uint128(newQueuedWithdrawShares);\n\n            currentQueuedWithdrawShares = 0;\n\n            ShareMath.assertUint104(lockedBalance);\n            vaultState.lockedAmount = uint104(lockedBalance);\n\n            emit OpenSpread(newSpread, lockedBalance, msg.sender, spreadToken);\n        }\n        \n        lockedBalance = lockedBalance - lockedAmountUsed;\n\n        while (index > 0 && lockedBalance > 0) {\n            (uint256 optionsMintAmount, uint256 collateralUsed) =\n                VaultLifecycleSpread.createSpread(\n                    GAMMA_CONTROLLER,\n                    MARGIN_POOL,\n                    newSpread,\n                    lockedBalance,\n                    spreadToken,\n                    lockedAmountUsed == 0\n                );\n            \n            totalMinted = totalMinted + optionsMintAmount;\n            index = index - 1;\n            lockedAmountUsed = lockedAmountUsed + uint104(collateralUsed);\n            \n            lockedBalance = lockedBalance - collateralUsed;\n        }\n        vaultState.lockedAmountUsed = vaultState.lockedAmountUsed + lockedAmountUsed;\n        ISpreadToken(spreadToken).mint(totalMinted);\n\n    }\n\n    /**\n     * @notice Initiate the gnosis auction.\n     */\n    function startAuction() external onlyKeeper nonReentrant {\n        GnosisAuction.AuctionDetails memory auctionDetails;\n\n        address currentSellToken = spreadState.currentSpreadToken;\n\n        auctionDetails.tokenAddress = currentSellToken;\n        auctionDetails.gnosisEasyAuction = GNOSIS_EASY_AUCTION;\n        auctionDetails.asset = vaultParams.asset;\n        auctionDetails.assetDecimals = vaultParams.decimals;\n        auctionDetails.premium = currentSpreadPremium;\n        auctionDetails.duration = auctionDuration;\n\n        optionAuctionID = VaultLifecycleSpread.startAuction(auctionDetails);\n    }\n\n    /**\n     * @notice Recovery function that returns an ERC20 token to the recipient\n     * @param token is the ERC20 token to recover from the vault\n     * @param recipient is the recipient of the recovered tokens\n     */\n    function recoverTokens(address token, address recipient)\n        external\n        onlyOwner\n    {\n        require(token != vaultParams.asset, \"Vault asset not recoverable\");\n        require(token != address(this), \"Vault share not recoverable\");\n        require(recipient != address(this), \"Recipient cannot be vault\");\n        require(token != spreadState.currentSpreadToken, \"Spread Token not recoverable\");\n\n        IERC20(token).safeTransfer(\n            recipient,\n            IERC20(token).balanceOf(address(this))\n        );\n    }\n}\n"
    },
    "contracts/vendor/CustomSafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure.\n * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n      require(_callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)),\n          \"ERC20 transfer failed\");\n  }\n\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n      require(_callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)),\n          \"ERC20 transferFrom failed\");\n  }\n\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n    if (_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value))) {\n        return;\n    }\n    require(_callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0))\n        && _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)),\n        \"ERC20 approve failed\");\n  }\n\n  function _callOptionalReturn(IERC20 token, bytes memory data) private returns (bool) {\n      // solhint-disable-next-line avoid-low-level-calls\n      (bool success, bytes memory returndata) = address(token).call(data);\n      if (!success) {\n          return false;\n      }\n\n      if (returndata.length >= 32) { // Return data is optional\n          return abi.decode(returndata, (bool));\n      }\n\n      // In a wierd case when return data is 1-31 bytes long - return false.\n      return returndata.length == 0;\n  }\n}\n"
    },
    "contracts/vendor/DSMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// math.sol -- mixin for inline numerical wizardry\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >0.4.13;\n\nlibrary DSMath {\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\n    }\n\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\n    }\n\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\n    }\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x <= y ? x : y;\n    }\n\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        return x >= y ? x : y;\n    }\n\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n        return x <= y ? x : y;\n    }\n\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n        return x >= y ? x : y;\n    }\n\n    uint256 constant WAD = 10**18;\n    uint256 constant RAY = 10**27;\n\n    //rounds to zero if x*y < WAD / 2\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), WAD / 2) / WAD;\n    }\n\n    //rounds to zero if x*y < WAD / 2\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, y), RAY / 2) / RAY;\n    }\n\n    //rounds to zero if x*y < WAD / 2\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, WAD), y / 2) / y;\n    }\n\n    //rounds to zero if x*y < RAY / 2\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = add(mul(x, RAY), y / 2) / y;\n    }\n\n    // This famous algorithm is called \"exponentiation by squaring\"\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\n    //\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\n    //\n    // These facts are why it works:\n    //\n    //  If n is even, then x^n = (x^2)^(n/2).\n    //  If n is odd,  then x^n = x * x^(n-1),\n    //   and applying the equation for even x gives\n    //    x^n = x * (x^2)^((n-1) / 2).\n    //\n    //  Also, EVM division is flooring and\n    //    floor[(n-1) / 2] = floor[n / 2].\n    //\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rmul(x, x);\n\n            if (n % 2 != 0) {\n                z = rmul(z, x);\n            }\n        }\n    }\n}\n"
    },
    "contracts/vendor/upgrades/AdminUpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.8;\n\nimport './UpgradeabilityProxy.sol';\n\n/**\n * @title AdminUpgradeabilityProxy\n * @dev This contract combines an upgradeability proxy with an authorization\n * mechanism for administrative tasks.\n * All external functions in this contract must be guarded by the\n * `ifAdmin` modifier. See ethereum/solidity#3864 for a Solidity\n * feature proposal that would enable this to be done automatically.\n */\ncontract AdminUpgradeabilityProxy is UpgradeabilityProxy {\n  /**\n   * Contract constructor.\n   * @param _logic address of the initial implementation.\n   * @param admin_ Address of the proxy administrator.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _logic, address admin_, bytes memory _data) UpgradeabilityProxy(_logic, _data) payable {\n    assert(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1));\n    _setAdmin(admin_);\n  }\n\n  /**\n   * @dev Emitted when the administration has been transferred.\n   * @param previousAdmin Address of the previous admin.\n   * @param newAdmin Address of the new admin.\n   */\n  event AdminChanged(address previousAdmin, address newAdmin);\n\n  /**\n   * @dev Storage slot with the admin of the contract.\n   * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n   * validated in the constructor.\n   */\n\n  bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n  /**\n   * @dev Modifier to check whether the `msg.sender` is the admin.\n   * If it is, it will run the function. Otherwise, it will delegate the call\n   * to the implementation.\n   */\n  modifier ifAdmin() {\n    if (msg.sender == _admin()) {\n      _;\n    } else {\n      _fallback();\n    }\n  }\n\n  /**\n   * @return adminAddress The address of the proxy admin.\n   */\n  function admin() external ifAdmin returns (address adminAddress) {\n    return _admin();\n  }\n\n  /**\n   * @return implementationAddress The address of the implementation.\n   */\n  function implementation() external ifAdmin returns (address implementationAddress) {\n    return _implementation();\n  }\n\n  /**\n   * @dev Changes the admin of the proxy.\n   * Only the current admin can call this function.\n   * @param newAdmin Address to transfer proxy administration to.\n   */\n  function changeAdmin(address newAdmin) external ifAdmin {\n    require(newAdmin != address(0), \"Cannot change the admin of a proxy to the zero address\");\n    emit AdminChanged(_admin(), newAdmin);\n    _setAdmin(newAdmin);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy.\n   * Only the admin can call this function.\n   * @param newImplementation Address of the new implementation.\n   */\n  function upgradeTo(address newImplementation) external ifAdmin {\n    _upgradeTo(newImplementation);\n  }\n\n  /**\n   * @dev Upgrade the backing implementation of the proxy and call a function\n   * on the new implementation.\n   * This is useful to initialize the proxied contract.\n   * @param newImplementation Address of the new implementation.\n   * @param data Data to send as msg.data in the low level call.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   */\n  function upgradeToAndCall(address newImplementation, bytes calldata data) payable external ifAdmin {\n    _upgradeTo(newImplementation);\n    (bool success,) = newImplementation.delegatecall(data);\n    require(success);\n  }\n\n  /**\n   * @return adm The admin slot.\n   */\n  function _admin() internal view returns (address adm) {\n    bytes32 slot = ADMIN_SLOT;\n    assembly {\n      adm := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Sets the address of the proxy admin.\n   * @param newAdmin Address of the new proxy admin.\n   */\n  function _setAdmin(address newAdmin) internal {\n    bytes32 slot = ADMIN_SLOT;\n\n    assembly {\n      sstore(slot, newAdmin)\n    }\n  }\n\n  /**\n   * @dev Only fall back when the sender is not the admin.\n   */\n  function _willFallback() internal override virtual {\n    require(msg.sender != _admin(), \"Cannot call fallback function from the proxy admin\");\n    super._willFallback();\n  }\n}\n"
    },
    "contracts/vendor/upgrades/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\n/**\n * @title Proxy\n * @dev Implements delegation of calls to other contracts, with proper\n * forwarding of return values and bubbling of failures.\n * It defines a fallback function that delegates all calls to the address\n * returned by the abstract _implementation() internal function.\n */\nabstract contract Proxy {\n  /**\n   * @dev Fallback function.\n   * Implemented entirely in `_fallback`.\n   */\n  fallback () payable external {\n    _fallback();\n  }\n\n  /**\n   * @dev Receive function.\n   * Implemented entirely in `_fallback`.\n   */\n  receive () payable external {\n    // _fallback();\n  }\n\n  /**\n   * @return The Address of the implementation.\n   */\n  function _implementation() internal virtual view returns (address);\n\n  /**\n   * @dev Delegates execution to an implementation contract.\n   * This is a low level function that doesn't return to its internal call site.\n   * It will return to the external caller whatever the implementation returns.\n   * @param implementation Address to delegate.\n   */\n  function _delegate(address implementation) internal {\n    assembly {\n      // Copy msg.data. We take full control of memory in this inline assembly\n      // block because it will not return to Solidity code. We overwrite the\n      // Solidity scratch pad at memory position 0.\n      calldatacopy(0, 0, calldatasize())\n\n      // Call the implementation.\n      // out and outsize are 0 because we don't know the size yet.\n      let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n      // Copy the returned data.\n      returndatacopy(0, 0, returndatasize())\n\n      switch result\n      // delegatecall returns 0 on error.\n      case 0 { revert(0, returndatasize()) }\n      default { return(0, returndatasize()) }\n    }\n  }\n\n  /**\n   * @dev Function that is run as the first thing in the fallback function.\n   * Can be redefined in derived contracts to add functionality.\n   * Redefinitions must call super._willFallback().\n   */\n  function _willFallback() internal virtual {\n  }\n\n  /**\n   * @dev fallback implementation.\n   * Extracted to enable manual triggering.\n   */\n  function _fallback() internal {\n    _willFallback();\n    _delegate(_implementation());\n  }\n}\n"
    },
    "contracts/vendor/upgrades/UpgradeabilityProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.17;\n\nimport './Proxy.sol';\nimport '@openzeppelin/contracts/utils/Address.sol';\n\n/**\n * @title UpgradeabilityProxy\n * @dev This contract implements a proxy that allows to change the\n * implementation address to which it will delegate.\n * Such a change is called an implementation upgrade.\n */\ncontract UpgradeabilityProxy is Proxy {\n  /**\n   * @dev Contract constructor.\n   * @param _logic Address of the initial implementation.\n   * @param _data Data to send as msg.data to the implementation to initialize the proxied contract.\n   * It should include the signature and the parameters of the function to be called, as described in\n   * https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#function-selector-and-argument-encoding.\n   * This parameter is optional, if no data is given the initialization call to proxied contract will be skipped.\n   */\n  constructor(address _logic, bytes memory _data) payable {\n    assert(IMPLEMENTATION_SLOT == bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1));\n    _setImplementation(_logic);\n    if(_data.length > 0) {\n      (bool success,) = _logic.delegatecall(_data);\n      require(success);\n    }\n  }\n\n  /**\n   * @dev Emitted when the implementation is upgraded.\n   * @param implementation Address of the new implementation.\n   */\n  event Upgraded(address indexed implementation);\n\n  /**\n   * @dev Storage slot with the address of the current implementation.\n   * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n   * validated in the constructor.\n   */\n  bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n  /**\n   * @dev Returns the current implementation.\n   * @return impl Address of the current implementation\n   */\n  function _implementation() internal override view returns (address impl) {\n    bytes32 slot = IMPLEMENTATION_SLOT;\n    assembly {\n      impl := sload(slot)\n    }\n  }\n\n  /**\n   * @dev Upgrades the proxy to a new implementation.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _upgradeTo(address newImplementation) internal {\n    _setImplementation(newImplementation);\n    emit Upgraded(newImplementation);\n  }\n\n  /**\n   * @dev Sets the implementation address of the proxy.\n   * @param newImplementation Address of the new implementation.\n   */\n  function _setImplementation(address newImplementation) internal {\n    require(Address.isContract(newImplementation), \"Cannot set a proxy implementation to a non-contract address\");\n\n    bytes32 slot = IMPLEMENTATION_SLOT;\n\n    assembly {\n      sstore(slot, newImplementation)\n    }\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 0
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}